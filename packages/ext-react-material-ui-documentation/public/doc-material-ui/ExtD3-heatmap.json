{
 "name": "Ext.d3.HeatMap",
 "xtype": "d3-heatmap",
 "reactname": "ExtD3-heatmap",
 "alias": "widget.d3-heatmap",
 "extended": "Ext.d3.svg.Svg,Ext.d3.Component,Ext.d3.ComponentBase,Ext.Component,Ext.Widget,Ext.Evented,Ext.Base",
 "extenders": "Ext.pivot.d3.HeatMap",
 "extends": "Ext.d3.svg.Svg",
 "mixed": "Ext.Mixin,Ext.d3.mixin.ToolTip,Ext.mixin.Accessible,Ext.mixin.Bindable,Ext.mixin.ComponentDelegation,Ext.mixin.Factoryable,Ext.mixin.Focusable,Ext.mixin.Identifiable,Ext.mixin.Inheritable,Ext.mixin.Keyboard,Ext.mixin.Observable,Ext.mixin.Pluggable,Ext.state.Stateful",
 "mixins": "Ext.d3.mixin.ToolTip",
 "requires": "Ext.d3.axis.Data,Ext.d3.axis.Color,Ext.d3.legend.Color,Ext.d3.Helpers",
 "text": "The 'd3-heatmap' component is used for visualizing matrices\nwhere the individual values are represented as colors.\nThe component makes use of two {@link Ext.d3.axis.Data} axes (one for each\ndimension of the matrix) and a single {@link Ext.d3.axis.Color} axis\nto encode the values.\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        renderTo: Ext.getBody(),\n        title: 'Heatmap Chart',\n        height: 750,\n        width: 750,\n        layout: 'fit',\n        items: [\n            {\n                xtype: 'd3-heatmap',\n                padding: {\n                    top: 20,\n                    right: 30,\n                    bottom: 20,\n                    left: 80\n                },\n\n                xAxis: {\n                    axis: {\n                        ticks: 'd3.timeDay',\n                        tickFormat: \"d3.timeFormat('%b %d')\",\n                        orient: 'bottom'\n                    },\n                    scale: {\n                        type: 'time'\n                    },\n                    title: {\n                        text: 'Date'\n                    },\n                    field: 'date',\n                    step: 24 * 60 * 60 * 1000\n                },\n\n                yAxis: {\n                    axis: {\n                        orient: 'left',\n                        tickFormat: \"d3.format('$d')\"\n                    },\n                    scale: {\n                        type: 'linear'\n                    },\n                    title: {\n                        text: 'Total'\n                    },\n                    field: 'bucket',\n                    step: 100\n                },\n\n                colorAxis: {\n                    scale: {\n                        type: 'linear',\n                        range: ['white', 'orange']\n                    },\n                    field: 'count',\n                    minimum: 0\n                },\n\n                tiles: {\n                    attr: {\n                        'stroke': 'black',\n                        'stroke-width': 1\n                    }\n                },\n\n                store: {\n                    fields: [\n                        {name: 'date', type: 'date', dateFormat: 'Y-m-d'},\n                        'bucket',\n                        'count'\n                    ],\n                    data: [\n                        { date: '2012-07-20', bucket: 800,  count: 119 },\n                        { date: '2012-07-20', bucket: 900,  count: 123 },\n                        { date: '2012-07-20', bucket: 1000, count: 173 },\n                        { date: '2012-07-20', bucket: 1100, count: 226 },\n                        { date: '2012-07-20', bucket: 1200, count: 284 },\n                        { date: '2012-07-21', bucket: 800,  count: 123 },\n                        { date: '2012-07-21', bucket: 900,  count: 165 },\n                        { date: '2012-07-21', bucket: 1000, count: 237 },\n                        { date: '2012-07-21', bucket: 1100, count: 278 },\n                        { date: '2012-07-21', bucket: 1200, count: 338 },\n                        { date: '2012-07-22', bucket: 900,  count: 154 },\n                        { date: '2012-07-22', bucket: 1000, count: 241 },\n                        { date: '2012-07-22', bucket: 1100, count: 246 },\n                        { date: '2012-07-22', bucket: 1200, count: 300 },\n                        { date: '2012-07-22', bucket: 1300, count: 305 },\n                        { date: '2012-07-23', bucket: 800,  count: 120 },\n                        { date: '2012-07-23', bucket: 900,  count: 156 },\n                        { date: '2012-07-23', bucket: 1000, count: 209 },\n                        { date: '2012-07-23', bucket: 1100, count: 267 },\n                        { date: '2012-07-23', bucket: 1200, count: 299 },\n                        { date: '2012-07-23', bucket: 1300, count: 316 },\n                        { date: '2012-07-24', bucket: 800,  count: 105 },\n                        { date: '2012-07-24', bucket: 900,  count: 156 },\n                        { date: '2012-07-24', bucket: 1000, count: 220 },\n                        { date: '2012-07-24', bucket: 1100, count: 255 },\n                        { date: '2012-07-24', bucket: 1200, count: 308 },\n                        { date: '2012-07-25', bucket: 800,  count: 104 },\n                        { date: '2012-07-25', bucket: 900,  count: 191 },\n                        { date: '2012-07-25', bucket: 1000, count: 201 },\n                        { date: '2012-07-25', bucket: 1100, count: 238 },\n                        { date: '2012-07-25', bucket: 1200, count: 223 },\n                        { date: '2012-07-26', bucket: 1300, count: 132 },\n                        { date: '2012-07-26', bucket: 1400, count: 117 },\n                        { date: '2012-07-26', bucket: 1500, count: 124 },\n                        { date: '2012-07-26', bucket: 1600, count: 154 },\n                        { date: '2012-07-26', bucket: 1700, count: 167 }\n                    ]\n                }\n            }\n        ]\n    });\n"
}