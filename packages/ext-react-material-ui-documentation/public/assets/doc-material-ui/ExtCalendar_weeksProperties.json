{
 "xtype": "calendar-weeks",
 "reactname": "ExtCalendar_weeks",
 "properties": [
  {
   "name": "activeChildTabIndex",
   "nameprimary": "activeChildTabIndex: Number",
   "text": "DOM tabIndex attribute to set on the\nactive Focusable child of this container when using the \"Roaming tabindex\"\ntechnique.\n",
   "from": "Ext.mixin.FocusableContainer",
   "optional": true,
   "type": "Number",
   "value": "0"
  },
  {
   "name": "activeItem",
   "nameprimary": "activeItem: Ext.Component/Object/String/Number - getActiveItem()/setActiveItem()",
   "text": "The item from the {@link #cfg!items #cfg-items}\ncollection that will be active first. This is usually only meaningful in a\n{@link Ext.layout.Card}, where only one item can be active at a time. If\npassed a string, it will be assumed to be a {@link Ext.ComponentQuery} selector. A number\nwill reference an index or a {@link Ext.Component} instance may be passed as\nwell. An object config will be created as a new component.\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "Ext.Component/Object/String/Number",
   "value": "0"
  },
  {
   "name": "addForm",
   "nameprimary": "addForm: Object - getAddForm()/setAddForm()",
   "text": "The configuration for the {@link Ext.calendar.form.Add} to be used\nwhen an event is to be created.  Use `null` to disable creation.\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Object",
   "value": "true"
  },
  {
   "name": "addOnSelect",
   "nameprimary": "addOnSelect: Boolean",
   "text": "`true` to show the {@link #cfg!addForm #addForm} when a selection is made on the body.\n\nUse {@link #cfg!addOnSelect #addOnSelect} to control view selection itself.\n",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "alignSelf",
   "nameprimary": "alignSelf: String - getAlignSelf()/setAlignSelf()",
   "text": "Specifies the self alignment of this widget in a box layout\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "String",
   "value": "null"
  },
  {
   "name": "allowFocusingDisabledChildren",
   "nameprimary": "allowFocusingDisabledChildren: Boolean",
   "text": "Set this to `true`\nto enable focusing disabled child items via keyboard.\n",
   "from": "Ext.mixin.FocusableContainer",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "allowSelection",
   "nameprimary": "allowSelection: Boolean",
   "text": "`true` to show the {@link #cfg!addForm #addForm} when a selection is made on the body.\n\nUse {@link #cfg!addOnSelect #addOnSelect} to control view selection itself.\n",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "alwaysOnTop",
   "nameprimary": "alwaysOnTop: Boolean/Number - getAlwaysOnTop()/setAlwaysOnTop()",
   "text": "A flag indicating that this component should\nbe above its floated siblings.\n\nThis may be a positive number to prioritize the ordering of multiple visible always on\ntop components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom* of the\nz-index stack.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Boolean/Number",
   "value": "false"
  },
  {
   "name": "anchor",
   "nameprimary": "anchor: Boolean - getAnchor()/setAnchor()",
   "text": "Configure `true` to show an anchor element pointing to the target component\nwhen this Panel is floating and {@link #method!showBy shown by} another component.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "anchorPosition",
   "nameprimary": "anchorPosition: String - getAnchorPosition()/setAnchorPosition()",
   "text": "Set the anchor position.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "String",
   "value": "null"
  },
  {
   "name": "ariaAttributes",
   "nameprimary": "ariaAttributes: Object - getAriaAttributes()/setAriaAttributes()",
   "text": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n",
   "accessor": true,
   "from": "Ext.mixin.Accessible",
   "type": "Object",
   "value": "null"
  },
  {
   "name": "ariaDescribedBy",
   "nameprimary": "ariaDescribedBy: String",
   "text": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #cfg!ariaLabelledBy #ariaLabelledBy}.\n",
   "from": "Ext.mixin.Accessible",
   "optional": true,
   "type": "String"
  },
  {
   "name": "ariaLabel",
   "nameprimary": "ariaLabel: String",
   "text": "ARIA label for this Component. It is best to use\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #cfg!ariaLabel #ariaLabel} and\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} config options are mutually exclusive.\n",
   "from": "Ext.mixin.Accessible",
   "optional": true,
   "type": "String"
  },
  {
   "name": "ariaLabelledBy",
   "nameprimary": "ariaLabelledBy: String",
   "text": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} and {@link #cfg!ariaLabel #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n",
   "from": "Ext.mixin.Accessible",
   "optional": true,
   "type": "String"
  },
  {
   "name": "autoDestroy",
   "nameprimary": "autoDestroy: Boolean - getAutoDestroy()/setAutoDestroy()",
   "text": "If `true`, child items will be destroyed as soon as they are\n{@link #method!remove removed} from this container.\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "autoSize",
   "nameprimary": "autoSize: Boolean - getAutoSize()/setAutoSize()",
   "text": "May be set to `false` for improved layout performance if auto-sizing is not required.\n\nSome versions of Safari, both desktop and mobile, have very slow performance\nif the application has deeply nested containers due to the following WebKit\nbug: https://bugs.webkit.org/show_bug.cgi?id=150445\n\nApplications that experience performance issues in the affected versions of\nSafari may need to turn off autoSizing globally for all `{@link Ext.Container}` instances\nby placing the following override in the application's \"overrides\" directory:\n\n    Ext.define('MyApp.overrides.Container', {\n        override: 'Ext.Container',\n        config: {\n            autoSize: false\n        }\n    });\n\nOnce auto-sizing support has turned off by default, it can be selectively\nturned back on only on those container instances that explicitly need auto-sizing\nbehavior by setting `{@link #cfg!autoSize autoSize}` to `true`.\n\nThis option can also be used to allow items to be sized in percentage\nunits as a workaround for the following browser bug:\nhttps://bugs.webkit.org/show_bug.cgi?id=137730\n\nTo illustrate, the following example should render a 200px by 200px green box\n(the container) with a yellow box inside of it (the child item).  The child\nitem's height and width are both set to `'50%'` so the child should render\nexactly 100px by 100px in size.\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        renderTo: Ext.getBody(),\n        height: 200,\n        width: 200,\n        style: 'background: green',\n        items: [{\n            xtype: 'component',\n            style: 'background: yellow',\n            height: '50%',\n            width: '50%'\n        }]\n    });\n\nAll browsers except for Safari render the previous example correctly, but\nSafari does not assign a height to the component.  To make percentage-sized\nitems work in Safari, simply set `{@link #cfg!autoSize autoSize}` to `false` on the container.\n\nSince the underlying implementation works by absolutely positioning the container's\nbody element, this option can only be used when the container is not\n\"shrink wrapping\" the content in either direction.  When `{@link #cfg!autoSize autoSize}` is\nset to `false`, shrink wrapped dimension(s) will collapse to 0.\n",
   "accessor": true,
   "from": "Ext.Container",
   "optional": true,
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "axisLock",
   "nameprimary": "axisLock: Boolean - getAxisLock()/setAxisLock()",
   "text": "If `true`, then, when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo} fallback on\nconstraint violation only takes place along the major align axis.\n\nThat is, if alignment `\"l-r\"` is being used, and `axisLock: true` is used,\nthen if constraints fail, only fallback to `\"r-l\"` is considered.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "bbar",
   "nameprimary": "bbar: Object/Object[] - getBbar()/setBbar()",
   "text": "Convenience config. Short for 'Bottom Bar'.\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        html: 'hello world',\n        padding: 20,\n        bbar: [{\n            xtype: 'button',\n            text : 'Button 1'\n        }]\n    });\n```\n\nis equivalent to\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        html: 'hello world',\n        padding: 20,\n        items: [{\n            xtype: 'toolbar',\n            docked: 'bottom',\n            items: [{\n                xtype: 'button',\n                text: 'Button 1'\n            }]\n        }]\n    });\n```\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Object/Object[]",
   "value": "null"
  },
  {
   "name": "bind",
   "nameprimary": "bind: Object/String - getBind()/setBind()",
   "text": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n\n**Note:** If  bind is passed as a string, it will use the\n{@link Ext.Component#property!defaultBindProperty Ext.Component#property-defaultBindProperty} for the binding.\n",
   "accessor": true,
   "from": "Ext.mixin.Bindable",
   "optional": true,
   "type": "Object/String",
   "value": "null"
  },
  {
   "name": "bodyBorder",
   "nameprimary": "bodyBorder: Boolean - getBodyBorder()/setBodyBorder()",
   "text": "Controls the border style of the panel body using the following values:\n\n- `true` to enable the border around the panel body (as defined by the theme)\nNote that even when enabled, the bodyBorder is only visible when there are\ndocked items around the edges of the panel.  Where the bodyBorder touches the\npanel's outer border it is automatically collapsed into a single border.\n\n- `false` to disable the body border\n\n- `null` - use the value of {@link #cfg!border border} as the value for\n`{@link #cfg!bodyBorder bodyBorder}`\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "bodyCls",
   "nameprimary": "bodyCls: String/String[] - getBodyCls()/setBodyCls()",
   "text": "The CSS class to add to this container's body element.\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "String/String[]",
   "value": "null"
  },
  {
   "name": "bodyPadding",
   "nameprimary": "bodyPadding: Number/Boolean/String - getBodyPadding()/setBodyPadding()",
   "text": "A shortcut for setting a padding style on the body element. The value can\neither be a number to be applied to all sides, or a normal CSS string\ndescribing padding.\n\n    bodyPadding: 5 // 5px padding on all sides\n\n    bodyPadding: '10 20' // 10px top and bottom padding - 20px side padding\n\n*See the {@link Ext.dom.Element#static-method!unitizeBox unitizeBox} method\nfor more information on what string values are valid*\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Number/Boolean/String",
   "value": "null"
  },
  {
   "name": "bodyStyle",
   "nameprimary": "bodyStyle: String/Object",
   "text": "Custom CSS styles to be applied to the panel's body element, which can be\nsupplied as a valid CSS style string or an object containing style property\nname/value pairs.\n\nFor example, these two formats are interpreted to be equivalent:\n\n    bodyStyle: 'background:#ffc; padding:10px;'\n\n    bodyStyle: {\n        background: '#ffc',\n        padding: '10px'\n    }\n",
   "accessor": "w",
   "from": "Ext.Panel",
   "type": "String/Object",
   "value": "null"
  },
  {
   "name": "border",
   "nameprimary": "border: Boolean - getBorder()/setBorder()",
   "text": "Enables or disables bordering on this component.\nThe following values are accepted:\n\n- `null` or `true (default): Do nothing and allow the border to be specified\nby the theme.\n- `false`: suppress the default border provided by the theme.\n\nPlease note that enabling bordering via this config will not add a `border-color`\nor `border-style` CSS property to the component; you provide the `border-color`\nand `border-style` via CSS rule or {@link #cfg!style #style} configuration\n(if not already provide by the theme).\n\n## Using {@link #cfg!style #style}:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        style: 'border: 1px solid blue;'\n        // ...\n    });\n\n## Using CSS:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        cls: 'my-component'\n        // ...\n    });\n\nAnd your CSS file:\n\n    .my-component {\n        border: 1px solid red;\n    }\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "bottom",
   "nameprimary": "bottom: Number/String - getBottom()/setBottom()",
   "text": "The absolute bottom position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "buttonAlign",
   "nameprimary": "buttonAlign: String - getButtonAlign()/setButtonAlign()",
   "text": "The alignment of any buttons added to this panel. Valid values are 'right',\n'left' and 'center'\n",
   "accessor": true,
   "from": "Ext.panel.Buttons",
   "optional": true,
   "type": "String",
   "value": "'center'"
  },
  {
   "name": "buttons",
   "nameprimary": "buttons: Object/Ext.Button[]",
   "text": " The buttons for this panel to be displayed in the `{@link #cfg!buttonToolbar buttonToolbar}` as a keyed\n object (or array) of button configuration objects.\n\n```javascript\n @example({ framework: 'extjs' })\n     Ext.create({\n         xtype: 'panel',\n         html: 'hello world',\n         padding: 20,\n         buttons: {\n            ok: {text: 'OK', handler: 'onOK'}\n         }\n     });\n ```\n\n For buttons that are defined in `{@link #cfg!standardButtons standardButtons}` (such as `'ok'`), there is a\n more convenient short-hand for this config:\n\n ```javascript\n @example({ framework: 'extjs' })\n     Ext.create({\n         fullscreen: true,\n         xtype: 'panel',\n         html: 'hello world',\n         padding: 20,\n         buttons: {\n            ok: 'onOK',\n            cancel: 'onCancel'\n         }\n     });\n ```\n\n The {@link #cfg!minButtonWidth #minButtonWidth} is used as the default\n {@link Ext.Button#cfg!minWidth minWidth} for the buttons in the buttons toolbar.\n",
   "from": "Ext.Panel",
   "type": "Object/Ext.Button[]"
  },
  {
   "name": "buttonToolbar",
   "nameprimary": "buttonToolbar: Object/Ext.Toolbar - getButtonToolbar()/setButtonToolbar()",
   "text": "Configure the toolbar that holds the `{@link #cfg!buttons buttons}` inside.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Object/Ext.Toolbar",
   "value": "{\n    xtype: 'toolbar',\n    itemId: 'buttonToolbar',\n    docked: 'bottom',\n    defaultType: 'button',\n    weighted: true,\n    ui: 'footer',\n    defaultButtonUI: 'action',\n    layout: {\n        type: 'box',\n        vertical: false,\n        pack: 'center'\n    }\n}"
  },
  {
   "name": "cardSwitchAnimation",
   "nameprimary": "cardSwitchAnimation: String/Object/Boolean",
   "text": "Animation to be used during transitions of cards.\n",
   "from": "Ext.Container",
   "type": "String/Object/Boolean"
  },
  {
   "name": "centered",
   "nameprimary": "centered: Boolean - getCentered()/setCentered()",
   "text": "Configure this as `true` to have this Component centered within its Container.\nSetting this value to `true` will make this Component become 'positioned', which means\nit will no longer participate in the layout of the Container that it resides in.\n",
   "accessor": true,
   "from": "Ext.Component",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "closable",
   "nameprimary": "closable: Boolean - getClosable()/setClosable()",
   "text": "True to display the 'close' tool button and allow the user to close the panel\nor false to hide the button and disallow closing the window.\n\nBy default, when close is requested by clicking the close button in the\nheader, the {@link #method!close #method-close} method will be called. This will\n_{@link Ext.Component#method!destroy destroy}_ the Panel and its content\nmeaning that it may not be reused.\n\nTo make closing a Panel _hide_ the Panel so that it may be reused, set\n{@link #cfg!closeAction #closeAction} to 'hide'.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "closeAction",
   "nameprimary": "closeAction: String - getCloseAction()/setCloseAction()",
   "text": "The action to take when the close header tool is clicked:\n\n- **`'{@link #method!destroy #method-destroy}'`** :\n\n  {@link #method!remove remove} the window from the DOM and\n  {@link Ext.Component#method!destroy destroy} it and all descendant Components.\n  The window will **not** be available to be redisplayed via the\n  {@link #method!show #method-show} method.\n\n- **`'{@link #method!hide #method-hide}'`** :\n\n  {@link #method!hide #method-hide} the window by setting visibility to hidden and applying\n  negative offsets. The window will be available to be redisplayed via the\n  {@link #method!show #method-show} method.\n\n**Note:** This behavior has changed! setting *does* affect the {@link #method!close #method-close}\nmethod which will invoke the appropriate closeAction.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "String",
   "value": "'destroy'"
  },
  {
   "name": "closeToolText",
   "nameprimary": "closeToolText: String - getCloseToolText()/setCloseToolText()",
   "text": "Text to be announced by screen readers when the **close**\n{@link Ext.Tool} is focused.  Will also be set as the close tool's\n{@link Ext.Tool#cfg!tooltip tooltip} text.\n\n**Note:** Applicable when the panel is {@link #cfg!closable #closable}: true\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "String",
   "value": "'Close panel'"
  },
  {
   "name": "cls",
   "nameprimary": "cls: String/String[] - getCls()/setCls()",
   "text": "The CSS class to add to this widget's element, in\naddition to the {@link #property!baseCls #baseCls}. In many cases, this property will be specified\nby the derived widget class. See {@link #cfg!userCls #userCls} for adding additional CSS\nclasses to widget instances (such as items in a {@link Ext.Container}).\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "String/String[]",
   "value": "[\n    Ext.baseCSSPrefix + 'calendar-base',\n    Ext.baseCSSPrefix + 'unselectable'\n]"
  },
  {
   "name": "collapsed",
   "nameprimary": "collapsed: Boolean - getCollapsed()/setCollapsed()",
   "text": "`true` to start collapsed.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "collapsible",
   "nameprimary": "collapsible: 'top'/'right'/'bottom'/'left'/Boolean/Object - getCollapsible()/setCollapsible()",
   "text": "A configuration for a {@link Ext.panel.Collapser}.\n\nTrue to make the panel collapsible and have an expand/collapse toggle Tool added\ninto the header tool button area.\n\nYou can also set `{@link #cfg!top top}`/`{@link #cfg!right right}`/`{@link #cfg!bottom bottom}`/`{@link #cfg!left left}` to directly specify the collapse\ndirection.\n\n**IMPORTANT**: To use this config, the application must require the following\nclass:\n\n     requires: [\n         'Ext.panel.Collapser'\n     ]\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "'top'/'right'/'bottom'/'left'/Boolean/Object",
   "value": "null"
  },
  {
   "name": "compact",
   "nameprimary": "compact: Boolean - getCompact()/setCompact()",
   "text": "`true` to display this view in compact mode, typically used\nfor smaller form factors.  Setting to `true` applies any configured\n{@link #cfg!compactOptions #cfg-compactOptions}.\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "compactOptions",
   "nameprimary": "compactOptions: Object - getCompactOptions()/setCompactOptions()",
   "text": "A series of config options for this class to set when this class is in\n{@link #cfg!compact #cfg-compact} mode.\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Object",
   "value": "true"
  },
  {
   "name": "constrainAlign",
   "nameprimary": "constrainAlign: String/Ext.util.Region/Ext.dom.Element - getConstrainAlign()/setConstrainAlign()",
   "text": "A specification of the constraint to apply when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo}\nis called to align a {@link #cfg!floated #floated} or positioned component.\n\nDefaults to the parent container for *positioned* components (components\nwhich have their {@link #cfg!top}, {@link #cfg!right}, {@link #cfg!bottom} or\n{@link #cfg!left} set to move them out of their container's layout flow).\n\nDefaults to the viewport for {@link #cfg!floated #floated} components.\n\nMay be a {@link Ext.ComponentQuery} selector to find an ancestor\ncomponent to constrain within.\n\nMay be `false` to specify that constraining is not applied.\n\nYou may also specify an element, or a {@link Ext.util.Region}\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "String/Ext.util.Region/Ext.dom.Element",
   "value": "null"
  },
  {
   "name": "contentEl",
   "nameprimary": "contentEl: Ext.dom.Element/HTMLElement/String - getContentEl()/setContentEl()",
   "text": "The configured element will automatically be added as the content of this\ncomponent. When you pass a string, we expect it to be an element id. If the\ncontent element is hidden, we will automatically show it.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Ext.dom.Element/HTMLElement/String",
   "value": "null"
  },
  {
   "name": "control",
   "nameprimary": "control: Object - getControl()/setControl()",
   "text": "Enables you to easily control Components inside this Container by\nlistening to their events and taking some action. For example, if we had a container with\na nested Disable button, and we wanted to hide the Container when the Disable button is\ntapped, we could do this:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        control: {\n           'button[text=Disable]': {\n               tap: 'hideMe'\n           }\n        },\n\n        hideMe: function() {\n            this.hide();\n        }\n    });\n\nWe used a {@link Ext.ComponentQuery} selector to listen to the {@link Ext.Button#event!tap tap}\nevent on any {@link Ext.Button} anywhere inside the Container that has the\n{@link Ext.Button#cfg!text text} 'Disable'. Whenever a Component matching that selector\nfires the `tap` event our `hideMe` function is called. `hideMe` is called with scope:\n`this` (e.g. `this` is the Container instance).\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "Object",
   "value": "null"
  },
  {
   "name": "controller",
   "nameprimary": "controller: String/Object/Ext.app.ViewController - getController()/setController()",
   "text": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n",
   "accessor": true,
   "from": "Ext.mixin.Bindable",
   "type": "String/Object/Ext.app.ViewController",
   "value": "null"
  },
  {
   "name": "controlStoreRange",
   "nameprimary": "controlStoreRange: Boolean - getControlStoreRange()/setControlStoreRange()",
   "text": "`true` to allow this view to set the date range on event stores\nin reaction to the value changing. The need to disable this surfaces\nwhen using multiple views together and allowing one view (the one with\nthe largest range) to be the in control of loading the stores.\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "data",
   "nameprimary": "data: Object - getData()/setData()",
   "text": "The initial set of data to apply to the `{@link #cfg!tpl #tpl}` to\nupdate the content area of the Component.\n\n**Note:** Data will be appended to any existing data.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Object",
   "value": "null"
  },
  {
   "name": "dayFormat",
   "nameprimary": "dayFormat: Boolean",
   "text": "`true` to show the {@link #cfg!addForm #addForm} when a selection is made on the body.\n\nUse {@link #cfg!addOnSelect #addOnSelect} to control view selection itself.\n",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "dayHeader",
   "nameprimary": "dayHeader: Object - getDayHeader()/setDayHeader()",
   "text": "A config for the {@link Ext.calendar.header.Base}. This can be\nconfigured directly on the panel.  The relevant configurations will be\nforwarded to the header.\n",
   "accessor": true,
   "type": "Object",
   "value": "{\n    xtype: 'calendar-weeksheader'\n}"
  },
  {
   "name": "dayHeaderFormat",
   "nameprimary": "dayHeaderFormat: String",
   "text": "The format to display the day in the header.\n",
   "type": "String",
   "value": "'format'"
  },
  {
   "name": "defaultFocus",
   "nameprimary": "defaultFocus: String - getDefaultFocus()/setDefaultFocus()",
   "text": "\nSpecifies a child Component to receive focus when this Container's {@link #method!focus #method-focus}\nmethod is called. Should be a valid {@link Ext.ComponentQuery} selector.\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "String",
   "value": "null"
  },
  {
   "name": "defaultListenerScope",
   "nameprimary": "defaultListenerScope: Boolean - getDefaultListenerScope()/setDefaultListenerScope()",
   "text": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n",
   "accessor": true,
   "from": "Ext.mixin.Bindable",
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "defaults",
   "nameprimary": "defaults: Object - getDefaults()/setDefaults()",
   "text": "A set of default configurations to apply to all child Components\nin this Container. It's often useful to specify defaults when creating more than one\nitems with similar configurations. For example here we can specify that each child is a\npanel and avoid repeating the xtype declaration for each one:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        defaults: {\n            xtype: 'panel'\n        },\n        items: [\n            {\n                html: 'Panel 1'\n            },\n            {\n                html: 'Panel 2'\n            }\n        ]\n    });\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "Object",
   "value": "null"
  },
  {
   "name": "defaultToolWeights",
   "nameprimary": "defaultToolWeights: Object - getDefaultToolWeights()/setDefaultToolWeights()",
   "text": "The default `weight` for tools in the `header`.\n",
   "accessor": true,
   "from": "Ext.mixin.Toolable",
   "type": "Object",
   "value": "{\n    toggle: 10,\n    gear: 20,\n    prev: 30,\n    next: 40,\n    left: 50,\n    right: 60,\n    down: 70,\n    up: 80,\n    refresh: 90,\n    disclosure: 100,\n    // was originally defined in ListItem\n    plus: 100,\n    minus: 110,\n    search: 120,\n    edit: 125,\n    save: 130,\n    print: 140,\n    expand: 150,\n    collapse: 160,\n    help: 170,\n    pin: 180,\n    unpin: 190,\n    minimize: 200,\n    maximize: 210,\n    restore: 220,\n    close: 230,\n    trash: 240\n}"
  },
  {
   "name": "defaultType",
   "nameprimary": "defaultType: String - getDefaultType()/setDefaultType()",
   "text": "The default {@link Ext.Component} of child Components to create in this Container\nwhen a child item is specified as a raw configuration object, rather than as an\ninstantiated Component.\n",
   "accessor": true,
   "from": "Ext.Container",
   "optional": true,
   "type": "String",
   "value": "container"
  },
  {
   "name": "disabled",
   "nameprimary": "disabled: Boolean - getDisabled()/setDisabled()",
   "text": "Whether or not this component is disabled\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "displayed",
   "nameprimary": "displayed: Boolean - getDisplayed()/setDisplayed()",
   "text": "Set to `true` to call `show` and `false` to call `hide`. Unlike the `{@link #cfg!hidden hidden}`\nconfig, changing this config will potentially involve animations to show or\nhide the component.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "docked",
   "nameprimary": "docked: String - getDocked()/setDocked()",
   "text": "The dock position of this component in its container. Can be `{@link #cfg!left left}`, `{@link #cfg!top top}`, `{@link #cfg!right right}` or\n`{@link #cfg!bottom bottom}`.\n\n__Notes__\n\nYou must use a HTML5 doctype for {@link #cfg!docked #docked} `{@link #cfg!bottom bottom}` to work. To do this, simply\nadd the following code to the HTML file:\n\n    <!doctype html>\n\nSo your index.html file should look a little like this:\n\n    <!doctype html>\n    <html>\n        <head>\n            <title>MY application title</title>\n            ...\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "String",
   "value": "null"
  },
  {
   "name": "draggable",
   "nameprimary": "draggable: Boolean - getDraggable()/setDraggable()",
   "text": "`true` to show the {@link #cfg!addForm #addForm} when a selection is made on the body.\n\nUse {@link #cfg!addOnSelect #addOnSelect} to control view selection itself.\n",
   "accessor": true,
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "droppable",
   "nameprimary": "droppable: Boolean",
   "text": "`true` to show the {@link #cfg!addForm #addForm} when a selection is made on the body.\n\nUse {@link #cfg!addOnSelect #addOnSelect} to control view selection itself.\n",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "editForm",
   "nameprimary": "editForm: Object - getEditForm()/setEditForm()",
   "text": "The configuration for the {@link Ext.calendar.form.Edit} to be used\nwhen an event is to be modified. Use `null` to disable editing.\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Object",
   "value": "true"
  },
  {},
  {
   "name": "eventDefaults",
   "nameprimary": "eventDefaults: Object - getEventDefaults()/setEventDefaults()",
   "text": "The default configuration for {@link Ext.calendar.Event} widgets\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Object",
   "value": "true"
  },
  {},
  {
   "name": "eventRelayers",
   "nameprimary": "eventRelayers: Object - getEventRelayers()/setEventRelayers()",
   "text": "A list of events to relay from the underlying view.\n",
   "accessor": true,
   "type": "Object",
   "value": "{\n    view: {\n        /**\n                 * @event beforeeventdragstart\n                 * @inheritdoc Ext.calendar.view.Weeks#beforeeventdragstart\n                 */\n        beforeeventdragstart: true,\n        /**\n                 * @event validateeventdrop\n                 * @inheritdoc Ext.calendar.view.Weeks#validateeventdrop\n                 */\n        validateeventdrop: true,\n        /**\n                 * @event eventdrop\n                 * @inheritdoc Ext.calendar.view.Weeks#eventdrop\n                 */\n        eventdrop: true\n    }\n}"
  },
  {},
  {
   "name": "firstDayOfWeek",
   "nameprimary": "firstDayOfWeek: Boolean",
   "text": "`true` to show the {@link #cfg!addForm #addForm} when a selection is made on the body.\n\nUse {@link #cfg!addOnSelect #addOnSelect} to control view selection itself.\n",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "flex",
   "nameprimary": "flex: Number/String/Object - getFlex()/setFlex()",
   "text": "The flex of this item *if* this item item is inside a {@link Ext.layout.HBox}\nor {@link Ext.layout.VBox} layout.\n\nYou can also update the flex of a component dynamically using\nthe {@link Ext.layout.FlexBox#setItemFlex} method.\n\nWhen supplied as a string or number this option supports the same syntax\nas CSS [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex).\nFor example:\n\n    flex: '1 2 auto'\n\nsets `flex-grow` property to `0`, `flex-shrink` to `2` and `flex-basis` to\n`'auto'`.\n\nThe default `flex-shrink` value for box layout items is set to `0` in the\nstylesheet, which is different from the browser's default `flex-shrink` value\nof `1`.  This accommodates the majority use case for applications since where\nnon-flexed components are typically not expected to shrink smaller than their\ndefault size.\n\nFor convenience when only a single number is supplied it is used as the value\nfor both `flex-grow` and `flex-shrink`, for example `flex: 3` is the same as\n`flex: '3 3'`\n\nAn object form is also accepted:\n\n    flex: {\n        grow: 1,\n        shrink: 2,\n        basis: 'auto'\n    }\n\nWhen the object form is supplied `shrink` always defaults to `0` regardless\nof the value of `grow`.\n\nAlthough `'auto'` is the default value for flex-basis, flex-basis defaults to 0%\nwhen flex is supplied as a single numeric or string value (e.g. `flex: 1`). If\nthis behavior is not desired either explicitly set flex-basis to `'auto'` or use\nthe object form to set only grow and/or shrink:\n\n    flex: {\n        grow: 2\n    }\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "Number/String/Object",
   "value": "null"
  },
  {
   "name": "floated",
   "nameprimary": "floated: Boolean - getFloated()/setFloated()",
   "text": "A Component may be floated above all other components in the application. This means that\nthe component is absolutely positioned, and will move to the front and occlude other\nsibling floated component if clicked.\n\nA Floated component may have floated descendants. It will bring these decendants to the\nfront with it when brought to the front of its sibling floated components.\n\nBy default, descendant floated components are all positioned using the viewport\ncoordinate system. To make a floating component a positioning parent for descendants,\nand have the ancestors positioned relatively, configure the parent floated component\nwith `{@link #cfg!relative #cfg-relative}: true`.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "focusableContainer",
   "nameprimary": "focusableContainer: Boolean",
   "text": "Enable or disable navigation\nwith arrow keys for this FocusableContainer. This option may be useful\nwith nested FocusableContainers, when only the root container should\nhandle keyboard events.\n",
   "from": "Ext.mixin.FocusableContainer",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "focusCls",
   "nameprimary": "focusCls: String",
   "text": "CSS class that will be added to focused\ncomponent's {@link #property!focusClsEl #focusClsEl}, and removed when component blurs.\n",
   "from": "Ext.mixin.Focusable",
   "optional": true,
   "type": "String",
   "value": "'x-focused'"
  },
  {
   "name": "fullscreen",
   "nameprimary": "fullscreen: Boolean",
   "text": "Force the component to take up 100% width and height available, by adding it\nto {@link Ext.Viewport}.\n",
   "from": "Ext.Component",
   "type": "Boolean"
  },
  {
   "name": "gestureNavigation",
   "nameprimary": "gestureNavigation: Boolean - getGestureNavigation()/setGestureNavigation()",
   "text": "Allow the view to have the value (displayed date range) changed via swipe\nnavigation on devices that support it\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "header",
   "nameprimary": "header: Boolean/Object - getHeader()/setHeader()",
   "text": "Pass as `false` to prevent a header from being created.\n\nYou may also assign a header with a config object (optionally containing an\n`{@link #cfg!xtype xtype}`) to custom-configure your panel's header.\n\nSee {@link Ext.panel.Header} for all the options that may be specified here.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Boolean/Object",
   "value": "null"
  },
  {
   "name": "headerPosition",
   "nameprimary": "headerPosition: 'top'/'right'/'bottom'/'left' - getHeaderPosition()/setHeaderPosition()",
   "text": "The position of the header. Ignored if no {@link #cfg!header #cfg-header} is created.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "'top'/'right'/'bottom'/'left'",
   "value": "'top'"
  },
  {
   "name": "height",
   "nameprimary": "height: Number/String - getHeight()/setHeight()",
   "text": "The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "hidden",
   "nameprimary": "hidden: Boolean - getHidden()/setHidden()",
   "text": "Whether or not this Component is hidden (its CSS `display` property is set to `none`).\n\nDefaults to `true` for {@link #cfg!floated #floated} Components.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "hideAnimation",
   "nameprimary": "hideAnimation: String/Mixed - getHideAnimation()/setHideAnimation()",
   "text": "Animation effect to apply when the Component is being hidden.  Typically you want to use\nan outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check\nthe {@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "String/Mixed",
   "value": "null"
  },
  {
   "name": "hideMode",
   "nameprimary": "hideMode: 'clip'/'display'/'offsets'/'opacity'/'visibility' - getHideMode()/setHideMode()",
   "text": "A String which specifies how this component's DOM element will be hidden. The\naccepted values are any of these:\n\n- `'clip'` : Hide using {@link Ext.dom.Element#static-property!CLIP clip}.\n- `'display'` : Hide using {@link Ext.dom.Element#static-property!DISPLAY display}.\n- `'offsets'` : Hide using positioning {@link Ext.dom.Element#static-property!OFFSETS offsets}.\n- `'opacity'` : Hide using {@link Ext.dom.Element#static-property!OPACITY opacity}.\n- `'visibility'` : Hide using {@link Ext.dom.Element#static-property!VISIBILITY visibility}.\n\nHiding using ``display`` results in having no dimensions as well as resetting\nscroll positions to 0.\n\nThe other modes overcome this but may have different trade-offs in certain\ncircumstances.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "'clip'/'display'/'offsets'/'opacity'/'visibility'",
   "value": "'display'"
  },
  {
   "name": "hideOnMaskTap",
   "nameprimary": "hideOnMaskTap: Boolean - getHideOnMaskTap()/setHideOnMaskTap()",
   "text": "When using a {@link #cfg!modal} Component, setting this to `true` will hide\nthe modal mask and the Container when the mask is tapped on.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "highlightToday",
   "nameprimary": "highlightToday: undefined",
   "value": "true"
  },
  {
   "name": "html",
   "nameprimary": "html: String/Ext.dom.Element/HTMLElement - getHtml()/setHtml()",
   "text": "Optional HTML content to render inside this Component, or a reference to an\nexisting element on the page.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "String/Ext.dom.Element/HTMLElement",
   "value": "null"
  },
  {
   "name": "icon",
   "nameprimary": "icon: String - getIcon()/setIcon()",
   "text": "Path to an image to use as an icon.\n\nFor instructions on how you can use icon fonts including those distributed in\nthe SDK see {@link #cfg!iconCls #iconCls}.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "String",
   "value": "null"
  },
  {
   "name": "iconAlign",
   "nameprimary": "iconAlign: 'top'/'right'/'bottom'/'left' - getIconAlign()/setIconAlign()",
   "text": "The side of the title to render the icon.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "optional": true,
   "type": "'top'/'right'/'bottom'/'left'",
   "value": "'left'"
  },
  {
   "name": "iconCls",
   "nameprimary": "iconCls: String - getIconCls()/setIconCls()",
   "text": "One or more space separated CSS classes to be applied to the icon element.\nThe CSS rule(s) applied should specify a background image to be used as the\nicon.\n\nAn example of specifying a custom icon class would be something like:\n\n    // specify the property in the config for the class:\n    iconCls: 'my-home-icon'\n\n    // css rule specifying the background image to be used as the icon image:\n    .my-home-icon {\n        background-image: url(../images/my-home-icon.gif) !important;\n    }\n\nIn addition to specifying your own classes, you can use the font icons\nprovided in the SDK using the following syntax:\n\n    // using Font Awesome\n    iconCls: 'x-fa fa-home'\n\n    // using Pictos\n    iconCls: 'pictos pictos-home'\n\nDepending on the theme you're using, you may need include the font icon\npackages in your application in order to use the icons included in the\nSDK.  For more information see:\n\n - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)\n - [Pictos icons](../guides/core_concepts/font_ext.html)\n - [Theming Guide](../guides/core_concepts/theming.html)\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "String",
   "value": "null"
  },
  {
   "name": "id",
   "nameprimary": "id: String",
   "text": "The **unique id of this component instance.**\n\nIt should not be necessary to use this configuration except for singleton objects in\nyour application. Components created with an id may be accessed globally\nusing {@link Ext#method!getCmp Ext.getCmp}.\n\nInstead of using assigned ids, use the {@link #cfg!itemId #itemId} config,\nand {@link Ext.ComponentQuery} which provides selector-based searching\nfor Sencha Components analogous to DOM querying. The {@link Ext.Container} class\ncontains {@link Ext.Container#method!down shortcut methods} to query its descendant Components\nby selector.\n\nNote that this id will also be used as the element id for the containing HTML element\nthat is rendered to the page for this component. This allows you to write id-based CSS\nrules to style the specific instance of this component uniquely, and also to select\nsub-elements using this component's id as the parent.\n\n**Note**: to avoid complications imposed by a unique id also see `{@link #cfg!itemId #itemId}`.\n\nDefaults to an auto-assigned id.\n",
   "accessor": "r",
   "from": "Ext.Widget",
   "type": "String"
  },
  {
   "name": "inactiveChildTabIndex",
   "nameprimary": "inactiveChildTabIndex: Number",
   "text": "DOM tabIndex attribute to set on\ninactive Focusable children of this container when using the \"Roaming tabindex\"\ntechnique. This value rarely needs to be changed from its default.\n",
   "from": "Ext.mixin.FocusableContainer",
   "optional": true,
   "type": "Number",
   "value": "-1"
  },
  {
   "name": "innerCls",
   "nameprimary": "innerCls: String - getInnerCls()/setInnerCls()",
   "text": "A string to add to the immediate parent element of the inner items of this\ncontainer. That is, items that are not `{@link #cfg!docked docked}`, `{@link #property!positioned positioned}` or `{@link #cfg!floated floated}`. In\nsome containers, `{@link #property!positioned positioned}` items may be in this same element.\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "String",
   "value": "null"
  },
  {
   "name": "instanceCls",
   "nameprimary": "instanceCls: String/String[] - getInstanceCls()/setInstanceCls()",
   "text": "\nAn extra CSS class or classes to augment the {@link #property!classCls #classCls} on an individual instance\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "String/String[]",
   "value": "null"
  },
  {
   "name": "itemId",
   "nameprimary": "itemId: String - getItemId()/setItemId()",
   "text": "An itemId can be used as an alternative way to get a reference to a component when no\nobject reference is available. Instead of using an `{@link #cfg!id #id}` with {@link Ext#method!getCmp Ext#getCmp},\nuse `{@link #cfg!itemId itemId}` with {@link Ext.Container#method!getComponent Ext.Container#getComponent} which will retrieve `{@link #cfg!itemId itemId}`'s or\n{@link #cfg!id #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's internal MixedCollection,\nthe `{@link #cfg!itemId itemId}` is scoped locally to the container - avoiding potential conflicts with\n{@link Ext.ComponentManager} which requires a **unique** `{@link #cfg!id #id}`.\n\nAlso see {@link #cfg!id #id}, {@link Ext.Container#method!query Ext.Container#query}, {@link Ext.Container#method!down Ext.Container#down} and\n{@link Ext.Container#method!child Ext.Container#child}.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "String",
   "value": "undefined"
  },
  {
   "name": "items",
   "nameprimary": "items: Array/Object - getItems()/setItems()",
   "text": "The child items to add to this Container. This is usually an\narray of Component configurations or instances, for example:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        items: [{\n            xtype: 'panel',\n            html: 'This is an item'\n        }]\n    });\n\nThis may also be specified as an object, the property names of which are `{@link #cfg!itemId itemId}`s, and\nthe property values are child Component config objects, for example:\n\n    @example\n    Ext.create({\n        xtype: 'tabpanel',\n        items: {\n            panel1: {\n                xtype: 'panel',\n                title: 'First panel'\n            },\n            panel2: {\n                xtype: 'panel',\n                title: 'Second panel'\n            }\n        }\n    });\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "Array/Object",
   "value": "null"
  },
  {
   "name": "keyMap",
   "nameprimary": "keyMap: Object - getKeyMap()/setKeyMap()",
   "text": "An object containing handlers for keyboard events. The property names of this\nobject are the key name and any modifiers. The values of the properties are the\ndescriptors of how to handle each event.\n\nThe handler descriptor can be simply the handler function(either the\nliteral function or the method name), or it can be an object with these\nproperties:\n\n - `handler`: The function or its name to call to handle the event.\n - `scope`: The this pointer context (can be \"this\" or \"controller\").\n - `event`: An optional override of the key event to which to listen.\n\n**Important:** Calls to `setKeyMap` do not replace the entire `{@link #cfg!keyMap keyMap}` but\ninstead update the provided mappings. That is, unless `null` is passed as the\nvalue of the `{@link #cfg!keyMap keyMap}` which will clear the `{@link #cfg!keyMap keyMap}` of all entries.\n",
   "accessor": true,
   "from": "Ext.mixin.Keyboard",
   "type": "Object",
   "value": "null"
  },
  {
   "name": "keyMapEnabled",
   "nameprimary": "keyMapEnabled: Boolean - getKeyMapEnabled()/setKeyMapEnabled()",
   "text": "Enables or disables processing keys in the `{@link #cfg!keyMap keyMap}`. This value starts as\n`null` and if it is `null` when `{@link #method!initKeyMap initKeyMap}` is called, it will automatically\nbe set to `true`. Since `{@link #method!initKeyMap initKeyMap}` is called by `{@link Ext.Component}` at the\nproper time, this is not something application code normally handles.\n",
   "accessor": true,
   "from": "Ext.mixin.Keyboard",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "keyMapTarget",
   "nameprimary": "keyMapTarget: String",
   "text": "The name of the member that should be used to listen for keydown/keypress events.\nThis is intended to be controlled at the class level not per instance.\n",
   "from": "Ext.mixin.Keyboard",
   "type": "String",
   "value": "'el'"
  },
  {
   "name": "layout",
   "nameprimary": "layout: Object/String - getLayout()/setLayout()",
   "text": "Configuration for this Container's layout. Example:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        layout: {\n            type: 'hbox',\n            align: 'middle'\n        },\n        items: [{\n            xtype: 'panel',\n            flex: 1,\n            bodyStyle: {\n                background: \"#000\",\n                color:\"#fff\"\n            }\n        }, {\n           xtype: 'panel',\n           flex: 2,\n           bodyStyle: {\n               background: \"#f00\",\n               color:\"#fff\"\n           }\n        }]\n    });\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "Object/String",
   "value": "'auto'"
  },
  {
   "name": "lbar",
   "nameprimary": "lbar: Object/Object[] - getLbar()/setLbar()",
   "text": "Convenience config. Short for 'Left Bar' (left-docked, vertical toolbar).\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        html: 'hello world',\n        padding: 20,\n        lbar: [{\n            xtype: 'button',\n            text : 'Button 1'\n        }]\n    });\n```\n\nis equivalent to\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        html: 'hello world',\n        padding: 20,\n        items: [{\n            xtype: 'toolbar',\n            docked: 'left',\n            items: [{\n                xtype: 'button',\n                text: 'Button 1'\n            }]\n        }]\n    });\n```\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Object/Object[]",
   "value": "null"
  },
  {
   "name": "left",
   "nameprimary": "left: Number/String - getLeft()/setLeft()",
   "text": "The absolute left position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "listeners",
   "nameprimary": "listeners: Object",
   "text": "\nA config object containing one or more event handlers to be added to this object during\ninitialization. This should be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\",\n\"mouseover\" etc), this is usually only done when extra value can be added. For example\nthe {@link Ext.view.View DataView}'s **`{@link Ext.view.View#itemclick itemclick}`**\nevent passing the node clicked on. To access DOM events directly from a child element\nof a Component, we need to specify the `element` option to identify the Component\nproperty to add a DOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
   "accessor": "w",
   "from": "Ext.mixin.Observable",
   "type": "Object"
  },
  {
   "name": "manageBorders",
   "nameprimary": "manageBorders: Boolean",
   "text": "`true` to enable border management of docked items.  When enabled, borders of docked\nitems will collapse where they meet to avoid duplicated borders.\n",
   "from": "Ext.Panel",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "margin",
   "nameprimary": "margin: Number/String - getMargin()/setMargin()",
   "text": "The margin to use on this Component. Can be specified as a number (in which\ncase all edges get the same margin) or a CSS string like '5 10 10 10'\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "masked",
   "nameprimary": "masked: Boolean/String/Object/Ext.Mask/Ext.LoadMask - getMasked()/setMasked()",
   "text": "A configuration to allow you to mask this container.\n\nIf the value is a string, it will be used as the message config for an\n{@link Ext.LoadMask}.\n\nFor more precise control over the mask, you can optionally pass an object block with\nand xtype of `loadmask`, and an optional `message` value to display a loading mask.\nPlease refer to the {@link Ext.LoadMask} component to see other configurations.\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        fullscreen: true,\n        html: 'Hello World',\n        masked: {\n            xtype: 'loadmask',\n            message: 'My Message'\n        }\n    });\n\nAlternatively, you can just call the setter at any time with `true`/`false` to show/hide\nthe mask:\n\n    setMasked(true); //show the mask\n    setMasked(false); //hides the mask\n\nThere are also two convenient methods, {@link #method!mask #method-mask} and {@link #method!unmask #unmask}, to allow\nyou to mask and unmask this container at any time.\n\nRemember, the {@link Ext.Viewport} is always a container, so if you want to mask your\nwhole application at anytime, can call:\n\n    Ext.Viewport.setMasked({\n        xtype: 'loadmask',\n        message: 'Hello'\n    });\n",
   "accessor": true,
   "from": "Ext.Container",
   "type": "Boolean/String/Object/Ext.Mask/Ext.LoadMask",
   "value": "null"
  },
  {
   "name": "maxHeight",
   "nameprimary": "maxHeight: Number/String - getMaxHeight()/setMaxHeight()",
   "text": "The maximum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "maxWidth",
   "nameprimary": "maxWidth: Number/String - getMaxWidth()/setMaxWidth()",
   "text": "The maximum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "minButtonWidth",
   "nameprimary": "minButtonWidth: Number - getMinButtonWidth()/setMinButtonWidth()",
   "text": "Minimum width of all {@link #cfg!buttonToolbar buttonToolbar} buttons in\npixels. If set, this will be used as the default value for the\n{@link Ext.Button#cfg!minWidth Ext.Button#minWidth} config of each {@link Ext.Button} added to\nthe `buttonToolbar via the {@link #cfg!buttons buttons} toolbar.\n\nIt will be ignored for buttons that have a `minWidth` configured some other\nway, e.g. in their own config object or via the\n{@link Ext.Container#cfg!defaults defaults} of their parent container.\n",
   "accessor": true,
   "from": "Ext.panel.Buttons",
   "type": "Number",
   "value": "75"
  },
  {
   "name": "minHeight",
   "nameprimary": "minHeight: Number/String - getMinHeight()/setMinHeight()",
   "text": "The minimum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "minWidth",
   "nameprimary": "minWidth: Number/String - getMinWidth()/setMinWidth()",
   "text": "The minimum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "modal",
   "nameprimary": "modal: Boolean - getModal()/setModal()",
   "text": "`true` to make this Component modal. This will create a mask underneath the\nComponent that covers its parent and does not allow the user to interact with\nany other Components until this Component is dismissed.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "modelValidation",
   "nameprimary": "modelValidation: Boolean",
   "text": "This config enables binding to your `{@link Ext.data.Model#cfg!validators Ext.data.Model#validators}`. This\nis only processed by form fields (e.g., `Ext.field.*`) at present, however, this\nsetting is inherited and so can be set on a parent container.\n\nWhen set to `true` by a component (or by an ancestor container), the `validators`\nof for any {@Ext.data.Model record} fields will be used wherever the `value` is\nbound to such data fields.\n\nWhile this config can be set arbitrarily high in the component hierarchy, doing\nso can create a lot overhead if most of your form fields do not actually rely on\n`validators` in your data model.\n\nUsing this setting for a form that is bound to an `{@link Ext.data.Model}` might look\nlike this:\n\n     {\n         xtype: 'panel',\n         modelValidation: true,\n         items: [{\n             xtype: 'textfield',\n             bind: '{theUser.firstName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.lastName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.phoneNumber}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.email}'\n         }]\n     }\n",
   "from": "Ext.Component",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "name",
   "nameprimary": "name: String",
   "text": "Name for the widget to be used with {@link Ext.Container#method!lookupName Ext.Container#lookupName}\net al.\n",
   "from": "Ext.Widget",
   "type": "String",
   "value": "null"
  },
  {
   "name": "nameable",
   "nameprimary": "nameable: Boolean",
   "text": "Set to `true` for this component's `name` property to be tracked by its containing\n`nameHolder`.\n",
   "from": "Ext.mixin.Bindable",
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "nameHolder",
   "nameprimary": "nameHolder: Boolean",
   "text": "When `true` child components are tracked by their `name` property and can be\nretrieved using the `{@link #method!lookupName lookupName}` method.\n",
   "from": "Ext.mixin.Container",
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "overflowText",
   "nameprimary": "overflowText: Boolean",
   "text": "`true` to show the {@link #cfg!addForm #addForm} when a selection is made on the body.\n\nUse {@link #cfg!addOnSelect #addOnSelect} to control view selection itself.\n",
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "padding",
   "nameprimary": "padding: Number/String - getPadding()/setPadding()",
   "text": "The padding to use on this Component. Can be specified as a number (in which\ncase all edges get the same padding) or a CSS string like '5 10 10 10'\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "plugins",
   "nameprimary": "plugins: Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract - getPlugins()/setPlugins()",
   "text": "This config describes one or more plugin config objects used to create plugin\ninstances for this component.\n\nPlugins are a way to bundle and reuse custom functionality. Plugins should extend\n`{@link Ext.plugin.Abstract}` but technically the only requirement for a valid plugin\nis that it contain an `init` method that accepts a reference to its owner. Once\na plugin is created, the owner will call the `init` method, passing a reference\nto itself. Each plugin can then call methods or respond to events on its owner\nas needed to provide its functionality.\n\nThis config's value can take several different forms.\n\nThe value can be a single string with the plugin's {@link Ext.enums.Plugin alias}:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: 'listpaging'\n     });\n\nIn the above examples, the string \"listpaging\" is the type alias for\n`{@link Ext.dataview.plugin.ListPaging}`. The full alias includes the \"plugin.\" prefix\n(i.e., 'plugin.listpaging').\n\nThe preferred form for multiple plugins or to configure plugins is the\nkeyed-object form (new in version 6.5):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: {\n             pullrefresh: true,\n             listpaging: {\n                 autoPaging: true,\n                 weight: 10\n             }\n         }\n     });\n\nThe object keys are the `id`'s as well as the default type alias. This form\nallows the value of the `{@link #cfg!plugins plugins}` to be merged from base class to derived class\nand finally with the instance configuration. This allows classes to define a\nset of plugins that derived classes or instantiators can further configure or\ndisable. This merge behavior is a feature of the\n{@link Ext.Class#cfg!config}.\n\nThe `{@link #cfg!plugins plugins}` config can also be an array of plugin aliases (arrays are not\nmerged so this form does not respect plugins defined by the class author):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['listpaging', 'pullrefresh']\n     });\n\nAn array can also contain elements that are config objects with a `type`\nproperty holding the type alias:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['pullrefresh', {\n             type: 'listpaging',\n             autoPaging: true\n         }]\n     });\n",
   "accessor": true,
   "from": "Ext.mixin.Pluggable",
   "type": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
   "value": "null"
  },
  {
   "name": "publishes",
   "nameprimary": "publishes: String/String[]/Object - getPublishes()/setPublishes()",
   "text": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found\nin a class  config block. In these situations, you may utilize {@link #method!publishState #publishState}\nif the property has a  setter method. Let's use\n{@link Ext.form.Labelable#setFieldLabel setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n",
   "accessor": true,
   "from": "Ext.mixin.Bindable",
   "type": "String/String[]/Object",
   "value": "null"
  },
  {
   "name": "rbar",
   "nameprimary": "rbar: Object/Object[] - getRbar()/setRbar()",
   "text": "Convenience config. Short for 'Right Bar' (right-docked, vertical toolbar).\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        html: 'hello world',\n        padding: 20,\n        rbar: [{\n            xtype: 'button',\n            text : 'Button 1'\n        }]\n    });\n```\n\nis equivalent to\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        html: 'hello world',\n        padding: 20,\n        items: [{\n            xtype: 'toolbar',\n            docked: 'right',\n            items: [{\n                xtype: 'button',\n                text: 'Button 1'\n            }]\n        }]\n    });\n```\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Object/Object[]",
   "value": "null"
  },
  {
   "name": "record",
   "nameprimary": "record: Ext.data.Model - getRecord()/setRecord()",
   "text": "A model instance which updates the Component's html based on it's tpl. Similar\nto the data configuration, but tied to to a record to make allow dynamic\nupdates.  This must be a model instance and not a configuration of one.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Ext.data.Model",
   "value": "null"
  },
  {
   "name": "reference",
   "nameprimary": "reference: String",
   "text": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.Container#cfg!referenceHolder view}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.Container Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n",
   "from": "Ext.mixin.Bindable",
   "type": "String",
   "value": "null"
  },
  {
   "name": "referenceHolder",
   "nameprimary": "referenceHolder: Boolean",
   "text": "If `true`, this container will be marked as being a point in the hierarchy where\nreferences to items with a specified `reference` config will be held. The container\nwill automatically become a referenceHolder if a {@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for more information\nabout references & reference holders.\n",
   "from": "Ext.mixin.Container",
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "relative",
   "nameprimary": "relative: Boolean - getRelative()/setRelative()",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure this as `true` if you require descendant floated components to be positioned\nrelative to this component's coordinate space, not the viewport's coordinate space.\n\n*Note:* The coordinate space is this Component's encapsulating element's area. Not that\nof the inner element in which static child items are rendered by the layout.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "renderTo",
   "nameprimary": "renderTo: Ext.dom.Element - getRenderTo()/setRenderTo()",
   "text": "Optional element to render this Component to.\nNot required if this component is an {@link Ext.Container#cfg!items item} of a Container\nof a Container.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Ext.dom.Element",
   "value": "null"
  },
  {
   "name": "resetFocusPosition",
   "nameprimary": "resetFocusPosition: Boolean",
   "text": "When `true`, FocusableContainer\nwill reset last focused position whenever focus leaves the container.\nSubsequent tabbing into the container will always focus the first eligible\nchild item.\n\nWhen `false`, subsequent tabbing into the container will focus the child\nitem that was last focused before.\n",
   "from": "Ext.mixin.FocusableContainer",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "resizable",
   "nameprimary": "resizable: Object - getResizable()/setResizable()",
   "text": "A configuration for a {@link Ext.panel.Resizer}.\n\n**IMPORTANT**: To use this config, the application must require the following\nclass:\n\n     requires: [\n         'Ext.panel.Resizer'\n     ]\n",
   "accessor": true,
   "from": "Ext.Panel",
   "optional": true,
   "type": "Object",
   "value": "null"
  },
  {
   "name": "right",
   "nameprimary": "right: Number/String - getRight()/setRight()",
   "text": "The absolute right position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "ripple",
   "nameprimary": "ripple: Boolean/Object/String - getRipple()/setRipple()",
   "text": "Set to truthy, Color or Object value for the ripple.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "Boolean/Object/String",
   "value": "null"
  },
  {
   "name": "scrollable",
   "nameprimary": "scrollable: Boolean/String/Object - getScrollable()/setScrollable()",
   "text": "Configuration options to make this Component scrollable. Acceptable values are:\n\n- `true` to enable auto scrolling.\n- `false` (or `null`) to disable scrolling - this is the default.\n- `{@link #cfg!x x}` or `horizontal` to enable horizontal scrolling only\n- `{@link #cfg!y y}` or `vertical` to enable vertical scrolling only\n\nAlso accepts a configuration object for a `{@link Ext.scroll.Scroller}` if\nif advanced configuration is needed.\n\nThe getter for this config returns the {@link Ext.scroll.Scroller}\ninstance.  You can use the Scroller API to read or manipulate the scroll position:\n\n    // scrolls the component to 5 on the x axis and 10 on the y axis\n    component.getScrollable().scrollTo(5, 10);\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Boolean/String/Object",
   "value": "null"
  },
  {
   "name": "session",
   "nameprimary": "session: Boolean/Object/Ext.data.Session - getSession()/setSession()",
   "text": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n",
   "accessor": true,
   "from": "Ext.mixin.Bindable",
   "optional": true,
   "type": "Boolean/Object/Ext.data.Session",
   "value": "null"
  },
  {
   "name": "shadow",
   "nameprimary": "shadow: Boolean - getShadow()/setShadow()",
   "text": "Configure as `true` for the component to have a drop shadow. 'false' will suppress any\ndefault shadow. By default the theme will determine the presence of a shadow.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "shareableName",
   "nameprimary": "shareableName: Boolean",
   "text": "Set to `true` to allow this component's `name` to be shared by other items in the\nsame `nameHolder`. Such items will be returned in an array from `lookupName`.\n",
   "from": "Ext.mixin.Bindable",
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "shim",
   "nameprimary": "shim: Boolean - getShim()/setShim()",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure as `true` for the component to use an `<iframe>` as an underlay to ensure\ncertain non-standard browser plugins are occluded by this component.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "showAnimation",
   "nameprimary": "showAnimation: String/Mixed - getShowAnimation()/setShowAnimation()",
   "text": "Animation effect to apply when the Component is being shown.  Typically you want to use\nan inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the\n{@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "String/Mixed",
   "value": "null"
  },
  {
   "name": "showOverflow",
   "nameprimary": "showOverflow: String",
   "text": "Show an overflow label that will display an overlay when\nthere are too many events to render in the view. Valid\nconfigurations are:\n- `{@link #cfg!top top}`\n- `{@link #cfg!bottom bottom}`\n\nPass `null` or `''` to not show overflow.\nThe overflow text may be formatted using {@link #cfg!overflowText #overflowText}.\n",
   "type": "String",
   "value": "true"
  },
  {
   "name": "standardButtons",
   "nameprimary": "standardButtons: Object - getStandardButtons()/setStandardButtons()",
   "text": "This object contains config objects for the standard `buttons` (such as `OK`\nand `Cancel`). This object is keyed by the `itemId` for the button and\ncontains the `text` and a default `weight` for\n{@link Ext.Container#cfg!weighted} containers to use. These default\nweights vary by OS to provide the user with a button order that is consistent\nfor their platform. In particular, Windows and Linux (or rather all platforms\nother then Mac OS and iOS) present the `OK` button followed by `Cancel` while\nMac OS and iOS present them in reverse order of 'Cancel` followed by `OK`.\n\nThe standard buttons, in weight order, are as follows:\n\n - `ok`\n - `abort`\n - `retry`\n - `ignore`\n - `yes`\n - `no`\n - `cancel`\n - `apply`\n - `save`\n - `submit`\n - `help`\n - `close`\n\nOn Mac OS and iOS this order is reversed with the exception of `help` which\nis the first button. The buttons are assigned weights from `10` to `200`.\n",
   "accessor": true,
   "from": "Ext.panel.Buttons",
   "type": "Object",
   "value": "{\n    ok: {\n        text: 'OK',\n        weight: isMacOrAndroid ? 120 : 10\n    },\n    abort: {\n        text: 'Abort',\n        weight: isMacOrAndroid ? 110 : 20\n    },\n    retry: {\n        text: 'Retry',\n        weight: isMacOrAndroid ? 100 : 30\n    },\n    ignore: {\n        text: 'Ignore',\n        weight: isMacOrAndroid ? 90 : 40\n    },\n    yes: {\n        text: 'Yes',\n        weight: isMacOrAndroid ? 80 : 50\n    },\n    no: {\n        text: 'No',\n        weight: isMacOrAndroid ? 70 : 60\n    },\n    cancel: {\n        text: 'Cancel',\n        weight: isMacOrAndroid ? 60 : 70\n    },\n    apply: {\n        text: 'Apply',\n        weight: isMacOrAndroid ? 50 : 80\n    },\n    save: {\n        text: 'Save',\n        weight: isMacOrAndroid ? 40 : 90\n    },\n    submit: {\n        text: 'Submit',\n        weight: isMacOrAndroid ? 30 : 100\n    },\n    help: {\n        text: 'Help',\n        weight: isMacOrAndroid ? 10 : 110\n    },\n    close: {\n        text: 'Close',\n        weight: isMacOrAndroid ? 20 : 120\n    }\n}"
  },
  {
   "name": "stateful",
   "nameprimary": "stateful: Boolean/Object/String[] - getStateful()/setStateful()",
   "text": "\nThis config specifies the config properties that will be persisted using the\n{@link Ext.state.Provider}. If this config is set to `true`, the\nconfigs specified by `{@link #cfg!statefulDefaults statefulDefaults}` will be assumed.\n\n     stateful: true\n\nOtherwise, this config can be an array of strings of the properties to save:\n\n     stateful: [\n         'width',\n         'height',\n         'collapsed'\n     ]\n\nThe above is equivalent to:\n\n     stateful: {\n         width: true,\n         height: true,\n         collapsed: true\n     }\n\n**Note:** To be truly stateful, an `id` or `{@link #cfg!stateId stateId}` must also be assigned.\n\nA stateful object will save its state when any of these config properties change\nvalue.\n",
   "accessor": true,
   "from": "Ext.state.Stateful",
   "optional": true,
   "type": "Boolean/Object/String[]",
   "value": "false"
  },
  {
   "name": "statefulDefaults",
   "nameprimary": "statefulDefaults: Object/String[] - getStatefulDefaults()/setStatefulDefaults()",
   "text": "The default set of {@link #cfg!stateful} properties. The form of this config\nis the same as {@link #cfg!stateful} except this config cannot be a Boolean.\n\nThis config is intended for classes to specify so that instances can simply\nenable statefulness using `stateful: true`.\n",
   "accessor": true,
   "from": "Ext.state.Stateful",
   "type": "Object/String[]",
   "value": "null"
  },
  {
   "name": "stateId",
   "nameprimary": "stateId: String - getStateId()/setStateId()",
   "text": "The unique id for this object to use for state management purposes.\n",
   "accessor": true,
   "from": "Ext.state.Stateful",
   "type": "String",
   "value": "null"
  },
  {
   "name": "store",
   "nameprimary": "store: Object/Ext.calendar.store.Calendars - getStore()/setStore()",
   "text": "A {@link Ext.calendar.store.Calendars} instance or\nconfiguration\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Object/Ext.calendar.store.Calendars",
   "value": "true"
  },
  {
   "name": "style",
   "nameprimary": "style: String/Object",
   "text": "Additional CSS styles that will be rendered into an inline style attribute when\nthe widget is rendered.\n\nYou can pass either a string syntax:\n\n    style: 'background:red'\n\nOr by using an object:\n\n    style: {\n        background: 'red'\n    }\n\nWhen using the object syntax, you can define CSS Properties by using a string:\n\n    style: {\n        'border-left': '1px solid red'\n    }\n\nAlthough the object syntax is much easier to read, we suggest you to use the\nstring syntax for better performance.\n",
   "accessor": "w",
   "from": "Ext.Widget",
   "type": "String/Object",
   "value": "null"
  },
  {
   "name": "tabIndex",
   "nameprimary": "tabIndex: Number - getTabIndex()/setTabIndex()",
   "text": "DOM tabIndex attribute for this component's\n{@link #property!focusEl #focusEl}.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number",
   "value": "null"
  },
  {
   "name": "tbar",
   "nameprimary": "tbar: Object/Object[] - getTbar()/setTbar()",
   "text": "Convenience config. Short for 'Top Bar'.\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        html: 'hello world',\n        padding: 20,\n        tbar: [{\n            xtype: 'button',\n            text : 'Button 1'\n        }]\n    });\n```\n\nis equivalent to\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        html: 'hello world',\n        padding: 20,\n        items: [{\n            xtype: 'toolbar',\n            docked: 'top',\n            items: [{\n                xtype: 'button',\n                text: 'Button 1'\n            }]\n        }]\n    });\n```\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Object/Object[]",
   "value": "null"
  },
  {
   "name": "timezoneOffset",
   "nameprimary": "timezoneOffset: Number - getTimezoneOffset()/setTimezoneOffset()",
   "text": "The timezone offset to display this calendar in. The value should be\nspecified in the same way as the native Date offset. That is, the number\nof minutes between UTC and local time. For example the offset for UTC+10\nwould be -600 (10 hours * 60 minutes ahead).\n\nDefaults to the current browser offset.\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Number",
   "value": "true"
  },
  {
   "name": "title",
   "nameprimary": "title: String/Ext.panel.Title - getTitle()/setTitle()",
   "text": "The title text or config object for the {@link Ext.panel.Title} component.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "String/Ext.panel.Title",
   "value": "null"
  },
  {
   "name": "titleAlign",
   "nameprimary": "titleAlign: 'left'/'center'/'right' - getTitleAlign()/setTitleAlign()",
   "text": "The alignment of the title text within the available space between the\nicon and the tools.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "optional": true,
   "type": "'left'/'center'/'right'",
   "value": "'left'"
  },
  {
   "name": "titleCollapse",
   "nameprimary": "titleCollapse: Boolean - getTitleCollapse()/setTitleCollapse()",
   "text": "`true` to allow expanding and collapsing the panel (when `{@link #cfg!collapsible #collapsible} = true`)\nby clicking anywhere in the header bar, `false` to allow it only by clicking to tool\nbutton.\n",
   "accessor": true,
   "from": "Ext.Panel",
   "type": "Boolean",
   "value": "null"
  },
  {
   "name": "toFrontOnShow",
   "nameprimary": "toFrontOnShow: Boolean - getToFrontOnShow()/setToFrontOnShow()",
   "text": "True to automatically call {@link #method!toFront #toFront} when a {@link #cfg!floated #cfg-floated} Component is\nshown.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Boolean",
   "value": "true"
  },
  {
   "name": "toolDefaults",
   "nameprimary": "toolDefaults: Object - getToolDefaults()/setToolDefaults()",
   "text": "The properties of this object are shallow copied (via {@link Ext#method!applyIf applyIf()}\nas opposed to {@link Ext#method!merge Ext.merge()} to each tool declared in the `{@link #cfg!tools tools}`\nconfig.\n",
   "accessor": true,
   "from": "Ext.mixin.Toolable",
   "type": "Object",
   "value": "{\n    xtype: 'tool',\n    zone: 'end'\n}"
  },
  {
   "name": "tools",
   "nameprimary": "tools: Ext.Tool[]/Object/Object[] - getTools()/setTools()",
   "text": "An array of {@link Ext.Tool} configs or an object keyed by `itemId`.\n",
   "accessor": true,
   "from": "Ext.mixin.Toolable",
   "type": "Ext.Tool[]/Object/Object[]",
   "value": "null"
  },
  {
   "name": "tooltip",
   "nameprimary": "tooltip: String/Object - getTooltip()/setTooltip()",
   "text": "The tooltip for this component - can be a string to be used as innerHTML\n(html tags are accepted) or {@link Ext.tip.ToolTip} config object.\n\nThe default behavior is to use a shared tip instance. The tooltip configuration is\nregistered with the {@link Ext.tip.Manager}. To enable this, your application can set\nthe {@link Ext.app.Application#cfg!quickTips Ext.app.Application#quickTips} config, or an instance of the\n{@link Ext.tip.Manager} may be created manually.\n\nTo force a unique tooltip instance to be created, specify `autoCreate: true` on this\nconfiguration.\n\nConfiguring this with `autoHide: false` implies `autoCreate: true` so that the desired\npersistent behavior can be obtained with other targets still showing the singleton\ninstance.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "String/Object",
   "value": "null"
  },
  {
   "name": "top",
   "nameprimary": "top: Number/String - getTop()/setTop()",
   "text": "The absolute top position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "touchAction",
   "nameprimary": "touchAction: Object - getTouchAction()/setTouchAction()",
   "text": "\nEmulates the behavior of the CSS\n[touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)\nproperty in a cross-browser compatible manner.\n\nKeys in this object are touch action names, and values are `false` to disable\na touch action or `true` to enable it.  Accepted keys are:\n\n- `panX`\n- `panY`\n- `pinchZoom`\n- `doubleTapZoom`\n\nAll touch actions are enabled (`true`) by default, so it is usually only necessary\nto specify which touch actions to disable.  For example, the following disables\nonly horizontal scrolling and pinch-to-zoom on the component's main element:\n\n    touchAction: {\n        panX: false,\n        pinchZoom: false\n    }\n\nTouch actions can be specified on reference elements using the reference element\nname, for example:\n\n    // disables horizontal scrolling on the main element, and double-tap-zoom\n    // on the child element named \"body\"\n    touchAction: {\n        panY: false\n        body: {\n            doubleTapZoom: false\n        }\n    }\n\nThe primary motivation for setting the touch-action of an element is to prevent\nthe browser's default handling of a gesture such as pinch-to-zoom, or\ndrag-to-scroll, so that the application can implement its own handling of that\ngesture on the element.  Suppose, for example, a component has a custom drag\nhandler on its element and wishes to prevent horizontal scrolling of its container\nwhile it is being dragged:\n\n    Ext.create('Ext.Widget', {\n        touchAction: {\n            panX: false\n        },\n        listeners: {\n            drag: function(e) {\n                // implement drag logic\n            }\n        }\n    });\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "Object",
   "value": "null"
  },
  {
   "name": "tpl",
   "nameprimary": "tpl: String/String[]/Ext.Template/Ext.XTemplate[] - getTpl()/setTpl()",
   "text": "A {@link String}, {@link Ext.Template}, {@link Ext.XTemplate} or an {@link Array} of\nstrings to form an {@link Ext.XTemplate}. Used in conjunction with the {@link #cfg!data #data}\nand {@link #cfg!tplWriteMode #tplWriteMode} configurations.\n\n__Note__\nThe {@link #cfg!data #data} configuration _must_ be set for any content to be shown in the\ncomponent when using this configuration.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "String/String[]/Ext.Template/Ext.XTemplate[]",
   "value": "null"
  },
  {
   "name": "tplWriteMode",
   "nameprimary": "tplWriteMode: String - getTplWriteMode()/setTplWriteMode()",
   "text": "The Ext.(X)Template method to use when updating the content area of the\nComponent.\n\nValid modes are:\n\n- append\n- insertAfter\n- insertBefore\n- insertFirst\n- overwrite\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "String",
   "value": "'overwrite'"
  },
  {
   "name": "translatable",
   "nameprimary": "translatable: Object - getTranslatable()/setTranslatable()",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "Object",
   "value": "null"
  },
  {
   "name": "twoWayBindable",
   "nameprimary": "twoWayBindable: String/String[]/Object - getTwoWayBindable()/setTwoWayBindable()",
   "text": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `{@link #cfg!value value}` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "String/String[]/Object",
   "value": "{\n    value: 1\n}"
  },
  {
   "name": "ui",
   "nameprimary": "ui: String/String[] - getUi()/setUi()",
   "text": "The ui or uis to be used on this Component\n\nWhen a ui is configured, CSS class names are added to the {@link #property!element #element}, created\nby appending the ui name(s) to each {@link #property!classCls #classCls} and/or {@link #property!baseCls #baseCls}.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "String/String[]",
   "value": "null"
  },
  {
   "name": "userCls",
   "nameprimary": "userCls: String/String[] - getUserCls()/setUserCls()",
   "text": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "String/String[]",
   "value": "null"
  },
  {
   "name": "userSelectable",
   "nameprimary": "userSelectable: Boolean/String/Object - getUserSelectable()/setUserSelectable()",
   "text": "\nSet to true to allow users to select text within this component.\n\nCan also be any valid value for the CSS3\n[user-select](https://developer.mozilla.org/en-US/docs/Web/CSS/user-select) property.\n\nA value of true implies `auto`, while false implies `none`.\n\nMay also be an object keyed by child element name.\n\nBy default, the user cannot click+drag+select text/elements of the UI.  Applications may\nwant to enable user selection for specific DOM elements, such as the bodyElement of\na component used as a tab panel.  The tab and tab text would not be user selectable in\nthis example, but the content area when the tab is selected would.\n\n     userSelectable: {\n         element: true,       // allow the element to be user selectable\n         bodyElement: true    // allow the component's body element to be user selectable\n     }\n",
   "accessor": true,
   "from": "Ext.Component",
   "optional": true,
   "type": "Boolean/String/Object",
   "value": "false"
  },
  {
   "name": "value",
   "nameprimary": "value: Date - getValue()/setValue()",
   "text": "The value for the current view.\n\n    value: new Date('10-02-2016') // to set the date to Oct 2nd 2016\n",
   "accessor": true,
   "from": "Ext.calendar.panel.Base",
   "type": "Date",
   "value": "true"
  },
  {
   "name": "view",
   "nameprimary": "view: Object - getView()/setView()",
   "text": "A config for the main calendar view. This can be configured directly on the panel,\nthe relevant configurations will be forwarded to the view.\n",
   "accessor": true,
   "type": "Object",
   "value": "{\n    xtype: 'calendar-weeksview'\n}"
  },
  {
   "name": "viewModel",
   "nameprimary": "viewModel: String/Object/Ext.app.ViewModel - getViewModel()/setViewModel()",
   "text": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n",
   "accessor": true,
   "from": "Ext.mixin.Bindable",
   "type": "String/Object/Ext.app.ViewModel",
   "value": "null"
  },
  {
   "name": "visibleDays",
   "nameprimary": "visibleDays: Number",
   "text": "The number of days to show in a week, starting from the {@link #cfg!firstDayOfWeek #firstDayOfWeek}.\nFor example, to show the view with days `Mon - Fri`, use:\n\n     {\n         visibleDays: 5,\n         firstDayOfWeek: 1 // Monday\n     }\n",
   "type": "Number",
   "value": "true"
  },
  {
   "name": "visibleWeeks",
   "nameprimary": "visibleWeeks: Number",
   "text": "The number of weeks to show in this view.\n",
   "type": "Number",
   "value": "true"
  },
  {
   "name": "weekendDays",
   "nameprimary": "weekendDays: Number[]",
   "text": "The days of the week that are the weekend. `0` (Sunday) through `6` (Saturday).\nDefaults to {@link Ext.Date#property!weekendDays Ext.Date#weekendDays}.\n",
   "type": "Number[]",
   "value": "true"
  },
  {
   "name": "weight",
   "nameprimary": "weight: Number - getWeight()/setWeight()",
   "text": "This value controls this item's order in a {@link Ext.Container#cfg!weighted}\n{@link Ext.Container} (see {@link #cfg!parent}).\n\nLower values gravitate towards the start of the container - the top in vertical layouts,\nthe locale start side in horizontal layouts.\n",
   "accessor": true,
   "from": "Ext.Component",
   "optional": true,
   "type": "Number",
   "value": "0"
  },
  {
   "name": "weighted",
   "nameprimary": "weighted: Boolean",
   "text": "If set to `true`, then child {@link #cfg!items} may be specified as a object,\nwith each property name specifying an {@link #cfg!itemId}, and the property\nvalue being the child item configuration object.\n\nWhen using this scheme, each child item may contain a {@link #cfg!weight}\nconfiguration value which affects its order in this container. Lower weights\nare towards the start, higher weights towards the end.\n",
   "from": "Ext.Container",
   "optional": true,
   "type": "Boolean",
   "value": "false"
  },
  {
   "name": "width",
   "nameprimary": "width: Number/String - getWidth()/setWidth()",
   "text": "The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "type": "Number/String",
   "value": "null"
  },
  {
   "name": "x",
   "nameprimary": "x: Number - getX()/setX()",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Number",
   "value": "0"
  },
  {
   "name": "xtype",
   "nameprimary": "xtype: String",
   "text": "The `{@link #cfg!xtype xtype}` configuration option can be used to optimize Component creation and rendering.\nIt serves as a shortcut to the full component name. For example, the component\n`Ext.button.Button` has an xtype of `button`.\n\nYou can define your own xtype on a custom {@link Ext.Component} like so:\n\n    Ext.define('PressMeButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'pressmebutton',\n        text: 'Press Me'\n    });\n\nAny Component can be created implicitly as an object config with an xtype specified,\nallowing it to be declared and passed into the rendering pipeline without actually being\ninstantiated as an object. Not only is rendering deferred, but the actual creation of the\nobject itself is also deferred, saving memory and resources until they are actually needed.\nIn complex, nested layouts containing many Components, this can make a noticeable\nimprovement in performance.\n\n    // Explicit creation of contained Components:\n    var panel = new Ext.Panel({\n       // ...\n       items: [\n          Ext.create('Ext.button.Button', {\n             text: 'OK'\n          })\n       ]\n    });\n\n    // Implicit creation using xtype:\n    var panel = new Ext.Panel({\n       // ...\n       items: [{\n          xtype: 'button',\n          text: 'OK'\n       }]\n    });\n\nIn the first example, the button will always be created immediately during the panel's\ninitialization. With many added Components, this approach could potentially slow the\nrendering of the page. In the second example, the button will not be created or rendered\nuntil the panel is actually displayed in the browser. If the panel is never displayed\n(for example, if it is a tab that remains hidden) then the button will never be created and\nwill never consume any resources whatsoever.\n",
   "from": "Ext.Component",
   "type": "String"
  },
  {
   "name": "y",
   "nameprimary": "y: Number - getY()/setY()",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n",
   "accessor": true,
   "from": "Ext.Widget",
   "optional": true,
   "type": "Number",
   "value": "0"
  },
  {
   "name": "zIndex",
   "nameprimary": "zIndex: Number - getZIndex()/setZIndex()",
   "text": "The z-index to give this Component when it is rendered.\n\nNot valid for {@link #cfg!floated #cfg-floated} Components. The Z ordering of {@link #cfg!floated #cfg-floated}\nComponents is managed by ordering of the DOM elements.\n",
   "accessor": true,
   "from": "Ext.Component",
   "type": "Number",
   "value": "null"
  }
 ],
 "propertyNames": [
  "activeChildTabIndex",
  "activeItem",
  "addForm",
  "addOnSelect",
  "alignSelf",
  "allowFocusingDisabledChildren",
  "allowSelection",
  "alwaysOnTop",
  "anchor",
  "anchorPosition",
  "ariaAttributes",
  "ariaDescribedBy",
  "ariaLabel",
  "ariaLabelledBy",
  "autoDestroy",
  "autoSize",
  "axisLock",
  "bbar",
  "bind",
  "bodyBorder",
  "bodyCls",
  "bodyPadding",
  "bodyStyle",
  "border",
  "bottom",
  "buttonAlign",
  "buttons",
  "buttonToolbar",
  "cardSwitchAnimation",
  "centered",
  "closable",
  "closeAction",
  "closeToolText",
  "cls",
  "collapsed",
  "collapsible",
  "compact",
  "compactOptions",
  "constrainAlign",
  "contentEl",
  "control",
  "controller",
  "controlStoreRange",
  "data",
  "dayFormat",
  "dayHeader",
  "dayHeaderFormat",
  "defaultFocus",
  "defaultListenerScope",
  "defaults",
  "defaultToolWeights",
  "defaultType",
  "disabled",
  "displayed",
  "docked",
  "draggable",
  "droppable",
  "editForm",
  null,
  "eventDefaults",
  null,
  "eventRelayers",
  null,
  "firstDayOfWeek",
  "flex",
  "floated",
  "focusableContainer",
  "focusCls",
  "fullscreen",
  "gestureNavigation",
  "header",
  "headerPosition",
  "height",
  "hidden",
  "hideAnimation",
  "hideMode",
  "hideOnMaskTap",
  "highlightToday",
  "html",
  "icon",
  "iconAlign",
  "iconCls",
  "id",
  "inactiveChildTabIndex",
  "innerCls",
  "instanceCls",
  "itemId",
  "items",
  "keyMap",
  "keyMapEnabled",
  "keyMapTarget",
  "layout",
  "lbar",
  "left",
  "listeners",
  "manageBorders",
  "margin",
  "masked",
  "maxHeight",
  "maxWidth",
  "minButtonWidth",
  "minHeight",
  "minWidth",
  "modal",
  "modelValidation",
  "name",
  "nameable",
  "nameHolder",
  "overflowText",
  "padding",
  "plugins",
  "publishes",
  "rbar",
  "record",
  "reference",
  "referenceHolder",
  "relative",
  "renderTo",
  "resetFocusPosition",
  "resizable",
  "right",
  "ripple",
  "scrollable",
  "session",
  "shadow",
  "shareableName",
  "shim",
  "showAnimation",
  "showOverflow",
  "standardButtons",
  "stateful",
  "statefulDefaults",
  "stateId",
  "store",
  "style",
  "tabIndex",
  "tbar",
  "timezoneOffset",
  "title",
  "titleAlign",
  "titleCollapse",
  "toFrontOnShow",
  "toolDefaults",
  "tools",
  "tooltip",
  "top",
  "touchAction",
  "tpl",
  "tplWriteMode",
  "translatable",
  "twoWayBindable",
  "ui",
  "userCls",
  "userSelectable",
  "value",
  "view",
  "viewModel",
  "visibleDays",
  "visibleWeeks",
  "weekendDays",
  "weight",
  "weighted",
  "width",
  "x",
  "xtype",
  "y",
  "zIndex"
 ]
}