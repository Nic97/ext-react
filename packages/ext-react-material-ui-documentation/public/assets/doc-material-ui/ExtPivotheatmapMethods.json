{
 "xtype": "pivotheatmap",
 "reactname": "ExtPivotheatmap",
 "methods": [
  {
   "name": "_addDeclaredListeners",
   "text": "Adds declarative listeners as nested arrays of listener objects.\n",
   "items": [
    {
     "$type": "param",
     "name": "listeners",
     "type": "Array",
     "src": {
      "name": "291,482,27",
      "type": "291,482,20"
     }
    },
    {
     "$type": "return",
     "text": "`true` if any listeners were added\n",
     "type": "Boolean",
     "src": {
      "text": "291,483,30,35",
      "type": "291,483,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "_addDeclaredListeners([object Object],[object Object])"
  },
  {
   "name": "_fixReference",
   "text": "Sets up a reference on our current reference holder.\n",
   "access": "private",
   "nameprimary": "_fixReference(undefined)"
  },
  {
   "name": "_flushStateful",
   "text": "This method is called before `{@link #method!destroy destroy}` to ensure that this instance's `{@link #cfg!stateful stateful}`\nproperties are saved to persistent storage. Since this object is about to be\ndestroyed, this cannot be delayed.\n",
   "access": "private",
   "nameprimary": "_flushStateful(undefined)"
  },
  {
   "name": "_getStateId",
   "text": "Returns the state id for this object.\n",
   "items": [
    {
     "$type": "return",
     "text": "The `{@link #cfg!stateId stateId}` or the configured `{@link #cfg!id id}`.\n",
     "type": "String",
     "src": {
      "text": "668,383,29,38",
      "type": "668,383,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "_getStateId([object Object])"
  },
  {
   "name": "activatePlugin",
   "text": "Creates a particular plugin type if defined in the `{@link #cfg!plugins plugins}` configuration.\n",
   "items": [
    {
     "$type": "param",
     "name": "type",
     "text": "The `type` of the plugin.\n",
     "type": "String",
     "src": {
      "name": "292,277,28",
      "text": "292,277,33,26",
      "type": "292,277,20"
     }
    },
    {
     "$type": "return",
     "text": "The plugin that was created.\n",
     "type": "Ext.plugin.Abstract",
     "src": {
      "text": "292,278,42,29",
      "type": "292,278,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "activatePlugin([object Object],[object Object])"
  },
  {
   "name": "addAfterListener",
   "text": "Alias for {@link #method!onAfter #onAfter}.\n",
   "nameprimary": "addAfterListener(undefined)"
  },
  {
   "name": "addBeforeListener",
   "text": "Alias for {@link #method!onBefore #onBefore}.\n",
   "nameprimary": "addBeforeListener(undefined)"
  },
  {
   "name": "addCls",
   "text": "Adds a CSS class (or classes) to this Component's rendered element.\n",
   "items": [
    {
     "$type": "param",
     "name": "cls",
     "text": "The CSS class(es) to add.\n",
     "type": "String/String[]",
     "src": {
      "name": "18,1318,33",
      "text": "18,1318,37,26",
      "type": "18,1318,16"
     }
    },
    {
     "$type": "param",
     "name": "prefix",
     "optional": true,
     "text": "Optional prefix to add to each class.\n",
     "type": "String",
     "value": "\"\"",
     "src": {
      "name": "18,1319,25",
      "text": "18,1319,36,38",
      "type": "18,1319,16",
      "value": "18,1319,32"
     }
    },
    {
     "$type": "param",
     "name": "suffix",
     "optional": true,
     "text": "Optional suffix to add to each class.\n",
     "type": "String",
     "value": "\"\"",
     "src": {
      "name": "18,1320,25",
      "text": "18,1320,36,38",
      "type": "18,1320,16",
      "value": "18,1320,32"
     }
    }
   ],
   "nameprimary": "addCls([object Object],[object Object],[object Object])"
  },
  {
   "name": "addDelegatedListener",
   "text": "Adds a listeners with the \"delegate\" event option.  Users should not invoke this\nmethod directly.  Use the \"delegate\" event option of\n{@link Ext.util.Observable#method!addListener addListener} instead.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "src": {
      "name": "277,19,0"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "src": {
      "name": "277,19,0"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "src": {
      "name": "277,19,0"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "src": {
      "name": "277,19,0"
     }
    },
    {
     "$type": "param",
     "name": "order",
     "src": {
      "name": "277,19,0"
     }
    },
    {
     "$type": "param",
     "name": "caller",
     "src": {
      "name": "277,19,0"
     }
    },
    {
     "$type": "param",
     "name": "manager",
     "src": {
      "name": "277,19,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "addDelegatedListener([object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "addDeprecations",
   "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
   "items": [
    {
     "$type": "param",
     "name": "deprecations",
     "src": {
      "name": "46,164,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "addDeprecations([object Object])"
  },
  {
   "name": "addElementReference",
   "text": "Adds an element reference to this Widget instance.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "text": "The name of the reference\n",
     "type": "String",
     "src": {
      "name": "18,1761,28",
      "text": "18,1761,33,26",
      "type": "18,1761,20"
     }
    },
    {
     "$type": "param",
     "name": "domNode",
     "type": "HTMLElement",
     "src": {
      "name": "18,1762,33",
      "type": "18,1762,20"
     }
    },
    {
     "$type": "return",
     "type": "Ext.dom.Element",
     "src": {
      "type": "18,1763,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "addElementReference([object Object],[object Object],[object Object])"
  },
  {
   "name": "addElementReferenceOnDemand",
   "text": "Reduces instantiation time for a Widget by lazily instantiating Ext.Element\nreferences the first time they are used.  This optimization only works for elements\nwith no listeners specified.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "text": "The name of the reference\n",
     "type": "String",
     "src": {
      "name": "18,1727,28",
      "text": "18,1727,33,26",
      "type": "18,1727,20"
     }
    },
    {
     "$type": "param",
     "name": "domNode",
     "type": "HTMLElement",
     "src": {
      "name": "18,1728,33",
      "type": "18,1728,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "addElementReferenceOnDemand([object Object],[object Object])"
  },
  {
   "name": "addListener",
   "text": "The {@link #method!on #on} method is shorthand for\n{@link Ext.util.Observable#method!addListener addListener}.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
     "type": "String/Object",
     "src": {
      "name": "291,943,35",
      "text": "291,943,45,37:291,944,12,61",
      "type": "291,943,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "optional": true,
     "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n",
     "type": "Function/String",
     "src": {
      "name": "291,946,38",
      "text": "291,946,42,46:291,947,12,166",
      "type": "291,946,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
     "type": "Object",
     "src": {
      "name": "291,951,29",
      "text": "291,951,36,62:291,952,12,73",
      "type": "291,951,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
     "type": "Object",
     "items": [
      {
       "$type": "property",
       "name": "scope",
       "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
       "type": "Object",
       "src": {
        "name": "291,961,36",
        "text": "291,962,12,139",
        "type": "291,961,20"
       }
      },
      {
       "$type": "property",
       "name": "delay",
       "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
       "type": "Number",
       "src": {
        "name": "291,965,36",
        "text": "291,966,12,94",
        "type": "291,965,20"
       }
      },
      {
       "$type": "property",
       "name": "single",
       "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
       "type": "Boolean",
       "src": {
        "name": "291,969,37",
        "text": "291,970,12,96",
        "type": "291,969,20"
       }
      },
      {
       "$type": "property",
       "name": "buffer",
       "text": "  Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
       "type": "Number",
       "src": {
        "name": "291,973,36",
        "text": "291,974,12,262",
        "type": "291,973,20"
       }
      },
      {
       "$type": "property",
       "name": "onFrame",
       "text": "  Causes the handler to be scheduled to run at the next\n  {@link Ext.Function#method!requestAnimationFrame animation frame event}. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
       "type": "Number",
       "src": {
        "name": "291,978,36",
        "text": "291,979,12,323",
        "type": "291,978,20"
       }
      },
      {
       "$type": "property",
       "name": "target",
       "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
       "type": "Ext.util.Observable",
       "src": {
        "name": "291,985,49",
        "text": "291,986,12,135",
        "type": "291,985,20"
       }
      },
      {
       "$type": "property",
       "name": "element",
       "text": "  **This option is only valid for listeners bound to {@link Ext.Component}.**\n  The name of a Component property which references an {@link Ext.dom.Element}\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of {@link Ext.Component} which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
       "type": "String",
       "src": {
        "name": "291,989,36",
        "text": "291,990,12,781",
        "type": "291,989,20"
       }
      },
      {
       "$type": "property",
       "name": "delegate",
       "optional": true,
       "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
       "type": "String",
       "src": {
        "name": "291,1013,37",
        "text": "291,1014,12,295",
        "type": "291,1013,20"
       }
      },
      {
       "$type": "property",
       "name": "capture",
       "optional": true,
       "text": " When set to `true`, the listener is fired in the capture phase of the event propagation\n sequence, instead of the default bubble phase.\n\n  The `{@link #static-method!capture capture}` option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n",
       "type": "Boolean",
       "src": {
        "name": "291,1022,38",
        "text": "291,1023,12,307",
        "type": "291,1022,20"
       }
      },
      {
       "$type": "property",
       "name": "stopPropagation",
       "optional": true,
       "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopPropagation stopPropagation} on the event\n  object before firing the handler.\n",
       "type": "Boolean",
       "src": {
        "name": "291,1030,38",
        "text": "291,1031,12,212",
        "type": "291,1030,20"
       }
      },
      {
       "$type": "property",
       "name": "preventDefault",
       "optional": true,
       "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!preventDefault preventDefault} on the event\n  object before firing the handler.\n",
       "type": "Boolean",
       "src": {
        "name": "291,1035,38",
        "text": "291,1036,12,210",
        "type": "291,1035,20"
       }
      },
      {
       "$type": "property",
       "name": "stopEvent",
       "optional": true,
       "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopEvent stopEvent} on the event object\n  before firing the handler.\n",
       "type": "Boolean",
       "src": {
        "name": "291,1040,38",
        "text": "291,1041,12,200",
        "type": "291,1040,20"
       }
      },
      {
       "$type": "property",
       "name": "args",
       "optional": true,
       "text": "\nOptional set of arguments to pass to the handler function before the actual\nfired event arguments. For example, if `args` is set to `['foo', 42]`,\nthe event handler function will be called with an arguments list like this:\n\n     handler('foo', 42, <actual event arguments>...);\n",
       "type": "Array",
       "src": {
        "name": "291,1045,36",
        "text": "291,1046,12,280",
        "type": "291,1045,20"
       }
      },
      {
       "$type": "property",
       "name": "destroyable",
       "optional": true,
       "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `destroy` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using {@link #method!un #un}; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See {@link #method!un #un} for the proper syntax for removing listeners added using the\n  _element_ config.\n",
       "type": "Boolean",
       "value": "false",
       "src": {
        "name": "291,1053,38",
        "text": "291,1054,12,441",
        "type": "291,1053,20",
        "value": "291,1053,50"
       }
      },
      {
       "$type": "property",
       "name": "priority",
       "optional": true,
       "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
       "type": "Number",
       "src": {
        "name": "291,1061,37",
        "text": "291,1062,12,737",
        "type": "291,1061,20"
       }
      },
      {
       "$type": "property",
       "name": "order",
       "optional": true,
       "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
       "type": "String",
       "value": "'current'",
       "src": {
        "name": "291,1073,37",
        "text": "291,1074,12,301",
        "type": "291,1073,20",
        "value": "291,1073,43"
       }
      }
     ],
     "src": {
      "name": "291,954,29",
      "text": "291,954,38,44:291,955,12,154",
      "type": "291,954,20"
     }
    },
    {
     "$type": "param",
     "name": "order",
     "optional": true,
     "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n",
     "type": "String",
     "value": "'current'",
     "src": {
      "name": "291,1081,29",
      "text": "291,1082,12,132",
      "type": "291,1081,20",
      "value": "291,1081,35"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "caller",
     "text": "\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
     "src": {
      "access": "291,1085,27",
      "name": "291,1085,19",
      "text": "291,1086,12,1700"
     }
    },
    {
     "$type": "return",
     "text": "**Only when the `destroyable` option is specified.**\n\n A `Destroyable` object. An object which implements the `destroy` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
     "type": "Object",
     "src": {
      "text": "291,1142,29,53:291,1143,12,516",
      "type": "291,1142,21"
     }
    }
   ],
   "nameprimary": "addListener([object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "addManagedListener",
   "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n{@link Ext.util.Observable#method!addListener addListener} is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use `{@link #method!mon mon}` or `{@link #method!addManagedListener addManagedListener}` if you want the listener to be\nmanaged.\n",
   "items": [
    {
     "$type": "param",
     "name": "item",
     "text": "The item to which to add\na listener/listeners.\n",
     "type": "Ext.util.Observable/Ext.dom.Element",
     "src": {
      "name": "291,526,57",
      "text": "291,526,62,25:291,527,12,22",
      "type": "291,526,20"
     }
    },
    {
     "$type": "param",
     "name": "ename",
     "text": "The event name, or an object containing event name\nproperties.\n",
     "type": "Object/String",
     "src": {
      "name": "291,528,35",
      "text": "291,528,41,51:291,529,12,12",
      "type": "291,528,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "optional": true,
     "text": "If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
     "type": "Function/String",
     "src": {
      "name": "291,530,37",
      "optional": "291,530,41",
      "text": "291,530,51,38:291,531,12,85",
      "type": "291,530,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n",
     "type": "Object",
     "src": {
      "name": "291,533,28",
      "optional": "291,533,35",
      "text": "291,533,45,52:291,534,12,72",
      "type": "291,533,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "If the `ename` parameter was an event name, this is\nthe {@link Ext.util.Observable#method!addListener addListener} options.\n",
     "type": "Object",
     "src": {
      "name": "291,535,28",
      "optional": "291,535,37",
      "text": "291,535,47,52:291,536,12,65",
      "type": "291,535,20"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "noDestroy",
     "type": "Boolean",
     "src": {
      "access": "291,537,40",
      "name": "291,537,29",
      "type": "291,537,20"
     }
    },
    {
     "$type": "return",
     "text": "**Only when the `destroyable` option is specified.**\n\nA `Destroyable` object. An object which implements the `destroy` method which removes\nall listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
     "type": "Object",
     "src": {
      "text": "291,538,29,53:291,539,12,512",
      "type": "291,538,21"
     }
    }
   ],
   "nameprimary": "addManagedListener([object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "addPlugin",
   "text": "Adds a plugin. For example:\n\n     list.addPlugin('pullrefresh');\n\nOr:\n\n     list.addPlugin({\n         type: 'pullrefresh',\n         pullRefreshText: 'Pull to refresh...'\n     });\n",
   "items": [
    {
     "$type": "param",
     "name": "plugin",
     "text": "The plugin or config object or\nalias to add.\n",
     "type": "Object/String/Ext.plugin.Abstract",
     "src": {
      "name": "292,116,51",
      "text": "292,116,58,31:292,117,8,14",
      "type": "292,116,16"
     }
    }
   ],
   "nameprimary": "addPlugin([object Object])"
  },
  {
   "name": "afterEdit",
   "text": "Used to handle joining of a record to a tpl\n",
   "access": "private",
   "nameprimary": "afterEdit(undefined)"
  },
  {
   "name": "afterErase",
   "text": "Used to handle joining of a record to a tpl\n",
   "access": "private",
   "nameprimary": "afterErase(undefined)"
  },
  {
   "name": "afterRender",
   "text": "This method is called after the component is initially added to the DOM. If this\ncomponent {@link Ext.Container} other components, the `{@link #method!afterRender afterRender}` method\nfor child components is called *before* the parent's `{@link #method!afterRender afterRender}`.\n\nImplementations of this method should avoid reading from the DOM but are free to\nwrite to the DOM as needed. To read the DOM, consider implementing\n{@link #method!onRender onRender} instead.\n\nThis method is not generally needed because components always have their own DOM\n{@link #property!element} and these are maintained by config property\nupdaters prior to insertion in the DOM. In general, it is always best to manipulate\nthe component's elements outside the DOM where there is no associated reflow or\nlayout cost. This method is useful for situations where the component's elements\nmust be in the DOM in order to be manipulated correctly.\n",
   "nameprimary": "afterRender(undefined)"
  },
  {
   "name": "alignContent",
   "text": "Aligns rendered content in the scene.\n",
   "items": [
    {
     "$type": "param",
     "name": "options",
     "text": "Align options.\n* c - center\n* l - left\n* r - right\n* t - top\n* b - bottom\nAlign options can be combined. E.g. 'tr' - top-right.\nIf the align options string is only one character long, the other component\nis assumed to be 'c'. E.g. 'c' - center vertically and horizontally.\n",
     "type": "String",
     "src": {
      "name": "775,263,24",
      "text": "775,263,32,15:775,264,8,258",
      "type": "775,263,16"
     }
    },
    {
     "$type": "param",
     "name": "transition",
     "optional": true,
     "text": "The transition to use (a D3 transition instance)\nor create (a key in the {@link #cfg!transitions #transitions} map).\n",
     "type": "d3.transition/String",
     "src": {
      "name": "775,272,39",
      "text": "775,273,8,100",
      "type": "775,272,16"
     }
    }
   ],
   "nameprimary": "alignContent([object Object],[object Object])"
  },
  {
   "name": "alignTo",
   "items": [
    {
     "$type": "param",
     "name": "component",
     "src": {
      "name": "410,2563,0"
     }
    },
    {
     "$type": "param",
     "name": "alignment",
     "src": {
      "name": "410,2563,0"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "src": {
      "name": "410,2563,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "alignTo([object Object],[object Object],[object Object])"
  },
  {
   "name": "applyBind",
   "items": [
    {
     "$type": "param",
     "name": "binds",
     "type": "String/Object",
     "src": {
      "name": "275,548,35",
      "type": "275,548,20"
     }
    },
    {
     "$type": "param",
     "name": "currentBindings",
     "type": "Object",
     "src": {
      "name": "275,549,28",
      "type": "275,549,20"
     }
    },
    {
     "$type": "return",
     "type": "Object",
     "src": {
      "type": "275,550,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "applyBind([object Object],[object Object],[object Object])"
  },
  {
   "name": "applyCentered",
   "items": [
    {
     "$type": "param",
     "name": "centered",
     "type": "Boolean",
     "src": {
      "name": "410,1537,25",
      "type": "410,1537,16"
     }
    },
    {
     "$type": "return",
     "type": "Boolean",
     "src": {
      "type": "410,1538,17"
     }
    }
   ],
   "access": "private",
   "nameprimary": "applyCentered([object Object],[object Object])"
  },
  {
   "name": "applyPlugins",
   "text": "Applier for the `{@link #cfg!plugins plugins}` config property.\n",
   "items": [
    {
     "$type": "param",
     "name": "plugins",
     "text": "The new plugins to use.\n",
     "type": "String[]/Object[]/Ext.plugin.Abstract[]",
     "src": {
      "name": "292,316,61",
      "text": "292,316,69,24",
      "type": "292,316,20"
     }
    },
    {
     "$type": "param",
     "name": "oldPlugins",
     "text": "The existing plugins in use.\n",
     "type": "Ext.plugin.Abstract[]",
     "src": {
      "name": "292,317,43",
      "text": "292,317,54,29",
      "type": "292,317,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "applyPlugins([object Object],[object Object])"
  },
  {
   "name": "applySession",
   "text": "Transforms a Session config to a proper instance.\n",
   "items": [
    {
     "$type": "param",
     "name": "session",
     "type": "Object",
     "src": {
      "name": "275,659,28",
      "type": "275,659,20"
     }
    },
    {
     "$type": "return",
     "type": "Ext.data.Session",
     "src": {
      "type": "275,660,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "applySession([object Object],[object Object])"
  },
  {
   "name": "applyStyle",
   "items": [
    {
     "$type": "param",
     "name": "style",
     "src": {
      "name": "18,1489,0"
     }
    },
    {
     "$type": "param",
     "name": "oldStyle",
     "src": {
      "name": "18,1489,0"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "applyStyle([object Object],[object Object])"
  },
  {
   "name": "applyTpl",
   "items": [
    {
     "$type": "param",
     "name": "tpl",
     "src": {
      "name": "410,2373,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "applyTpl([object Object])"
  },
  {
   "name": "applyViewModel",
   "text": "Transforms a ViewModel config to a proper instance.\n",
   "items": [
    {
     "$type": "param",
     "name": "viewModel",
     "type": "String/Object/Ext.app.ViewModel",
     "src": {
      "name": "275,690,53",
      "type": "275,690,20"
     }
    },
    {
     "$type": "return",
     "type": "Ext.app.ViewModel",
     "src": {
      "type": "275,691,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "applyViewModel([object Object],[object Object])"
  },
  {
   "name": "beforeInitialize",
   "access": "private",
   "nameprimary": "beforeInitialize(undefined)"
  },
  {
   "name": "blur",
   "access": "private",
   "nameprimary": "blur(undefined)"
  },
  {
   "name": "bubble",
   "text": "Bubbles up the {@link #method!getRefOwner} hierarchy, calling the specified function\nwith each component. The scope (`this` reference) of the function call will be the\nscope provided or the current component. The arguments to the function will\nbe the args provided or the current component. If the function returns false at any\npoint, the bubble is stopped.\n",
   "items": [
    {
     "$type": "param",
     "name": "fn",
     "text": "The function to call\n",
     "type": "Function",
     "src": {
      "name": "287,333,26",
      "text": "287,333,29,21",
      "type": "287,333,16"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope of the function. Defaults to current node.\n",
     "type": "Object",
     "src": {
      "name": "287,334,25",
      "text": "287,334,32,53",
      "type": "287,334,16"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "optional": true,
     "text": "The args to call the function with. Defaults to passing the current\ncomponent.\n",
     "type": "Array",
     "src": {
      "name": "287,335,24",
      "text": "287,335,30,68:287,336,8,11",
      "type": "287,335,16"
     }
    }
   ],
   "nameprimary": "bubble([object Object],[object Object],[object Object])"
  },
  {
   "name": "callOverridden",
   "text": "Call the original method that was previously overridden with {@link Ext.Base#static-method!override Ext.Base#override}\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callOverridden();\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n",
   "items": [
    {
     "$type": "param",
     "name": "args",
     "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callOverridden(arguments)`\n",
     "type": "Array/Arguments",
     "src": {
      "name": "46,2098,33",
      "text": "46,2098,38,57:46,2099,8,71",
      "type": "46,2098,16"
     }
    },
    {
     "$type": "return",
     "text": "Returns the result of calling the overridden method\n",
     "type": "Object",
     "src": {
      "text": "46,2100,25,52",
      "type": "46,2100,17"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "callOverridden([object Object],[object Object])"
  },
  {
   "name": "callParent",
   "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function(x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function(x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function() {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function(x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function(x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function(x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
   "items": [
    {
     "$type": "param",
     "name": "args",
     "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
     "type": "Array/Arguments",
     "src": {
      "name": "46,1438,37",
      "text": "46,1438,42,57:46,1439,12,67",
      "type": "46,1438,20"
     }
    },
    {
     "$type": "return",
     "text": "Returns the result of calling the parent method\n",
     "type": "Object",
     "src": {
      "text": "46,1440,29,48",
      "type": "46,1440,21"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "callParent([object Object],[object Object])"
  },
  {
   "name": "callSuper",
   "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function() {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function() {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function() {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
   "items": [
    {
     "$type": "param",
     "name": "args",
     "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
     "type": "Array/Arguments",
     "src": {
      "name": "46,1529,37",
      "text": "46,1529,42,57:46,1530,12,66",
      "type": "46,1529,20"
     }
    },
    {
     "$type": "return",
     "text": "Returns the result of calling the superclass method\n",
     "type": "Object",
     "src": {
      "text": "46,1531,29,52",
      "type": "46,1531,21"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "callSuper([object Object],[object Object])"
  },
  {
   "name": "center",
   "text": "Center this {@link #cfg!floated #cfg-floated} or {@link #isPositioned positioned} Component in its parent.\n",
   "items": [
    {
     "$type": "return",
     "text": "this\n",
     "type": "Ext.Component",
     "src": {
      "text": "410,1103,32,5",
      "type": "410,1103,17"
     }
    }
   ],
   "nameprimary": "center([object Object])"
  },
  {
   "name": "clearDelegatedListeners",
   "text": "Clears all listeners that were attached using the \"delegate\" event option.\nUsers should not invoke this method directly.  It is called automatically as\npart of normal {@link Ext.util.Observable#method!clearListeners clearListeners}\nprocessing.\n",
   "access": "private",
   "nameprimary": "clearDelegatedListeners(undefined)"
  },
  {
   "name": "clearListeners",
   "text": "Removes all listeners for this object including the managed listeners\n",
   "nameprimary": "clearListeners(undefined)"
  },
  {
   "name": "clearManagedListeners",
   "text": "Removes all managed listeners for this object.\n",
   "nameprimary": "clearManagedListeners(undefined)"
  },
  {
   "name": "clearScene",
   "access": "private",
   "nameprimary": "clearScene(undefined)"
  },
  {
   "name": "constructor",
   "text": "Creates new Component.\n",
   "items": [
    {
     "$type": "param",
     "name": "config",
     "text": "The standard configuration object.\n",
     "type": "Object",
     "src": {
      "name": "410,989,24",
      "text": "410,989,31,35",
      "type": "410,989,16"
     }
    }
   ],
   "nameprimary": "constructor([object Object])"
  },
  {
   "name": "createPlugin",
   "text": "Converts the provided type or config object into a plugin instance.\n",
   "items": [
    {
     "$type": "param",
     "name": "config",
     "text": "The plugin type, config\nobject or instance.\n",
     "type": "String/Object/Ext.plugin.Abstract",
     "src": {
      "name": "292,376,55",
      "text": "292,376,62,24:292,377,12,20",
      "type": "292,376,20"
     }
    },
    {
     "$type": "return",
     "type": "Ext.plugin.Abstract",
     "src": {
      "type": "292,378,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "createPlugin([object Object],[object Object])"
  },
  {
   "name": "createRelayer",
   "text": "Creates an event handling function which re-fires the event from this object\nas the passed event name.\n",
   "items": [
    {
     "$type": "param",
     "name": "newName",
     "text": "The name under which to re-fire the passed parameters.\n",
     "type": "String",
     "src": {
      "name": "291,1709,28",
      "text": "291,1709,36,55",
      "type": "291,1709,20"
     }
    },
    {
     "$type": "param",
     "name": "beginEnd",
     "optional": true,
     "text": "The caller can specify on which indices to slice.\n",
     "type": "Array",
     "src": {
      "name": "291,1710,27",
      "optional": "291,1710,37",
      "text": "291,1710,47,50",
      "type": "291,1710,20"
     }
    },
    {
     "$type": "return",
     "type": "Function",
     "src": {
      "type": "291,1711,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "createRelayer([object Object],[object Object],[object Object])"
  },
  {
   "name": "createTransition",
   "text": "Creates a `d3.transition` instance from a named object in the {@link #cfg!transitions #transitions} config.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "text": "The name of the transition in the {@link #cfg!transitions #transitions} config.\n",
     "type": "String",
     "src": {
      "name": "753,307,24",
      "text": "753,307,29,63",
      "type": "753,307,16"
     }
    },
    {
     "$type": "param",
     "name": "selection",
     "optional": true,
     "text": "The selection to create this transition on.\n",
     "type": "d3.selection",
     "src": {
      "name": "753,308,31",
      "text": "753,308,42,44",
      "type": "753,308,16"
     }
    },
    {
     "$type": "return",
     "type": "d3.transition",
     "src": {
      "type": "753,309,17"
     }
    }
   ],
   "nameprimary": "createTransition([object Object],[object Object],[object Object])"
  },
  {
   "name": "destroy",
   "text": "Destroys the Widget. This method should not be overridden in custom Widgets,\nbecause it sets the flags and does final cleanup that must go last. Instead,\noverride {@link #method!doDestroy #doDestroy} method to add functionality at destruction time.\n",
   "nameprimary": "destroy(undefined)"
  },
  {
   "name": "destroyMembers",
   "text": "Destroys member properties by name.\n\nIf a property name is the name of a *config*, the getter is *not* invoked, so\nif the config has not been initialized, nothing will be done.\n\nThe property will be destroyed, and the corrected name (if the property is a *config*\nand config names are prefixed) will set to `null` in this object's dictionary.\n",
   "items": [
    {
     "$type": "param",
     "name": "args",
     "text": "One or more names of the properties to destroy and remove from\nthe object.\n",
     "type": "String...",
     "src": {
      "name": "46,1715,31",
      "text": "46,1715,36,63:46,1716,12,12",
      "type": "46,1715,20"
     }
    }
   ],
   "nameprimary": "destroyMembers([object Object])"
  },
  {
   "name": "destroyPlugin",
   "text": "Removes and destroys a plugin.\n\n**Note:** Not all plugins are designed to be removable. Consult the documentation\nfor the specific plugin in question to be sure.\n",
   "items": [
    {
     "$type": "param",
     "name": "plugin",
     "text": "The plugin or its `{@link #cfg!id id}` to remove.\n",
     "type": "String/Ext.plugin.Abstract",
     "src": {
      "name": "292,142,44",
      "text": "292,142,51,34",
      "type": "292,142,16"
     }
    },
    {
     "$type": "return",
     "text": "plugin instance or `null` if not found.\n",
     "type": "Ext.plugin.Abstract",
     "src": {
      "text": "292,143,38,40",
      "type": "292,143,17"
     }
    }
   ],
   "nameprimary": "destroyPlugin([object Object],[object Object])"
  },
  {
   "name": "disable",
   "text": "Disables this Component\n",
   "nameprimary": "disable(undefined)"
  },
  {
   "name": "doAddListener",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "src": {
      "name": "18,1850,0"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "src": {
      "name": "18,1850,0"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "src": {
      "name": "18,1850,0"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "src": {
      "name": "18,1850,0"
     }
    },
    {
     "$type": "param",
     "name": "order",
     "src": {
      "name": "18,1850,0"
     }
    },
    {
     "$type": "param",
     "name": "caller",
     "src": {
      "name": "18,1850,0"
     }
    },
    {
     "$type": "param",
     "name": "manager",
     "src": {
      "name": "18,1850,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "doAddListener([object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "doDestroy",
   "text": "Perform the actual destruction sequence. This is the method to override in your\nsubclasses to add steps specific to the destruction of custom Component.\n\nIf the Component is currently added to a Container it will first be removed\nfrom that Container. All {@link Ext.dom.Element Ext.Element} references are also deleted and\nthe Component is de-registered from {@link Ext.ComponentManager}.\n\nAs a rule of thumb, subclasses should destroy their child Components, Elements,\nand/or other objects before calling parent method. Any object references will be\nnulled after this method has finished, to prevent the possibility of memory leaks.\n",
   "nameprimary": "doDestroy(undefined)"
  },
  {
   "name": "doFireDelegatedEvent",
   "text": "Fires a delegated event.  Users should not invoke this method directly.  It\nis called automatically by the framework as needed (see the \"delegate\" event\noption of {@link Ext.util.Observable#method!addListener addListener} for more\ndetails.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "src": {
      "name": "277,91,0"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "src": {
      "name": "277,91,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "doFireDelegatedEvent([object Object],[object Object])"
  },
  {
   "name": "doFireEvent",
   "text": "Continue to fire event.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "type": "String",
     "src": {
      "name": "291,861,28",
      "type": "291,861,20"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "type": "Array",
     "src": {
      "name": "291,862,27",
      "type": "291,862,20"
     }
    },
    {
     "$type": "param",
     "name": "bubbles",
     "type": "Boolean",
     "src": {
      "name": "291,863,29",
      "type": "291,863,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "doFireEvent([object Object],[object Object],[object Object])"
  },
  {
   "name": "doInheritUi",
   "access": "private",
   "nameprimary": "doInheritUi(undefined)"
  },
  {
   "name": "doUninheritUi",
   "access": "private",
   "nameprimary": "doUninheritUi(undefined)"
  },
  {
   "name": "enable",
   "text": "Enables this Component\n",
   "nameprimary": "enable(undefined)"
  },
  {
   "name": "enableBubble",
   "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling\n`this.getBubbleTarget()` if present. There is no implementation in the Observable\nbase class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee {@link Ext.Component#getBubbleTarget}. The default implementation in Ext.Component\nreturns the Component's immediate owner. But if a known target is required, this can be\noverridden to access the required target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable\n        // the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
   "items": [
    {
     "$type": "param",
     "name": "eventNames",
     "text": "The event name to bubble, or an Array of event names.\n",
     "type": "String/String[]",
     "src": {
      "name": "291,1758,37",
      "text": "291,1758,48,54",
      "type": "291,1758,20"
     }
    }
   ],
   "nameprimary": "enableBubble([object Object])"
  },
  {
   "name": "findFloatParent",
   "text": "The method finds this floated component's floatParent. That means a DOM positioning\ncontainer which acts as a root element for sibling floated components, and allows allows\nfloated components to be absolutely positioned, and their encapsulating elements to be\nreordered to produce a visual stacking effect.\n\nThis component's element is appended to its floatParent.\n\nThere is a global floatParent element, created on demand when the first top level\nfloated component is shown. This may be an item child of a container configured with\n`{@link #cfg!floated #cfg-floated}: true`, or a free `{@link #cfg!floated floated}` component which is programatically\n{@link Ext.Component#show shown}.\n\nChild items of components inside a floated component may also be configured `{@link #cfg!floated floated}`.\nThese are give a floatParent which is created on demand wrapping the nearest `{@link #cfg!floated floated}`\nancestor. This means that when that ancestor's element is brought to the top of the\nstack (by moving its element to the end of its own floatParent), the descendant elements\nwill automatically remain above.\n",
   "items": [
    {
     "$type": "param",
     "name": "needsShow",
     "src": {
      "name": "689,1303,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "findFloatParent([object Object])"
  },
  {
   "name": "findFocusTarget",
   "text": "Finds an alternate Component to focus if this Component is disabled while focused, or\nfocused while disabled, or otherwise unable to focus.\n\nIn both cases, focus must not be lost to document.body, but must move to an intuitively\nconnectible Component, either a sibling, or uncle or nephew.\n\nThis is both for the convenience of keyboard users, and also for when focus is tracked\nwithin a Component tree such as for ComboBoxes and their dropdowns.\n\nFor example, a ComboBox with a PagingToolbar in is BoundList. If the \"Next Page\"\nbutton is hit, the LoadMask shows and focuses, the next page is the last page, so\nthe \"Next Page\" button is disabled. When the LoadMask hides, it attempt to focus the\nlast focused Component which is the disabled \"Next Page\" button. In this situation,\nfocus should move to a sibling within the PagingToolbar.\n",
   "items": [
    {
     "$type": "return",
     "text": "A closely related focusable Component to which focus can move.\n",
     "type": "Ext.Component",
     "src": {
      "text": "283,699,36,63",
      "type": "283,699,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "findFocusTarget([object Object])"
  },
  {
   "name": "findPlugin",
   "text": "Retrieves plugin by its `type` alias. For example:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['listpaging', 'pullrefresh']\n     });\n\n     list.findPlugin('pullrefresh').setPullRefreshText('Pull to refresh...');\n\n**Note:** See also {@link #method!getPlugin #getPlugin}.\n",
   "items": [
    {
     "$type": "param",
     "name": "type",
     "text": "The Plugin's `type` as specified by the class's\n{@link Ext.Class#cfg!alias alias} configuration.\n",
     "type": "String",
     "src": {
      "name": "292,165,24",
      "text": "292,165,29,48:292,166,8,49",
      "type": "292,165,16"
     }
    },
    {
     "$type": "return",
     "text": "plugin instance or `null` if not found.\n",
     "type": "Ext.plugin.Abstract",
     "src": {
      "text": "292,167,38,40",
      "type": "292,167,17"
     }
    }
   ],
   "nameprimary": "findPlugin([object Object],[object Object])"
  },
  {
   "name": "fireAction",
   "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n`{@link Ext.util.Observable#method!addListener addListener}`), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to fire.\n",
     "type": "String",
     "src": {
      "name": "291,738,28",
      "text": "291,738,38,31",
      "type": "291,738,20"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "text": "Arguments to pass to handlers and to the action function.\n",
     "type": "Array",
     "src": {
      "name": "291,739,27",
      "text": "291,739,32,58",
      "type": "291,739,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "text": "The action function.\n",
     "type": "Function",
     "src": {
      "name": "291,740,30",
      "text": "291,740,33,21",
      "type": "291,740,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
     "type": "Object",
     "src": {
      "name": "291,741,29",
      "text": "291,741,36,62:291,742,12,72",
      "type": "291,741,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "Event options for the action function.  Accepts any\nof the options of `{@link Ext.util.Observable#method!addListener addListener}`\n",
     "type": "Object",
     "src": {
      "name": "291,743,29",
      "text": "291,743,38,52:291,744,12,72",
      "type": "291,743,20"
     }
    },
    {
     "$type": "param",
     "name": "order",
     "optional": true,
     "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof `{@link Ext.util.Observable#method!addListener addListener}` for more details.\n",
     "type": "String",
     "value": "'before'",
     "src": {
      "name": "291,745,29",
      "text": "291,745,45,47:291,746,12,394",
      "type": "291,745,20",
      "value": "291,745,35"
     }
    }
   ],
   "nameprimary": "fireAction([object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "fireEvent",
   "text": "Fires the specified event with the passed parameters (minus the event name, plus\nthe `options` object passed to {@link Ext.util.Observable#method!addListener addListener}).\n\nAn event may be set to bubble up an Observable parent hierarchy (See\n{@link Ext.Component#getBubbleTarget}) by calling {@link #method!enableBubble #enableBubble}.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to fire.\n",
     "type": "String",
     "src": {
      "name": "291,658,28",
      "text": "291,658,38,31",
      "type": "291,658,20"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "text": "Variable number of parameters are passed to handlers.\n",
     "type": "Object...",
     "src": {
      "name": "291,659,31",
      "text": "291,659,36,54",
      "type": "291,659,20"
     }
    },
    {
     "$type": "return",
     "text": "returns false if any of the handlers return false otherwise it\nreturns true.\n",
     "type": "Boolean",
     "src": {
      "text": "291,660,30,63:291,661,12,14",
      "type": "291,660,21"
     }
    }
   ],
   "nameprimary": "fireEvent([object Object],[object Object],[object Object])"
  },
  {
   "name": "fireEventArgs",
   "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy\n(See {@link Ext.Component#getBubbleTarget}) by calling {@link #method!enableBubble #enableBubble}.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to fire.\n",
     "type": "String",
     "src": {
      "name": "291,699,28",
      "text": "291,699,38,31",
      "type": "291,699,20"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "text": "An array of parameters which are passed to handlers.\n",
     "type": "Object[]",
     "src": {
      "name": "291,700,30",
      "text": "291,700,35,53",
      "type": "291,700,20"
     }
    },
    {
     "$type": "return",
     "text": "returns false if any of the handlers return false otherwise\nit returns true.\n",
     "type": "Boolean",
     "src": {
      "text": "291,701,30,60:291,702,12,17",
      "type": "291,701,21"
     }
    }
   ],
   "nameprimary": "fireEventArgs([object Object],[object Object],[object Object])"
  },
  {
   "name": "fireEventedAction",
   "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to fire.\n",
     "type": "String",
     "src": {
      "name": "291,821,28",
      "text": "291,821,38,31",
      "type": "291,821,20"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "text": "Arguments to pass to handlers and to the action function.\n",
     "type": "Array",
     "src": {
      "name": "291,822,27",
      "text": "291,822,32,58",
      "type": "291,822,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "text": "The action function.\n",
     "type": "Function/String",
     "src": {
      "name": "291,823,37",
      "text": "291,823,40,21",
      "type": "291,823,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
     "type": "Object",
     "src": {
      "name": "291,824,29",
      "text": "291,824,36,62:291,825,12,72",
      "type": "291,824,20"
     }
    },
    {
     "$type": "param",
     "name": "fnArgs",
     "optional": true,
     "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
     "type": "Array/Boolean",
     "src": {
      "name": "291,826,36",
      "text": "291,826,44,47:291,827,12,201",
      "type": "291,826,20"
     }
    },
    {
     "$type": "return",
     "type": "Boolean",
     "src": {
      "type": "291,851,0"
     }
    }
   ],
   "nameprimary": "fireEventedAction([object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "focus",
   "text": "Try to focus this component.\n\nIf this component is disabled or otherwise not focusable, a close relation\nwill be targeted for focus instead to keep focus localized for keyboard users.\n",
   "items": [
    {
     "$type": "param",
     "name": "selectText",
     "optional": true,
     "text": "If applicable, `true` to also select all the text\nin this component, or an array consisting of start and end (defaults to start)\nposition of selection.\n",
     "type": "Boolean/Number[]",
     "src": {
      "name": "283,257,35",
      "text": "283,257,47,50:283,258,8,103",
      "type": "283,257,16"
     }
    },
    {
     "$type": "return",
     "text": "`true` if focus target was found and focusing was attempted,\n`false` if no focusing attempt was made.\n",
     "type": "Boolean",
     "src": {
      "text": "283,261,26,61:283,262,8,41",
      "type": "283,261,17"
     }
    }
   ],
   "nameprimary": "focus([object Object],[object Object])"
  },
  {
   "name": "getAlignmentInfo",
   "text": "Prepares information on aligning this to component using alignment.\nAlso checks to see if this is already aligned to component according to alignment.\n",
   "items": [
    {
     "$type": "param",
     "name": "component",
     "src": {
      "name": "689,589,0"
     }
    },
    {
     "$type": "param",
     "name": "alignment",
     "src": {
      "name": "689,589,0"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "getAlignmentInfo([object Object],[object Object])"
  },
  {
   "name": "getAlignRegion",
   "items": [
    {
     "$type": "param",
     "name": "component",
     "src": {
      "name": "689,721,0"
     }
    },
    {
     "$type": "param",
     "name": "alignment",
     "src": {
      "name": "689,721,0"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "src": {
      "name": "689,721,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getAlignRegion([object Object],[object Object],[object Object])"
  },
  {
   "name": "getAriaLabelEl",
   "text": "Find component(s) that label or describe this component,\nand return the id(s) of their ariaEl elements.\n",
   "items": [
    {
     "$type": "param",
     "name": "reference",
     "optional": true,
     "text": "Component reference,\nor array of component references, or a function that should return\nthe proper attribute string. The function will be called in the\ncontext of the labelled component.\n",
     "type": "Function/String/String[]",
     "src": {
      "name": "274,85,47",
      "text": "274,85,58,21:274,86,12,167",
      "type": "274,85,20"
     }
    },
    {
     "$type": "return",
     "text": "Element id string, or null\n",
     "type": "Ext.dom.Element",
     "src": {
      "text": "274,90,34,27",
      "type": "274,90,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getAriaLabelEl([object Object],[object Object])"
  },
  {
   "name": "getBubbleParent",
   "text": "Gets the bubbling parent for an Observable\n",
   "items": [
    {
     "$type": "return",
     "text": "The bubble parent. null is returned if\nno bubble target exists\n",
     "type": "Ext.util.Observable",
     "src": {
      "text": "291,897,42,39:291,898,12,24",
      "type": "291,897,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getBubbleParent([object Object])"
  },
  {
   "name": "getClassCls",
   "access": "private",
   "nameprimary": "getClassCls(undefined)"
  },
  {
   "name": "getConfig",
   "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "optional": true,
     "text": "The name of the config property to get.\n",
     "type": "String",
     "src": {
      "name": "46,1660,29",
      "text": "46,1660,35,40",
      "type": "46,1660,20"
     }
    },
    {
     "$type": "param",
     "name": "peek",
     "optional": true,
     "text": "`true` to peek at the raw value without calling the getter.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "46,1661,30",
      "text": "46,1661,42,60",
      "type": "46,1661,20",
      "value": "46,1661,35"
     }
    },
    {
     "$type": "param",
     "name": "ifInitialized",
     "optional": true,
     "text": "`true` to only return the initialized property\nvalue, not the raw config value, and *not* to trigger initialization. Returns\n`undefined` if the property has not yet been initialized.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "46,1662,30",
      "text": "46,1662,51,47:46,1663,12,136",
      "type": "46,1662,20",
      "value": "46,1662,44"
     }
    },
    {
     "$type": "return",
     "text": "The config property value.\n",
     "type": "Object",
     "src": {
      "text": "46,1665,29,27",
      "type": "46,1665,21"
     }
    }
   ],
   "nameprimary": "getConfig([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "getController",
   "text": "Returns the {@link Ext.app.ViewController} instance associated with this\ncomponent via the {@link #cfg!controller #controller} config or {@link #setController} method.\n",
   "items": [
    {
     "$type": "return",
     "text": "Returns this component's ViewController or\nnull if one was not configured\n",
     "type": "Ext.app.ViewController",
     "src": {
      "text": "275,82,45,43:275,83,12,31",
      "type": "275,82,21"
     }
    }
   ],
   "nameprimary": "getController([object Object])"
  },
  {
   "name": "getCurrentAlignmentInfo",
   "text": "Current Alignment information from the last alignTo call\n",
   "access": "private",
   "nameprimary": "getCurrentAlignmentInfo(undefined)"
  },
  {
   "name": "getCurrentConfig",
   "access": "private",
   "nameprimary": "getCurrentConfig(undefined)"
  },
  {
   "name": "getDefs",
   "text": "SVG ['defs'](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs) element\nas a D3 selection.\n",
   "items": [
    {
     "$type": "return",
     "type": "d3.selection",
     "src": {
      "type": "775,510,17"
     }
    }
   ],
   "nameprimary": "getDefs([object Object])"
  },
  {
   "name": "getElementConfig",
   "text": "A template method for modifying the {@link #property!element #element} config before it is processed.\nBy default adds the result of `this.getTemplate()` as the `children` array of\n{@link #property!element #element} if `children` were not specified in the original\n{@link #property!element #element} config.  Typically this method should not need to be implemented\nin subclasses.  Instead the {@link #property!element #element} property should be use to configure\nthe element template for a given Widget subclass.\n\nThis method is called once when the first instance of each Widget subclass is\ncreated.  The element config object that is returned is cached and used as the template\nfor all successive instances.  The scope object for this method is the class prototype,\nnot the instance.\n",
   "items": [
    {
     "$type": "return",
     "text": "the element config object\n",
     "type": "Object",
     "src": {
      "text": "18,889,25,26",
      "type": "18,889,17"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "getElementConfig([object Object])"
  },
  {
   "name": "getFloatParent",
   "text": "*For {@link #cfg!floated #cfg-floated} components only. *\n\nFinds the owning {@link #cfg!floated #cfg-floated} component (if any) responsible for\nthe base z-index stack position of this compoonent, and, if that component\nis {@link #cfg!relative #cfg-relative}, for the coordinate system in which this component\nis positioned.\n\nIf this is a top level floated component, this method will return `null`\n",
   "items": [
    {
     "$type": "return",
     "text": "The owning floated component or `null` if this\ncomponent is top level floated.\n",
     "type": "Ext.Component",
     "src": {
      "text": "689,1228,36,47:689,1229,12,32",
      "type": "689,1228,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getFloatParent([object Object])"
  },
  {
   "name": "getFloatWrap",
   "text": "This method returns, or creates on demand the floatWrap element which wraps the passed\nfloated component. It enables that floated component to act as a host for descendant\nfloated components.\n",
   "items": [
    {
     "$type": "return",
     "text": "The passed component's floatWrap element.\n",
     "type": "Ext.dom.Element",
     "src": {
      "text": "689,1332,34,42",
      "type": "689,1332,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getFloatWrap([object Object])"
  },
  {
   "name": "getFocusClsEl",
   "text": "Returns the element used to apply focus styling CSS class when Focusable's\n{@link #property!focusEl #focusEl} becomes focused. By default it is {@link #property!focusEl #focusEl}.\n",
   "items": [
    {
     "$type": "param",
     "name": "focusEl",
     "optional": true,
     "text": "Return focus styling element for the given\nfocused element. This is used by Components implementing multiple focusable\nelements.\n",
     "type": "Ext.dom.Element",
     "src": {
      "name": "283,127,34",
      "text": "283,127,43,43:283,128,8,87",
      "type": "283,127,16"
     }
    },
    {
     "$type": "return",
     "text": "The focus styling element.\n",
     "type": "Ext.dom.Element",
     "src": {
      "text": "283,131,34,27",
      "type": "283,131,17"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "getFocusClsEl([object Object],[object Object])"
  },
  {
   "name": "getFocusEl",
   "text": "Returns the main focus holder element associated with this Focusable, i.e.\nthe element that will be focused when Focusable's {@link #method!focus} method is\ncalled. For most Focusables, this will be the {@link #property!focusEl #focusEl}.\n",
   "items": [
    {
     "$type": "return",
     "type": "Ext.dom.Element",
     "src": {
      "type": "283,114,17"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "getFocusEl([object Object])"
  },
  {
   "name": "getId",
   "text": "Retrieves the `id`. This method Will auto-generate an id if one has not already\nbeen configured.\n",
   "items": [
    {
     "$type": "return",
     "text": "id\n",
     "type": "String",
     "src": {
      "text": "286,17,25,3",
      "type": "286,17,17"
     }
    }
   ],
   "nameprimary": "getId([object Object])"
  },
  {
   "name": "getInherited",
   "text": "This method returns an object containing the inherited properties for this instance.\n",
   "items": [
    {
     "$type": "param",
     "name": "inner",
     "optional": true,
     "text": "Pass `true` to return `inheritedStateInner` instead\nof the normal `inheritedState` object. This is only needed internally and should\nnot be passed by user code.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "287,88,26",
      "text": "287,88,39,52:287,89,8,110",
      "type": "287,88,16",
      "value": "287,88,32"
     }
    },
    {
     "$type": "return",
     "text": "The `inheritedState` object containing inherited properties.\n",
     "type": "Object",
     "src": {
      "text": "287,92,25,61",
      "type": "287,92,17"
     }
    }
   ],
   "nameprimary": "getInherited([object Object],[object Object])"
  },
  {
   "name": "getInheritedConfig",
   "text": "This method returns the value of a config property that may be inherited from some\nancestor.\n\nIn some cases, a config may be explicitly set on a component with the intent of\n*only* being presented to its children while that component should act upon the\ninherited value (see `referenceHolder` for example). In these cases the `skipThis`\nparameter should be specified as `true`.\n",
   "items": [
    {
     "$type": "param",
     "name": "property",
     "text": "The name of the config property to return.\n",
     "type": "String",
     "src": {
      "name": "287,151,24",
      "text": "287,151,33,43",
      "type": "287,151,16"
     }
    },
    {
     "$type": "param",
     "name": "skipThis",
     "optional": true,
     "text": "Pass `true` if the property should be ignored if\nfound on this instance. In other words, `true` means the property must be inherited\nand not explicitly set on this instance.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "287,152,26",
      "text": "287,152,42,49:287,153,8,125",
      "type": "287,152,16",
      "value": "287,152,35"
     }
    },
    {
     "$type": "return",
     "text": "The value of the requested `property`.\n",
     "type": "Mixed",
     "src": {
      "text": "287,155,24,39",
      "type": "287,155,17"
     }
    }
   ],
   "nameprimary": "getInheritedConfig([object Object],[object Object],[object Object])"
  },
  {
   "name": "getInitialConfig",
   "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "optional": true,
     "text": "Name of the config option to return.\n",
     "type": "String",
     "src": {
      "name": "46,1906,29",
      "text": "46,1906,35,37",
      "type": "46,1906,20"
     }
    },
    {
     "$type": "return",
     "text": "The full config object or a single config value\nwhen `{@link #cfg!name name}` parameter specified.\n",
     "type": "Object/Mixed",
     "src": {
      "text": "46,1907,35,48:46,1908,12,33",
      "type": "46,1907,21"
     }
    }
   ],
   "nameprimary": "getInitialConfig([object Object],[object Object])"
  },
  {
   "name": "getModalSibling",
   "text": "Returns the topmost modal floated component (other then this one).\n",
   "access": "private",
   "nameprimary": "getModalSibling(undefined)"
  },
  {
   "name": "getPlugin",
   "text": "Retrieves a plugin by its `id`.\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: [{\n             type: 'pullrefresh',\n             id: 'foo'\n         }]\n     });\n\n     list.getPlugin('foo').setPullRefreshText('Pull to refresh...');\n\n**Note:** See also {@link #method!findPlugin #findPlugin}.\n",
   "items": [
    {
     "$type": "param",
     "name": "id",
     "text": "The `{@link #cfg!id id}` of the plugin.\n",
     "type": "String",
     "src": {
      "name": "292,206,24",
      "text": "292,206,27,24",
      "type": "292,206,16"
     }
    },
    {
     "$type": "return",
     "text": "plugin instance or `null` if not found.\n",
     "type": "Ext.plugin.Abstract",
     "src": {
      "text": "292,207,38,40",
      "type": "292,207,17"
     }
    }
   ],
   "nameprimary": "getPlugin([object Object],[object Object])"
  },
  {
   "name": "getRefOwner",
   "text": "Used by {@link Ext.ComponentQuery}, and the {@link Ext.Component#method!up up}\nmethod to find the owning Component in the linkage hierarchy.\n\nBy default this returns the Container which contains this Component.\n\nThis may be overridden by Component authors who implement ownership hierarchies\nwhich are not based upon ownerCt, such as BoundLists being owned by Fields or Menus\nbeing owned by Buttons.\n",
   "access": "protected",
   "nameprimary": "getRefOwner(undefined)"
  },
  {
   "name": "getRenderTarget",
   "text": "Returns the element into which the html content and items should be rendered.\nThis defaults to the `bodyElement` but derived classes can override this method\nto use a different element.\n\nFor containers his only applies to `inner` items, not `{@link #cfg!docked docked}` items. The\n`{@link #property!positioned positioned}` items are rendered to the element returned by the\n{@link Ext.Container#getPositionedItemTarget method.\n",
   "items": [
    {
     "$type": "return",
     "type": "Ext.dom.Element",
     "src": {
      "type": "410,3007,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getRenderTarget([object Object])"
  },
  {
   "name": "getScene",
   "text": "Get the scene element as a D3 selection.\nIf the scene doesn't exist, it will be created.\n",
   "items": [
    {
     "$type": "return",
     "type": "d3.selection",
     "src": {
      "type": "775,391,17"
     }
    }
   ],
   "nameprimary": "getScene([object Object])"
  },
  {
   "name": "getScrollableClientRegion",
   "text": "This method is required by the Scroller to return the scrollable client region\n",
   "items": [
    {
     "$type": "return",
     "text": "The scrolling viewport region.\n",
     "type": "Ext.util.Region",
     "src": {
      "text": "410,1354,34,31",
      "type": "410,1354,17"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getScrollableClientRegion([object Object])"
  },
  {
   "name": "getSize",
   "text": "Returns the height and width of the Component.\n",
   "items": [
    {
     "$type": "return",
     "text": "The current `{@link #cfg!height height}` and `{@link #cfg!width width}` of the Component.\n",
     "type": "Object",
     "items": [
      {
       "$type": "property",
       "name": "width",
       "type": "Number",
       "src": {
        "name": "18,908,32",
        "type": "18,908,17"
       }
      },
      {
       "$type": "property",
       "name": "height",
       "type": "Number",
       "src": {
        "name": "18,909,32",
        "type": "18,909,17"
       }
      }
     ],
     "src": {
      "text": "18,907,25,51",
      "type": "18,907,17"
     }
    }
   ],
   "nameprimary": "getSize([object Object])"
  },
  {
   "name": "getStateBuilder",
   "text": "Creates a state builder to access or edit this instance's state object. If this\ninstance has a `{@link #method!getStatefulOwner}`, the returned\nbuilder will have a `parent` reference that owner's state builder. This can be\nan arbitrarily deep chain but does proceed all the way up to the root instance\n(with no owner) since that is the instance that determines the ultimate state\nstorage key.\n",
   "items": [
    {
     "$type": "param",
     "name": "cache",
     "optional": true,
     "text": "Pass `true` to return a cached builder.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "668,327,30",
      "text": "668,327,43,40",
      "type": "668,327,20",
      "value": "668,327,36"
     }
    },
    {
     "$type": "return",
     "type": "Ext.state.Builder",
     "src": {
      "type": "668,328,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getStateBuilder([object Object],[object Object])"
  },
  {
   "name": "getStatefulOwner",
   "text": "This method allows a class to specify an owning stateful object. This is used by\n{@link Ext.plugin.Abstract} to save their state as part of their owning\n{@link Ext.Component}.\n\nThe return value can be either a `Stateful` object or an array whose first element is\na `Stateful` object. This object's state will be stored inside the state object of\nthe returned `Stateful` object. If an array is returned, the elements beyond the first\nare sub-keys in the state object.\n\nFor example, {@link Ext.plugin.Abstract} implement this method like so:\n\n     getStatefulOwner: function() {\n         return [ this.cmp, 'plugins' ];\n     }\n\nThe effect of this is to produce a state object like so:\n\n     {\n         plugins: {\n             pluginId1: {\n                 //...\n             }\n         }\n     }\n\nIn order for a child object's state to be saved and restored, all of its parents must\nalso be stateful (i.e., have a `{@link #cfg!stateId stateId}`).\n",
   "items": [
    {
     "$type": "return",
     "type": "Ext.state.Stateful/Array",
     "src": {
      "type": "668,147,17"
     }
    }
   ],
   "access": "private",
   "nameprimary": "getStatefulOwner([object Object])"
  },
  {
   "name": "getTabIndex",
   "text": "Return the actual tabIndex for this Focusable.\n",
   "items": [
    {
     "$type": "return",
     "text": "tabIndex attribute value\n",
     "type": "Number",
     "src": {
      "text": "283,396,25,25",
      "type": "283,396,17"
     }
    }
   ],
   "nameprimary": "getTabIndex([object Object])"
  },
  {
   "name": "getXTypes",
   "text": "Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all\navailable xtypes, see the {@link Ext.Component} header.\n\n__Note:__ If using your own subclasses, be aware that a Component must register its own xtype\nto participate in determination of inherited xtypes.\n\nExample usage:\n\n    var t = new Ext.field.Text();\n    alert(t.getXTypes());  // alerts 'component/field/textfield'\n",
   "items": [
    {
     "$type": "return",
     "text": "The xtype hierarchy string.\n",
     "type": "String",
     "src": {
      "text": "410,2472,25,28",
      "type": "410,2472,17"
     }
    }
   ],
   "nameprimary": "getXTypes([object Object])"
  },
  {
   "name": "handleBlurEvent",
   "items": [
    {
     "$type": "param",
     "name": "info",
     "src": {
      "name": "283,855,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "handleBlurEvent([object Object])"
  },
  {
   "name": "handleFocusEvent",
   "items": [
    {
     "$type": "param",
     "name": "info",
     "src": {
      "name": "283,828,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "handleFocusEvent([object Object])"
  },
  {
   "name": "hasCls",
   "text": "Checks if the specified CSS class exists on this element's DOM node.\n",
   "items": [
    {
     "$type": "param",
     "name": "className",
     "text": "The CSS class to check for.\n",
     "type": "String",
     "src": {
      "name": "18,1365,24",
      "text": "18,1365,34,28",
      "type": "18,1365,16"
     }
    },
    {
     "$type": "return",
     "text": "`true` if the class exists, else `false`.\n",
     "type": "Boolean",
     "src": {
      "text": "18,1366,26,42",
      "type": "18,1366,17"
     }
    }
   ],
   "nameprimary": "hasCls([object Object],[object Object])"
  },
  {
   "name": "hasConfig",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "type": "String",
     "src": {
      "name": "46,1870,28",
      "type": "46,1870,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "hasConfig([object Object])"
  },
  {
   "name": "hasListener",
   "text": "Checks to see if this object has any listeners for a specified event, or whether\nthe event bubbles. The answer indicates whether the event needs firing or not.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to check for\n",
     "type": "String",
     "src": {
      "name": "291,1501,28",
      "text": "291,1501,38,35",
      "type": "291,1501,20"
     }
    },
    {
     "$type": "return",
     "text": "`true` if the event is being listened for or bubbles, else `false`\n",
     "type": "Boolean",
     "src": {
      "text": "291,1502,30,67",
      "type": "291,1502,21"
     }
    }
   ],
   "nameprimary": "hasListener([object Object],[object Object])"
  },
  {
   "name": "hide",
   "text": "Hides this Component optionally using an animation.\n",
   "items": [
    {
     "$type": "param",
     "name": "animation",
     "optional": true,
     "text": "You can specify an animation here or a bool to use the\n{@link #cfg!hideAnimation #hideAnimation} config.\n",
     "type": "Object/Boolean",
     "src": {
      "name": "410,1902,33",
      "text": "410,1902,44,55:410,1903,8,31",
      "type": "410,1902,16"
     }
    },
    {
     "$type": "return",
     "type": "Ext.Component",
     "src": {
      "type": "410,1904,17"
     }
    }
   ],
   "nameprimary": "hide([object Object],[object Object])"
  },
  {
   "name": "hideMask",
   "access": "private",
   "nameprimary": "hideMask(undefined)"
  },
  {
   "name": "initBindable",
   "text": "This method triggers the lazy configs and must be called when it is time to\nfully boot up. The configs that must be initialized are: `{@link #cfg!bind bind}`, `{@link #cfg!publishes publishes}`,\n`{@link #cfg!session session}`, `{@link #cfg!twoWayBindable twoWayBindable}` and `{@link #cfg!viewModel viewModel}`.\n",
   "access": "private",
   "nameprimary": "initBindable(undefined)"
  },
  {
   "name": "initConfig",
   "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
   "items": [
    {
     "$type": "param",
     "name": "instanceConfig",
     "type": "Object",
     "src": {
      "name": "46,1640,28",
      "type": "46,1640,20"
     }
    },
    {
     "$type": "return",
     "text": "this\n",
     "type": "Ext.Base",
     "src": {
      "text": "46,1641,31,5",
      "type": "46,1641,21"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "initConfig([object Object],[object Object])"
  },
  {
   "name": "initDragConstraints",
   "text": "This method is called when a drag is initializing. This method should adjust the\ndrag constraints to ensure all drag movements are properly restricted. See\n{@link Ext.drag.Source#cfg!constrain Ext.drag.Source#constrain}.\n",
   "items": [
    {
     "$type": "param",
     "name": "draggable",
     "type": "Ext.drag.Source",
     "src": {
      "name": "410,2483,33",
      "type": "410,2483,16"
     }
    }
   ],
   "nameprimary": "initDragConstraints([object Object])"
  },
  {
   "name": "initElement",
   "text": "Initializes the Element for this Widget instance.  If this is the first time a\nWidget of this type has been instantiated the {@link #property!element #element} config will be\nprocessed to create an Element.  This Element is then cached on the prototype (see\nafterCachedConfig) so that future instances can obtain their element by simply\ncloning the Element that was cached by the first instance.\n",
   "access": "protected",
   "nameprimary": "initElement(undefined)"
  },
  {
   "name": "initElementListeners",
   "text": "Called for the first instance of this Widget to create an object that contains the\nlistener configs for all of the element references keyed by reference name. The\nobject is cached on the prototype and has the following shape:\n\n    _elementListeners: {\n        element: {\n            click: 'onClick',\n            scope: this\n        },\n        fooReference: {\n            tap: {\n                fn: someFunction,\n                delay: 100\n            }\n        }\n    }\n\nThe returned object is prototype chained to the _elementListeners object of its\nsuperclass, and each key in the object is prototype chained to object with the\ncorresponding key in the superclass _elementListeners.  This allows element\nlisteners to be inherited and overridden when subclassing widgets.\n\nThis method is invoked with the prototype object as the scope\n",
   "items": [
    {
     "$type": "param",
     "name": "elementConfig",
     "src": {
      "name": "18,1943,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "initElementListeners([object Object])"
  },
  {
   "name": "initFocusableElement",
   "text": "Sets up the focus listener on this Component's {@link #method!getFocusEl focusEl} if it has one.\n\nForm Components which must implicitly participate in tabbing order usually have\na naturally focusable element as their {@link #method!getFocusEl focusEl}, and it is\nthe DOM event of that receiving focus which drives the Component's `{@link #method!onFocus onFocus}` handling,\nand the DOM event of it being blurred which drives the `{@link #method!onBlur onBlur}` handling.\n",
   "items": [
    {
     "$type": "param",
     "name": "force",
     "src": {
      "name": "283,772,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "initFocusableElement([object Object])"
  },
  {
   "name": "initFocusableEvents",
   "text": "Template method to do any event listener initialization for a Focusable.\nThis generally happens after the focusEl is available.\n",
   "items": [
    {
     "$type": "param",
     "name": "force",
     "src": {
      "name": "283,150,0"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "initFocusableEvents([object Object])"
  },
  {
   "name": "initialize",
   "text": "Allows addition of behavior to the rendering phase.\n",
   "access": "protected",
   "nameprimary": "initialize(undefined)"
  },
  {
   "name": "initInheritedState",
   "text": "Called by `{@link #method!getInherited getInherited}` to initialize the inheritedState the first time it is requested.\n",
   "items": [
    {
     "$type": "param",
     "name": "inheritedState",
     "src": {
      "name": "410,1302,0"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "initInheritedState([object Object])"
  },
  {
   "name": "initKeyMap",
   "text": "This method should be called when the instance is ready to start listening for\nkeyboard events. This is called automatically for `{@link Ext.Component}` and derived\nclasses. This is done after the component is rendered.\n",
   "access": "protected",
   "nameprimary": "initKeyMap(undefined)"
  },
  {
   "name": "initUiReference",
   "text": "Initializes a \"uiReference\".  Ui rerefences are reference elements that have\nclassCls and ui info in their CSS class names.  They can be used by setting\nuiCls in the template, or by invoking this method to setup the ui reference\nafter element/template initialization (Toolable uses this for its dock wrapper)\n",
   "items": [
    {
     "$type": "param",
     "name": "referenceName",
     "type": "String",
     "src": {
      "name": "18,2120,28",
      "type": "18,2120,20"
     }
    },
    {
     "$type": "param",
     "name": "uiCls",
     "type": "String",
     "src": {
      "name": "18,2121,28",
      "type": "18,2121,20"
     }
    },
    {
     "$type": "param",
     "name": "isInstance",
     "optional": true,
     "text": "pass `false` if this is not an instance-level\nreference\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "18,2122,30",
      "text": "18,2122,48,46:18,2123,12,10",
      "type": "18,2122,20",
      "value": "18,2122,41"
     }
    }
   ],
   "access": "private",
   "nameprimary": "initUiReference([object Object],[object Object],[object Object])"
  },
  {
   "name": "insertFloatedDom",
   "text": "This method inserts this floated component's DOM into its owning floatParent.\n",
   "items": [
    {
     "$type": "param",
     "name": "needsShow",
     "src": {
      "name": "689,1412,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "insertFloatedDom([object Object])"
  },
  {
   "name": "invalidateInheritedState",
   "text": "This method marks the current inherited state as invalid. The next time a call is\nmade to `{@link #method!getInherited getInherited}` the objects will be recreated and initialized.\n",
   "access": "private",
   "nameprimary": "invalidateInheritedState(undefined)"
  },
  {
   "name": "is",
   "text": "Tests whether this Widget matches a {@link Ext.ComponentQuery}\nselector string.\n",
   "items": [
    {
     "$type": "param",
     "name": "selector",
     "text": "The selector string to test against.\n",
     "type": "String",
     "src": {
      "name": "18,1136,24",
      "text": "18,1136,33,37",
      "type": "18,1136,16"
     }
    },
    {
     "$type": "return",
     "text": "`true` if this Widget matches the selector.\n",
     "type": "Boolean",
     "src": {
      "text": "18,1137,26,44",
      "type": "18,1137,17"
     }
    }
   ],
   "nameprimary": "is([object Object],[object Object])"
  },
  {
   "name": "isAncestor",
   "text": "Determines whether **this Component** is an ancestor of the passed Component.\nThis will return `true` if the passed Component is anywhere within the subtree\nbeneath this Component.\n",
   "items": [
    {
     "$type": "param",
     "name": "possibleDescendant",
     "text": "The Component to test for presence\nwithin this Component's subtree.\n",
     "type": "Ext.Component",
     "src": {
      "name": "287,362,31",
      "text": "287,362,50,35:287,363,8,33",
      "type": "287,362,16"
     }
    },
    {
     "$type": "return",
     "type": "Boolean",
     "src": {
      "type": "287,368,0"
     }
    }
   ],
   "nameprimary": "isAncestor([object Object],[object Object])"
  },
  {
   "name": "isBlurring",
   "items": [
    {
     "$type": "param",
     "name": "e",
     "src": {
      "name": "283,902,0"
     }
    },
    {
     "$type": "return",
     "type": "Boolean",
     "src": {
      "type": "283,918,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "isBlurring([object Object],[object Object])"
  },
  {
   "name": "isBound",
   "text": "Determines if the passed property name is bound to ViewModel data.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "optional": true,
     "text": "The property name to test. Defaults to the\n{@link #property!defaultBindProperty #defaultBindProperty}\n",
     "type": "String",
     "src": {
      "name": "275,384,25",
      "text": "275,384,31,43:275,385,8,29",
      "type": "275,384,16"
     }
    },
    {
     "$type": "return",
     "text": "`true` if the passed property receives data from a ViewModel.\n",
     "type": "Boolean",
     "src": {
      "text": "275,386,27,62",
      "type": "275,386,18"
     }
    }
   ],
   "nameprimary": "isBound([object Object],[object Object])"
  },
  {
   "name": "isCentered",
   "items": [
    {
     "$type": "return",
     "type": "boolean",
     "src": {
      "type": "410,1419,17"
     }
    }
   ],
   "access": "private",
   "nameprimary": "isCentered([object Object])"
  },
  {
   "name": "isDescendantOf",
   "text": "Determines whether this component is the descendant of a passed component.\n",
   "items": [
    {
     "$type": "param",
     "name": "ancestor",
     "text": "A Component which may contain this Component.\n",
     "type": "Ext.Component",
     "src": {
      "name": "287,350,31",
      "text": "287,350,40,46",
      "type": "287,350,16"
     }
    },
    {
     "$type": "return",
     "text": "`true` if the component is the descendant of the passed component,\notherwise `false`.\n",
     "type": "Boolean",
     "src": {
      "text": "287,351,26,67:287,352,8,19",
      "type": "287,351,17"
     }
    }
   ],
   "nameprimary": "isDescendantOf([object Object],[object Object])"
  },
  {
   "name": "isDestructing",
   "text": "Determines if this Component is inside a Component tree which is destroyed, *or\nis being destroyed*.\n",
   "items": [
    {
     "$type": "return",
     "text": "`true` if this Component, or any ancestor is destroyed, or\nis being destroyed.\n",
     "type": "boolean",
     "src": {
      "text": "283,217,26,59:283,218,8,20",
      "type": "283,217,17"
     }
    }
   ],
   "access": "private",
   "nameprimary": "isDestructing([object Object])"
  },
  {
   "name": "isDisabled",
   "text": "Returns `true` if this Component is currently disabled.\n",
   "items": [
    {
     "$type": "return",
     "text": "`true` if currently disabled.\n",
     "type": "Boolean",
     "src": {
      "text": "18,741,26,30",
      "type": "18,741,17"
     }
    }
   ],
   "nameprimary": "isDisabled([object Object])"
  },
  {
   "name": "isEnabled",
   "text": "Returns `true` if this Component is not currently disabled.\n",
   "items": [
    {
     "$type": "return",
     "text": "`true` if not currently disabled.\n",
     "type": "Boolean",
     "src": {
      "text": "18,749,26,34",
      "type": "18,749,17"
     }
    }
   ],
   "nameprimary": "isEnabled([object Object])"
  },
  {
   "name": "isFocusable",
   "text": "Determine if this Focusable can receive focus at this time.\n\nNote that Containers can be non-focusable themselves while delegating\nfocus treatment to a child Component; see {@link Ext.Container}\nfor more information.\n",
   "items": [
    {
     "$type": "param",
     "name": "deep",
     "optional": true,
     "text": "Optionally determine if the container itself\nis focusable, or if container's focus is delegated to a child component\nand that child is focusable.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "283,187,26",
      "text": "283,187,38,45:283,188,8,102",
      "type": "283,187,16",
      "value": "283,187,31"
     }
    },
    {
     "$type": "return",
     "text": "True if component is focusable, false if not.\n",
     "type": "Boolean",
     "src": {
      "text": "283,191,26,46",
      "type": "283,191,17"
     }
    }
   ],
   "nameprimary": "isFocusable([object Object],[object Object])"
  },
  {
   "name": "isFocusing",
   "items": [
    {
     "$type": "param",
     "name": "e",
     "src": {
      "name": "283,880,0"
     }
    },
    {
     "$type": "return",
     "type": "Boolean",
     "src": {
      "type": "283,896,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "isFocusing([object Object],[object Object])"
  },
  {
   "name": "isHeighted",
   "access": "private",
   "nameprimary": "isHeighted(undefined)"
  },
  {
   "name": "isHidden",
   "text": "Returns `true` if this Component is currently hidden.\n",
   "items": [
    {
     "$type": "param",
     "name": "deep",
     "optional": true,
     "text": "`true` to check if this component\nis hidden because a parent container is hidden. Alternatively, a reference to the\ntop-most parent at which to stop climbing.\n",
     "type": "Boolean/Ext.Widget",
     "value": "false",
     "src": {
      "name": "18,1145,37",
      "text": "18,1145,49,34:18,1146,8,125",
      "type": "18,1145,16",
      "value": "18,1145,42"
     }
    },
    {
     "$type": "return",
     "text": "`true` if currently hidden.\n",
     "type": "Boolean",
     "src": {
      "text": "18,1148,26,28",
      "type": "18,1148,17"
     }
    }
   ],
   "nameprimary": "isHidden([object Object],[object Object])"
  },
  {
   "name": "isPainted",
   "access": "private",
   "nameprimary": "isPainted(undefined)"
  },
  {
   "name": "isRendered",
   "access": "private",
   "nameprimary": "isRendered(undefined)"
  },
  {
   "name": "isSuspended",
   "text": "Checks if all events, or a specific event, is suspended.\n",
   "items": [
    {
     "$type": "param",
     "name": "event",
     "optional": true,
     "text": "The name of the specific event to check\n",
     "type": "String",
     "src": {
      "name": "291,1512,29",
      "text": "291,1512,36,40",
      "type": "291,1512,20"
     }
    },
    {
     "$type": "return",
     "text": "`true` if events are suspended\n",
     "type": "Boolean",
     "src": {
      "text": "291,1513,30,31",
      "type": "291,1513,21"
     }
    }
   ],
   "nameprimary": "isSuspended([object Object],[object Object])"
  },
  {
   "name": "isSyncing",
   "text": "Checks if a particular binding is synchronizing the value.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "text": "The name of the property being bound to.\n",
     "type": "String",
     "src": {
      "name": "275,802,28",
      "text": "275,802,33,41",
      "type": "275,802,20"
     }
    },
    {
     "$type": "return",
     "text": "`true` if the binding is syncing.\n",
     "type": "Boolean",
     "src": {
      "text": "275,803,30,34",
      "type": "275,803,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "isSyncing([object Object],[object Object])"
  },
  {
   "name": "isVisible",
   "text": "Returns `true` if this Component is currently visible.\n\nA Widget is visible if its element is not hidden, *and* has been\n{@link #property!rendered} *and* has not been destroyed.\n",
   "items": [
    {
     "$type": "param",
     "name": "deep",
     "optional": true,
     "text": "`true` to check if this component\nis visible and all parents are also visible.\n\nContrast this with the {@link #method!isHidden #isHidden} method which just checks the\nhidden state of the component.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "18,1172,26",
      "text": "18,1172,38,34:18,1173,8,147",
      "type": "18,1172,16",
      "value": "18,1172,31"
     }
    },
    {
     "$type": "return",
     "text": "`true` if currently visible.\n",
     "type": "Boolean",
     "src": {
      "text": "18,1177,26,29",
      "type": "18,1177,17"
     }
    }
   ],
   "nameprimary": "isVisible([object Object],[object Object])"
  },
  {
   "name": "isWidthed",
   "access": "private",
   "nameprimary": "isWidthed(undefined)"
  },
  {
   "name": "isXType",
   "text": "Tests whether or not this Component is of a specific xtype. This can test whether this\nComponent is descended from the xtype (default) or whether it is directly of the xtype\nspecified (`shallow = true`).\n**If using your own subclasses, be aware that a Component must register its own xtype\nto participate in determination of inherited xtypes.__\n\nFor a list of all available xtypes, see the {@link Ext.Component} header.\n\nExample usage:\n\n    var t = new Ext.field.Text();\n    var isText = t.isXType('textfield'); // true\n    var isBoxSubclass = t.isXType('field'); // true, descended from Ext.field.Field\n    var isBoxInstance = t.isXType('field', true); // false, not a direct\n                                                  // Ext.field.Field instance\n",
   "items": [
    {
     "$type": "param",
     "name": "xtype",
     "text": "The xtype to check for this Component.\n",
     "type": "String",
     "src": {
      "name": "18,1200,24",
      "text": "18,1200,30,39",
      "type": "18,1200,16"
     }
    },
    {
     "$type": "param",
     "name": "shallow",
     "optional": true,
     "text": "`false` to check whether this Component is descended\nfrom the xtype (this is the default), or `true` to check whether this Component is directly\nof the specified xtype.\n",
     "type": "Boolean",
     "src": {
      "name": "18,1201,25",
      "optional": "18,1201,34",
      "text": "18,1201,44,53:18,1202,8,116",
      "type": "18,1201,16"
     }
    },
    {
     "$type": "return",
     "text": "`true` if this component descends from the specified xtype, `false`\notherwise.\n",
     "type": "Boolean",
     "src": {
      "text": "18,1204,26,68:18,1205,8,11",
      "type": "18,1204,17"
     }
    }
   ],
   "nameprimary": "isXType([object Object],[object Object],[object Object])"
  },
  {
   "name": "link",
   "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy}`).\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "type": "String",
     "src": {
      "name": "46,1926,28",
      "type": "46,1926,20"
     }
    },
    {
     "$type": "param",
     "name": "value",
     "type": "Object",
     "src": {
      "name": "46,1927,28",
      "type": "46,1927,20"
     }
    },
    {
     "$type": "return",
     "text": "The `value` passed.\n",
     "type": "Object",
     "src": {
      "text": "46,1928,29,20",
      "type": "46,1928,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "link([object Object],[object Object],[object Object])"
  },
  {
   "name": "loadState",
   "text": "This method is called to load state from the provided `state` builder. This method\nshould return the config properties loaded from `state`.\n\nThis method, like `{@link #method!saveState saveState}`, can be overridden by derived classes:\n\n     loadState: function(state) {\n         var ret = this.callParent([ state ]);\n\n         if (ret.foo) {\n             // use custom data...\n\n             delete ret.foo;  // remove it since it isn't a config\n         }\n\n         return ret;\n     }\n\nWhen overriding this method, it is also likely necessary to override `{@link #method!saveState saveState}`.\n",
   "items": [
    {
     "$type": "param",
     "name": "state",
     "type": "Ext.state.Builder",
     "src": {
      "name": "668,172,35",
      "type": "668,172,16"
     }
    },
    {
     "$type": "param",
     "name": "stateful",
     "text": "The stateful properties as an object keyed by config name.\n",
     "type": "Object",
     "src": {
      "name": "668,173,24",
      "text": "668,173,33,59",
      "type": "668,173,16"
     }
    },
    {
     "$type": "return",
     "type": "Object",
     "src": {
      "type": "668,174,17"
     }
    }
   ],
   "access": "private",
   "nameprimary": "loadState([object Object],[object Object],[object Object])"
  },
  {
   "name": "lookupController",
   "text": "Gets the controller that controls this view. May be a controller that belongs\nto a view higher in the hierarchy.\n",
   "items": [
    {
     "$type": "param",
     "name": "skipThis",
     "optional": true,
     "text": "`true` to not consider the controller directly attached\nto this view (if it exists).\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "275,399,26",
      "text": "275,399,42,56:275,400,8,29",
      "type": "275,399,16",
      "value": "275,399,35"
     }
    },
    {
     "$type": "return",
     "text": "The controller. `null` if no controller is found.\n",
     "type": "Ext.app.ViewController",
     "src": {
      "text": "275,401,41,50",
      "type": "275,401,17"
     }
    }
   ],
   "nameprimary": "lookupController([object Object],[object Object])"
  },
  {
   "name": "lookupNameHolder",
   "text": "Gets the Form or Component that is used as the name holder for this component.\n",
   "items": [
    {
     "$type": "param",
     "name": "skipThis",
     "optional": true,
     "text": "`false` to return this as the name holder if\nthis instance has set `nameHolder`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!name name}` property set by the\nowner of a component that is also a `nameHolder` itself. In this case, the\n`{@link #cfg!name name}` connects not to this component but to the parent nameHolder.\n",
     "type": "Boolean",
     "value": "true",
     "src": {
      "name": "287,271,26",
      "text": "287,271,41,45:287,272,8,296",
      "type": "287,271,16",
      "value": "287,271,35"
     }
    },
    {
     "$type": "return",
     "text": "The name holder.\n",
     "type": "Ext.Component",
     "src": {
      "text": "287,277,32,17",
      "type": "287,277,17"
     }
    }
   ],
   "access": "private",
   "nameprimary": "lookupNameHolder([object Object],[object Object])"
  },
  {
   "name": "lookupReferenceHolder",
   "text": "Gets the Controller or Component that is used as the reference holder for this view.\n",
   "items": [
    {
     "$type": "param",
     "name": "skipThis",
     "optional": true,
     "text": "`false` to return this as the reference holder if\nthis instance has set `referenceHolder`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!reference reference}` property set by the\nowner of a component that is also a `referenceHolder` itself. In this case, the\n`{@link #cfg!reference reference}` connects not to this component but to the parent referenceHolder.\n",
     "type": "Boolean",
     "value": "true",
     "src": {
      "name": "287,289,26",
      "text": "287,289,41,50:287,290,8,321",
      "type": "287,289,16",
      "value": "287,289,35"
     }
    },
    {
     "$type": "return",
     "text": "The reference holder.\n",
     "type": "Ext.app.ViewController/Ext.Container",
     "src": {
      "text": "287,295,65,22",
      "type": "287,295,17"
     }
    }
   ],
   "access": "private",
   "nameprimary": "lookupReferenceHolder([object Object],[object Object])"
  },
  {
   "name": "lookupSession",
   "text": "Returns the `{@link Ext.data.Session}` for this instance. This property may come\nfrom this instance's `{@link #cfg!session #session}` or be inherited from this object's parent.\n",
   "items": [
    {
     "$type": "param",
     "name": "skipThis",
     "optional": true,
     "text": "Pass `true` to ignore a `{@link #cfg!session session}` configured on\nthis instance and only consider an inherited session.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "275,412,26",
      "text": "275,412,42,48:275,413,8,54",
      "type": "275,412,16",
      "value": "275,412,35"
     }
    },
    {
     "$type": "return",
     "type": "Ext.data.Session",
     "src": {
      "type": "275,414,17"
     }
    }
   ],
   "nameprimary": "lookupSession([object Object],[object Object])"
  },
  {
   "name": "lookupTpl",
   "text": "Gets a named template instance for this class. See {@link Ext.XTemplate#static-method!getTpl Ext.XTemplate#getTpl}.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "text": "The name of the property that holds the template.\n",
     "type": "String",
     "src": {
      "name": "18,1213,24",
      "text": "18,1213,29,50",
      "type": "18,1213,16"
     }
    },
    {
     "$type": "return",
     "text": "The template, `null` if not found.\n",
     "type": "Ext.XTemplate",
     "src": {
      "text": "18,1214,32,35",
      "type": "18,1214,17"
     }
    }
   ],
   "nameprimary": "lookupTpl([object Object],[object Object])"
  },
  {
   "name": "lookupViewModel",
   "text": "Returns the `{@link Ext.app.ViewModel}` for this instance. This property may come from this\nthis instance's `{@link #cfg!viewModel #viewModel}` or be inherited from this object's parent.\n",
   "items": [
    {
     "$type": "param",
     "name": "skipThis",
     "optional": true,
     "text": "Pass `true` to ignore a `{@link #cfg!viewModel viewModel}` configured on\nthis instance and only consider an inherited view model.\n",
     "type": "Boolean",
     "value": "false",
     "src": {
      "name": "275,435,26",
      "text": "275,435,42,50:275,436,8,57",
      "type": "275,435,16",
      "value": "275,435,35"
     }
    },
    {
     "$type": "return",
     "type": "Ext.app.ViewModel",
     "src": {
      "type": "275,437,17"
     }
    }
   ],
   "nameprimary": "lookupViewModel([object Object],[object Object])"
  },
  {
   "name": "mon",
   "text": "Shorthand for {@link #method!addManagedListener #addManagedListener}.\nThe addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n{@link Ext.util.Observable#method!addListener addListener} is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use `{@link #method!mon mon}` or `{@link #method!addManagedListener addManagedListener}` if you want the listener to be\nmanaged.\n",
   "items": [
    {
     "$type": "param",
     "name": "item",
     "text": "The item to which to add\na listener/listeners.\n",
     "type": "Ext.util.Observable/Ext.dom.Element",
     "src": {
      "name": "291,526,57",
      "text": "291,526,62,25:291,527,12,22",
      "type": "291,526,20"
     }
    },
    {
     "$type": "param",
     "name": "ename",
     "text": "The event name, or an object containing event name\nproperties.\n",
     "type": "Object/String",
     "src": {
      "name": "291,528,35",
      "text": "291,528,41,51:291,529,12,12",
      "type": "291,528,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "optional": true,
     "text": "If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
     "type": "Function/String",
     "src": {
      "name": "291,530,37",
      "optional": "291,530,41",
      "text": "291,530,51,38:291,531,12,85",
      "type": "291,530,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n",
     "type": "Object",
     "src": {
      "name": "291,533,28",
      "optional": "291,533,35",
      "text": "291,533,45,52:291,534,12,72",
      "type": "291,533,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "If the `ename` parameter was an event name, this is\nthe {@link Ext.util.Observable#method!addListener addListener} options.\n",
     "type": "Object",
     "src": {
      "name": "291,535,28",
      "optional": "291,535,37",
      "text": "291,535,47,52:291,536,12,65",
      "type": "291,535,20"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "noDestroy",
     "type": "Boolean",
     "src": {
      "access": "291,537,40",
      "name": "291,537,29",
      "type": "291,537,20"
     }
    },
    {
     "$type": "return",
     "text": "**Only when the `destroyable` option is specified.**\n\nA `Destroyable` object. An object which implements the `destroy` method which removes\nall listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
     "type": "Object",
     "src": {
      "text": "291,538,29,53:291,539,12,512",
      "type": "291,538,21"
     }
    }
   ],
   "nameprimary": "mon([object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "mun",
   "text": "Shorthand for {@link #method!removeManagedListener #removeManagedListener}.\nRemoves listeners that were added by the {@link #method!mon #mon} method.\n",
   "items": [
    {
     "$type": "param",
     "name": "item",
     "text": "The item from which to remove\na listener/listeners.\n",
     "type": "Ext.util.Observable/Ext.dom.Element",
     "src": {
      "name": "291,608,57",
      "text": "291,608,62,30:291,609,12,22",
      "type": "291,608,20"
     }
    },
    {
     "$type": "param",
     "name": "ename",
     "text": "The event name, or an object containing event name\nproperties.\n",
     "type": "Object/String",
     "src": {
      "name": "291,610,35",
      "text": "291,610,41,51:291,611,12,12",
      "type": "291,610,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "optional": true,
     "text": "If the `ename` parameter was an event name, this is\nthe handler function.\n",
     "type": "Function",
     "src": {
      "name": "291,612,30",
      "optional": "291,612,34",
      "text": "291,612,44,52:291,613,12,22",
      "type": "291,612,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n",
     "type": "Object",
     "src": {
      "name": "291,614,28",
      "optional": "291,614,35",
      "text": "291,614,45,52:291,615,12,72",
      "type": "291,614,20"
     }
    }
   ],
   "nameprimary": "mun([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "on",
   "text": "The {@link #method!on #on} method is shorthand for\n{@link Ext.util.Observable#method!addListener addListener}.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
     "type": "String/Object",
     "src": {
      "name": "291,943,35",
      "text": "291,943,45,37:291,944,12,61",
      "type": "291,943,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "optional": true,
     "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n",
     "type": "Function/String",
     "src": {
      "name": "291,946,38",
      "text": "291,946,42,46:291,947,12,166",
      "type": "291,946,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
     "type": "Object",
     "src": {
      "name": "291,951,29",
      "text": "291,951,36,62:291,952,12,73",
      "type": "291,951,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
     "type": "Object",
     "items": [
      {
       "$type": "property",
       "name": "scope",
       "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
       "type": "Object",
       "src": {
        "name": "291,961,36",
        "text": "291,962,12,139",
        "type": "291,961,20"
       }
      },
      {
       "$type": "property",
       "name": "delay",
       "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
       "type": "Number",
       "src": {
        "name": "291,965,36",
        "text": "291,966,12,94",
        "type": "291,965,20"
       }
      },
      {
       "$type": "property",
       "name": "single",
       "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
       "type": "Boolean",
       "src": {
        "name": "291,969,37",
        "text": "291,970,12,96",
        "type": "291,969,20"
       }
      },
      {
       "$type": "property",
       "name": "buffer",
       "text": "  Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
       "type": "Number",
       "src": {
        "name": "291,973,36",
        "text": "291,974,12,262",
        "type": "291,973,20"
       }
      },
      {
       "$type": "property",
       "name": "onFrame",
       "text": "  Causes the handler to be scheduled to run at the next\n  {@link Ext.Function#method!requestAnimationFrame animation frame event}. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
       "type": "Number",
       "src": {
        "name": "291,978,36",
        "text": "291,979,12,323",
        "type": "291,978,20"
       }
      },
      {
       "$type": "property",
       "name": "target",
       "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
       "type": "Ext.util.Observable",
       "src": {
        "name": "291,985,49",
        "text": "291,986,12,135",
        "type": "291,985,20"
       }
      },
      {
       "$type": "property",
       "name": "element",
       "text": "  **This option is only valid for listeners bound to {@link Ext.Component}.**\n  The name of a Component property which references an {@link Ext.dom.Element}\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of {@link Ext.Component} which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
       "type": "String",
       "src": {
        "name": "291,989,36",
        "text": "291,990,12,781",
        "type": "291,989,20"
       }
      },
      {
       "$type": "property",
       "name": "delegate",
       "optional": true,
       "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
       "type": "String",
       "src": {
        "name": "291,1013,37",
        "text": "291,1014,12,295",
        "type": "291,1013,20"
       }
      },
      {
       "$type": "property",
       "name": "capture",
       "optional": true,
       "text": " When set to `true`, the listener is fired in the capture phase of the event propagation\n sequence, instead of the default bubble phase.\n\n  The `{@link #static-method!capture capture}` option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n",
       "type": "Boolean",
       "src": {
        "name": "291,1022,38",
        "text": "291,1023,12,307",
        "type": "291,1022,20"
       }
      },
      {
       "$type": "property",
       "name": "stopPropagation",
       "optional": true,
       "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopPropagation stopPropagation} on the event\n  object before firing the handler.\n",
       "type": "Boolean",
       "src": {
        "name": "291,1030,38",
        "text": "291,1031,12,212",
        "type": "291,1030,20"
       }
      },
      {
       "$type": "property",
       "name": "preventDefault",
       "optional": true,
       "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!preventDefault preventDefault} on the event\n  object before firing the handler.\n",
       "type": "Boolean",
       "src": {
        "name": "291,1035,38",
        "text": "291,1036,12,210",
        "type": "291,1035,20"
       }
      },
      {
       "$type": "property",
       "name": "stopEvent",
       "optional": true,
       "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopEvent stopEvent} on the event object\n  before firing the handler.\n",
       "type": "Boolean",
       "src": {
        "name": "291,1040,38",
        "text": "291,1041,12,200",
        "type": "291,1040,20"
       }
      },
      {
       "$type": "property",
       "name": "args",
       "optional": true,
       "text": "\nOptional set of arguments to pass to the handler function before the actual\nfired event arguments. For example, if `args` is set to `['foo', 42]`,\nthe event handler function will be called with an arguments list like this:\n\n     handler('foo', 42, <actual event arguments>...);\n",
       "type": "Array",
       "src": {
        "name": "291,1045,36",
        "text": "291,1046,12,280",
        "type": "291,1045,20"
       }
      },
      {
       "$type": "property",
       "name": "destroyable",
       "optional": true,
       "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `destroy` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using {@link #method!un #un}; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See {@link #method!un #un} for the proper syntax for removing listeners added using the\n  _element_ config.\n",
       "type": "Boolean",
       "value": "false",
       "src": {
        "name": "291,1053,38",
        "text": "291,1054,12,441",
        "type": "291,1053,20",
        "value": "291,1053,50"
       }
      },
      {
       "$type": "property",
       "name": "priority",
       "optional": true,
       "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
       "type": "Number",
       "src": {
        "name": "291,1061,37",
        "text": "291,1062,12,737",
        "type": "291,1061,20"
       }
      },
      {
       "$type": "property",
       "name": "order",
       "optional": true,
       "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
       "type": "String",
       "value": "'current'",
       "src": {
        "name": "291,1073,37",
        "text": "291,1074,12,301",
        "type": "291,1073,20",
        "value": "291,1073,43"
       }
      }
     ],
     "src": {
      "name": "291,954,29",
      "text": "291,954,38,44:291,955,12,154",
      "type": "291,954,20"
     }
    },
    {
     "$type": "param",
     "name": "order",
     "optional": true,
     "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n",
     "type": "String",
     "value": "'current'",
     "src": {
      "name": "291,1081,29",
      "text": "291,1082,12,132",
      "type": "291,1081,20",
      "value": "291,1081,35"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "caller",
     "text": "\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
     "src": {
      "access": "291,1085,27",
      "name": "291,1085,19",
      "text": "291,1086,12,1700"
     }
    },
    {
     "$type": "return",
     "text": "**Only when the `destroyable` option is specified.**\n\n A `Destroyable` object. An object which implements the `destroy` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
     "type": "Object",
     "src": {
      "text": "291,1142,29,53:291,1143,12,516",
      "type": "291,1142,21"
     }
    }
   ],
   "nameprimary": "on([object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "onAdded",
   "items": [
    {
     "$type": "param",
     "name": "parent",
     "src": {
      "name": "689,445,0"
     }
    },
    {
     "$type": "param",
     "name": "instanced",
     "src": {
      "name": "689,445,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "onAdded([object Object],[object Object])"
  },
  {
   "name": "onAfter",
   "text": "Appends an after-event handler.\n\nSame as {@link Ext.util.Observable#method!addListener addListener} with `order` set\nto `'after'`.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to listen for.\n",
     "type": "String/String[]/Object",
     "src": {
      "name": "291,1327,44",
      "text": "291,1327,54,37",
      "type": "291,1327,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "text": "The method the event invokes.\n",
     "type": "Function/String",
     "src": {
      "name": "291,1328,37",
      "text": "291,1328,40,30",
      "type": "291,1328,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope for `fn`.\n",
     "type": "Object",
     "src": {
      "name": "291,1329,29",
      "text": "291,1329,36,20",
      "type": "291,1329,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "An object containing handler configuration.\n",
     "type": "Object",
     "src": {
      "name": "291,1330,29",
      "text": "291,1330,38,44",
      "type": "291,1330,20"
     }
    }
   ],
   "nameprimary": "onAfter([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "onBefore",
   "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as {@link Ext.util.Observable#method!addListener addListener} with `order` set\nto `'before'`.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event to listen for.\n",
     "type": "String/String[]/Object",
     "src": {
      "name": "291,1312,44",
      "text": "291,1312,54,37",
      "type": "291,1312,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "text": "The method the event invokes.\n",
     "type": "Function/String",
     "src": {
      "name": "291,1313,37",
      "text": "291,1313,40,30",
      "type": "291,1313,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope for `fn`.\n",
     "type": "Object",
     "src": {
      "name": "291,1314,29",
      "text": "291,1314,36,20",
      "type": "291,1314,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "An object containing handler configuration.\n",
     "type": "Object",
     "src": {
      "name": "291,1315,29",
      "text": "291,1315,38,44",
      "type": "291,1315,20"
     }
    }
   ],
   "nameprimary": "onBefore([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "onBlur",
   "items": [
    {
     "$type": "param",
     "name": "e",
     "src": {
      "name": "283,331,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "onBlur([object Object])"
  },
  {
   "name": "onFocus",
   "items": [
    {
     "$type": "param",
     "name": "e",
     "src": {
      "name": "283,363,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "onFocus([object Object])"
  },
  {
   "name": "onFocusEnter",
   "text": "Called when focus enters this Component's hierarchy\n",
   "items": [
    {
     "$type": "param",
     "name": "e",
     "type": "Object",
     "items": [
      {
       "$type": "property",
       "name": "event",
       "text": "The underlying DOM event.\n",
       "type": "Ext.event.Event",
       "src": {
        "name": "283,502,35",
        "text": "283,502,41,26",
        "type": "283,502,16"
       }
      },
      {
       "$type": "property",
       "name": "target",
       "text": "The element gaining focus.\n",
       "type": "HTMLElement",
       "src": {
        "name": "283,503,31",
        "text": "283,503,38,27",
        "type": "283,503,16"
       }
      },
      {
       "$type": "property",
       "name": "relatedTarget",
       "text": "The element losing focus.\n",
       "type": "HTMLElement",
       "src": {
        "name": "283,504,31",
        "text": "283,504,45,26",
        "type": "283,504,16"
       }
      },
      {
       "$type": "property",
       "name": "toComponent",
       "text": "The Component gaining focus.\n",
       "type": "Ext.Component",
       "src": {
        "name": "283,505,33",
        "text": "283,505,45,29",
        "type": "283,505,16"
       }
      },
      {
       "$type": "property",
       "name": "fromComponent",
       "text": "The Component losing focus.\n",
       "type": "Ext.Component",
       "src": {
        "name": "283,506,33",
        "text": "283,506,47,28",
        "type": "283,506,16"
       }
      },
      {
       "$type": "property",
       "name": "backwards",
       "text": "`true` if the `fromComponent` is *after* the `toComponent*\nin the DOM tree, indicating that the user used `SHIFT+TAB` to move focus. Note that setting\n`{@link #cfg!tabIndex tabIndex}` values to affect tabbing order can cause this to be incorrect. Setting\n`{@link #cfg!tabIndex tabIndex}` values is not advised.\n",
       "type": "Boolean",
       "src": {
        "name": "283,507,27",
        "text": "283,507,37,59:283,508,8,208",
        "type": "283,507,16"
       }
      }
     ],
     "src": {
      "name": "283,501,24",
      "type": "283,501,16"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "onFocusEnter([object Object])"
  },
  {
   "name": "onFocusLeave",
   "text": "Called when focus exits from this Component's hierarchy\n",
   "items": [
    {
     "$type": "param",
     "name": "e",
     "type": "Ext.event.Event",
     "items": [
      {
       "$type": "property",
       "name": "event",
       "text": "The underlying DOM event.\n",
       "type": "Ext.event.Event",
       "src": {
        "name": "283,538,35",
        "text": "283,538,41,26",
        "type": "283,538,16"
       }
      },
      {
       "$type": "property",
       "name": "target",
       "text": "The element gaining focus.\n",
       "type": "HTMLElement",
       "src": {
        "name": "283,539,31",
        "text": "283,539,38,27",
        "type": "283,539,16"
       }
      },
      {
       "$type": "property",
       "name": "relatedTarget",
       "text": "The element losing focus.\n",
       "type": "HTMLElement",
       "src": {
        "name": "283,540,31",
        "text": "283,540,45,26",
        "type": "283,540,16"
       }
      },
      {
       "$type": "property",
       "name": "toComponent",
       "text": "The Component gaining focus.\n",
       "type": "Ext.Component",
       "src": {
        "name": "283,541,33",
        "text": "283,541,45,29",
        "type": "283,541,16"
       }
      },
      {
       "$type": "property",
       "name": "fromComponent",
       "text": "The Component losing focus.\n",
       "type": "Ext.Component",
       "src": {
        "name": "283,542,33",
        "text": "283,542,47,28",
        "type": "283,542,16"
       }
      }
     ],
     "src": {
      "name": "283,537,33",
      "type": "283,537,16"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "onFocusLeave([object Object])"
  },
  {
   "name": "onFocusMove",
   "text": "Called when focus moves *within* this Component's hierarchy\n",
   "items": [
    {
     "$type": "param",
     "name": "info",
     "type": "Object",
     "items": [
      {
       "$type": "property",
       "name": "event",
       "text": "The underlying Event object.\n",
       "type": "Ext.event.Event",
       "src": {
        "name": "283,566,38",
        "text": "283,566,44,29",
        "type": "283,566,16"
       }
      },
      {
       "$type": "property",
       "name": "toElement",
       "text": "The element gaining focus.\n",
       "type": "HTMLElement",
       "src": {
        "name": "283,567,34",
        "text": "283,567,44,27",
        "type": "283,567,16"
       }
      },
      {
       "$type": "property",
       "name": "fromElement",
       "text": "The element losing focus.\n",
       "type": "HTMLElement",
       "src": {
        "name": "283,568,34",
        "text": "283,568,46,26",
        "type": "283,568,16"
       }
      },
      {
       "$type": "property",
       "name": "toComponent",
       "text": "The Component gaining focus.\n",
       "type": "Ext.Component",
       "src": {
        "name": "283,569,36",
        "text": "283,569,48,29",
        "type": "283,569,16"
       }
      },
      {
       "$type": "property",
       "name": "fromComponent",
       "text": "The Component losing focus.\n",
       "type": "Ext.Component",
       "src": {
        "name": "283,570,36",
        "text": "283,570,50,28",
        "type": "283,570,16"
       }
      },
      {
       "$type": "property",
       "name": "backwards",
       "text": "`true` if the focus movement is backward in DOM order\n",
       "type": "Boolean",
       "src": {
        "name": "283,571,30",
        "text": "283,571,40,54",
        "type": "283,571,16"
       }
      }
     ],
     "src": {
      "name": "283,565,24",
      "type": "283,565,16"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "onFocusMove([object Object])"
  },
  {
   "name": "onInheritedAdd",
   "text": "Called when this Inheritable is added to a parent\n",
   "items": [
    {
     "$type": "param",
     "name": "parent",
     "src": {
      "name": "287,442,19"
     }
    },
    {
     "$type": "param",
     "name": "instanced",
     "type": "Boolean",
     "src": {
      "name": "287,443,29",
      "type": "287,443,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "onInheritedAdd([object Object],[object Object])"
  },
  {
   "name": "onInheritedRemove",
   "text": "Called when this inheritable is removed from a parent\n",
   "items": [
    {
     "$type": "param",
     "name": "destroying",
     "text": "`true` if this item will be destroyed by it's container\n",
     "type": "Boolean",
     "src": {
      "name": "287,460,29",
      "text": "287,460,40,56",
      "type": "287,460,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "onInheritedRemove([object Object])"
  },
  {
   "name": "onInitialized",
   "items": [
    {
     "$type": "param",
     "name": "fn",
     "src": {
      "name": "410,1252,0"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "src": {
      "name": "410,1252,0"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "src": {
      "name": "410,1252,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "onInitialized([object Object],[object Object],[object Object])"
  },
  {
   "name": "onRender",
   "text": "This method is called the first time a component is inserted into the DOM. If this\ncomponent {@link Ext.Container} other components, the `{@link #method!onRender onRender}` method\nfor child components is called *after* the parent's `{@link #method!onRender onRender}`.\n\nImplementations of this method should avoid modifying the DOM but are free to read\nfrom and measure elements as needed. To adjust the DOM, consider implementing\n{@link #method!afterRender afterRender} instead.\n\nIf this method is overridden, be sure to use `callParent` to call the base class\nversion.\n\n     onRender: function() {\n         this.callParent();\n\n         // custom actions\n     }\n\nThis method is not generally needed because components always have their own DOM\n{@link #property!element} and these are maintained by config property\nupdaters prior to insertion in the DOM. In general, it is always best to interrogate\nthe component's elements outside the DOM where there is no associated reflow or\nlayout cost. This method is useful for situations where the component's elements\nmust be in the DOM. For example to be measured correctly.\n",
   "nameprimary": "onRender(undefined)"
  },
  {
   "name": "onResize",
   "text": "Optional template method. If implemented, this is called *asynchronously* after a browser\nlayout caused by a component resize. This may be triggered for any or several of the\nfollowing reasons:\n   - Programmatic changes to {@link #cfg!width #cfg-width} or {@link #cfg!height #cfg-height} configs.\n   - Setting the {@link #cfg!flex #cfg-flex} config when the owning layout is {@link Ext.layout.Box}.\n   - Setting {@link #cfg!minHeight #cfg-minHeight}, {@link #cfg!maxHeight #cfg-maxHeight}, {@link #cfg!minWidth #cfg-minWidth}\n     or {@link #cfg!maxWidth #cfg-maxWidth}.\n   - Changing device orientation.\n   - Changing the browser viewport size.\n   - Any resize caused by browser layout recalculation which may be caused by content\n     size changes or application of default browser layout rules.\n",
   "items": [
    {
     "$type": "param",
     "name": "width",
     "text": "The new width.\n",
     "type": "Number",
     "src": {
      "name": "410,1510,24",
      "text": "410,1510,30,15",
      "type": "410,1510,16"
     }
    },
    {
     "$type": "param",
     "name": "height",
     "text": "The new height.\n",
     "type": "Number",
     "src": {
      "name": "410,1511,24",
      "text": "410,1511,31,16",
      "type": "410,1511,16"
     }
    },
    {
     "$type": "param",
     "name": "oldWidth",
     "text": "The previous width.\n",
     "type": "Number",
     "src": {
      "name": "410,1512,24",
      "text": "410,1512,33,20",
      "type": "410,1512,16"
     }
    },
    {
     "$type": "param",
     "name": "oldHeight",
     "text": "The previous height.\n",
     "type": "Number",
     "src": {
      "name": "410,1513,24",
      "text": "410,1513,34,21",
      "type": "410,1513,16"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "onResize([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "onScrollEnd",
   "text": "Invoked when a scroll operation is completed via this component's\n{@link #cfg!scrollable scroller}.\n",
   "items": [
    {
     "$type": "param",
     "name": "x",
     "text": "The current x position\n",
     "type": "Number",
     "src": {
      "name": "410,1212,24",
      "text": "410,1212,26,23",
      "type": "410,1212,16"
     }
    },
    {
     "$type": "param",
     "name": "y",
     "text": "The current y position\n",
     "type": "Number",
     "src": {
      "name": "410,1213,24",
      "text": "410,1213,26,23",
      "type": "410,1213,16"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "onScrollEnd([object Object],[object Object])"
  },
  {
   "name": "onScrollMove",
   "text": "Invoked when this component is scrolled via its {@link #cfg!scrollable scroller}.\n",
   "items": [
    {
     "$type": "param",
     "name": "x",
     "text": "The current x position\n",
     "type": "Number",
     "src": {
      "name": "410,1202,24",
      "text": "410,1202,26,23",
      "type": "410,1202,16"
     }
    },
    {
     "$type": "param",
     "name": "y",
     "text": "The current y position\n",
     "type": "Number",
     "src": {
      "name": "410,1203,24",
      "text": "410,1203,26,23",
      "type": "410,1203,16"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "onScrollMove([object Object],[object Object])"
  },
  {
   "name": "onScrollStart",
   "text": "Invoked when a scroll is initiated on this component via its {@link #cfg!scrollable scroller}.\n",
   "items": [
    {
     "$type": "param",
     "name": "x",
     "text": "The current x position\n",
     "type": "Number",
     "src": {
      "name": "410,1193,24",
      "text": "410,1193,26,23",
      "type": "410,1193,16"
     }
    },
    {
     "$type": "param",
     "name": "y",
     "text": "The current y position\n",
     "type": "Number",
     "src": {
      "name": "410,1194,24",
      "text": "410,1194,26,23",
      "type": "410,1194,16"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "onScrollStart([object Object],[object Object])"
  },
  {
   "name": "onStatefulChange",
   "text": "This method is called when any of the `{@link #cfg!stateful stateful}` configs are modified.\n",
   "access": "private",
   "nameprimary": "onStatefulChange(undefined)"
  },
  {
   "name": "owns",
   "text": "Returns `true` if the passed element is within the container tree of this component.\n\nFor example if a menu's submenu contains an {@link Ext.form.field.Date}, that top level\nmenu owns the elements of the date picker. Using this method, you can tell if an event\ntook place within a certain component tree.\n",
   "items": [
    {
     "$type": "param",
     "name": "element",
     "src": {
      "name": "689,1088,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "owns([object Object])"
  },
  {
   "name": "persistState",
   "text": "Saves the state of this instance to the persistence store. This method is called\nby the {@link Ext.state.Provider} when it is ready to save state\nto storage.\n",
   "access": "private",
   "nameprimary": "persistState(undefined)"
  },
  {
   "name": "preprocessShow",
   "text": "This is the private method to ensure everything is set up for showing.\nThis is called by both show and showBy to set a component up.\nthe user-facing method is beforeShow, this setup must have\nhappened by the time that is called.\n",
   "items": [
    {
     "$type": "param",
     "name": "component",
     "src": {
      "name": "410,1980,0"
     }
    },
    {
     "$type": "param",
     "name": "alignment",
     "src": {
      "name": "410,1980,0"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "src": {
      "name": "410,1980,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "preprocessShow([object Object],[object Object],[object Object])"
  },
  {
   "name": "processElementConfig",
   "text": "Recursively processes the element templates for this class and its superclasses,\nascending the hierarchy until it reaches a superclass whose element template\nhas already been processed.  This method is invoked using the prototype as the scope.\n",
   "items": [
    {
     "$type": "return",
     "type": "Object",
     "src": {
      "type": "18,2014,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "processElementConfig([object Object])"
  },
  {
   "name": "publishState",
   "text": "Publish this components state to the `ViewModel`. If no arguments are given (or if\nthis is the first call), the entire state is published. This state is determined by\nthe `{@link #cfg!publishes publishes}` property.\n\nThis method is called only by component authors.\n",
   "items": [
    {
     "$type": "param",
     "name": "property",
     "optional": true,
     "text": "The name of the property to update.\n",
     "type": "String",
     "src": {
      "name": "275,464,25",
      "text": "275,464,35,36",
      "type": "275,464,16"
     }
    },
    {
     "$type": "param",
     "name": "value",
     "optional": true,
     "text": "The value of `property`. Only needed if `property` is given.\n",
     "type": "Object",
     "src": {
      "name": "275,465,25",
      "text": "275,465,32,61",
      "type": "275,465,16"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "publishState([object Object],[object Object])"
  },
  {
   "name": "readStateObject",
   "text": "Returns this instance's state object from the persistence store. This object\nshould contain config properties.\n",
   "items": [
    {
     "$type": "return",
     "type": "Object",
     "src": {
      "type": "668,450,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "readStateObject([object Object])"
  },
  {
   "name": "realign",
   "items": [
    {
     "$type": "param",
     "name": "component",
     "src": {
      "name": "689,710,0"
     }
    },
    {
     "$type": "param",
     "name": "alignment",
     "src": {
      "name": "689,710,0"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "src": {
      "name": "689,710,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "realign([object Object],[object Object],[object Object])"
  },
  {
   "name": "relayEvents",
   "text": "Relays selected events from the specified Observable as if the events were fired\nby `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from\nstore. So you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
   "items": [
    {
     "$type": "param",
     "name": "origin",
     "text": "The Observable whose events this object is to relay.\n",
     "type": "Object",
     "src": {
      "name": "291,1646,28",
      "text": "291,1646,35,53",
      "type": "291,1646,20"
     }
    },
    {
     "$type": "param",
     "name": "events",
     "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event\nas a pop event.\n",
     "type": "String[]/Object",
     "src": {
      "name": "291,1647,37",
      "text": "291,1647,44,58:291,1648,12,231",
      "type": "291,1647,20"
     }
    },
    {
     "$type": "param",
     "name": "prefix",
     "optional": true,
     "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and\n'storeclear'.\n",
     "type": "String",
     "src": {
      "name": "291,1654,29",
      "text": "291,1654,37,60:291,1655,12,164",
      "type": "291,1654,20"
     }
    },
    {
     "$type": "return",
     "text": "A `Destroyable` object. An object which implements the `destroy` method\nwhich, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
     "type": "Object",
     "src": {
      "text": "291,1661,29,72:291,1662,12,250",
      "type": "291,1661,21"
     }
    }
   ],
   "nameprimary": "relayEvents([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "removeAfterListener",
   "text": "Alias for {@link #method!unAfter #unAfter}.\n",
   "nameprimary": "removeAfterListener(undefined)"
  },
  {
   "name": "removeBeforeListener",
   "text": "Alias for {@link #method!unBefore #unBefore}.\n",
   "nameprimary": "removeBeforeListener(undefined)"
  },
  {
   "name": "removeCls",
   "text": "Removes the given CSS class(es) from this widget's primary element.\n",
   "items": [
    {
     "$type": "param",
     "name": "cls",
     "text": "The class(es) to remove.\n",
     "type": "String/String[]",
     "src": {
      "name": "18,1338,33",
      "text": "18,1338,37,25",
      "type": "18,1338,16"
     }
    },
    {
     "$type": "param",
     "name": "prefix",
     "optional": true,
     "text": "Optional prefix to prepend before each class.\n",
     "type": "String",
     "value": "\"\"",
     "src": {
      "name": "18,1339,25",
      "text": "18,1339,36,46",
      "type": "18,1339,16",
      "value": "18,1339,32"
     }
    },
    {
     "$type": "param",
     "name": "suffix",
     "optional": true,
     "text": "Optional suffix to append to each class.\n",
     "type": "String",
     "value": "\"\"",
     "src": {
      "name": "18,1340,25",
      "text": "18,1340,36,41",
      "type": "18,1340,16",
      "value": "18,1340,32"
     }
    }
   ],
   "nameprimary": "removeCls([object Object],[object Object],[object Object])"
  },
  {
   "name": "removeDelegatedListener",
   "text": "Removes delegated listeners for a given eventName, function, and scope.\nUsers should not invoke this method directly.  It is called automatically by\nthe framework as part of {@link #method!removeListener #removeListener} processing.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "src": {
      "name": "277,133,0"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "src": {
      "name": "277,133,0"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "src": {
      "name": "277,133,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "removeDelegatedListener([object Object],[object Object],[object Object])"
  },
  {
   "name": "removeListener",
   "text": "Removes an event handler.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The type of event the handler was associated with.\n",
     "type": "String",
     "src": {
      "name": "291,1233,28",
      "text": "291,1233,38,51",
      "type": "291,1233,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "text": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener addListener} call.**\n",
     "type": "Function",
     "src": {
      "name": "291,1234,30",
      "text": "291,1234,33,66:291,1235,12,76",
      "type": "291,1234,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n",
     "type": "Object",
     "src": {
      "name": "291,1237,28",
      "optional": "291,1237,35",
      "text": "291,1237,45,51:291,1238,12,150",
      "type": "291,1237,20"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "eventOptions",
     "text": "\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
     "src": {
      "access": "291,1240,33",
      "name": "291,1240,19",
      "text": "291,1241,12,867"
     }
    },
    {
     "$type": "return",
     "name": "this",
     "src": {
      "name": "291,1303,0"
     }
    }
   ],
   "nameprimary": "removeListener([object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "removeManagedListener",
   "text": "Removes listeners that were added by the {@link #method!mon #mon} method.\n",
   "items": [
    {
     "$type": "param",
     "name": "item",
     "text": "The item from which to remove\na listener/listeners.\n",
     "type": "Ext.util.Observable/Ext.dom.Element",
     "src": {
      "name": "291,608,57",
      "text": "291,608,62,30:291,609,12,22",
      "type": "291,608,20"
     }
    },
    {
     "$type": "param",
     "name": "ename",
     "text": "The event name, or an object containing event name\nproperties.\n",
     "type": "Object/String",
     "src": {
      "name": "291,610,35",
      "text": "291,610,41,51:291,611,12,12",
      "type": "291,610,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "optional": true,
     "text": "If the `ename` parameter was an event name, this is\nthe handler function.\n",
     "type": "Function",
     "src": {
      "name": "291,612,30",
      "optional": "291,612,34",
      "text": "291,612,44,52:291,613,12,22",
      "type": "291,612,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n",
     "type": "Object",
     "src": {
      "name": "291,614,28",
      "optional": "291,614,35",
      "text": "291,614,45,52:291,615,12,72",
      "type": "291,614,20"
     }
    }
   ],
   "nameprimary": "removeManagedListener([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "removeManagedListenerItem",
   "text": "Remove a single managed listener item\n",
   "items": [
    {
     "$type": "param",
     "name": "isClear",
     "text": "True if this is being called during a clear\n",
     "type": "Boolean",
     "src": {
      "name": "291,1460,29",
      "text": "291,1460,37,44",
      "type": "291,1460,20"
     }
    },
    {
     "$type": "param",
     "name": "managedListener",
     "text": "The managed listener item\n",
     "type": "Object",
     "src": {
      "name": "291,1461,28",
      "text": "291,1461,44,26",
      "type": "291,1461,20"
     }
    },
    {
     "$type": "param",
     "name": "item",
     "type": "Object",
     "src": {
      "name": "291,1462,28",
      "type": "291,1462,20"
     }
    },
    {
     "$type": "param",
     "name": "ename",
     "type": "String",
     "src": {
      "name": "291,1463,28",
      "type": "291,1463,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "type": "Function",
     "src": {
      "name": "291,1464,30",
      "type": "291,1464,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "text": "See removeManagedListener for other args\n",
     "type": "Object",
     "src": {
      "name": "291,1465,28",
      "text": "291,1466,12,41",
      "type": "291,1465,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "removeManagedListenerItem([object Object],[object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "removePlugin",
   "text": "Removes and (optionally) destroys a plugin.\n\n**Note:** Not all plugins are designed to be removable. Consult the documentation\nfor the specific plugin in question to be sure.\n",
   "items": [
    {
     "$type": "param",
     "name": "plugin",
     "text": "The plugin or its `{@link #cfg!id id}` to remove.\n",
     "type": "String/Ext.plugin.Abstract",
     "src": {
      "name": "292,232,44",
      "text": "292,232,51,34",
      "type": "292,232,16"
     }
    },
    {
     "$type": "param",
     "name": "destroy",
     "optional": true,
     "text": "Pass `true` to not call `destroy()` on the plugin.\n",
     "type": "Boolean",
     "src": {
      "name": "292,233,26",
      "text": "292,233,35,51",
      "type": "292,233,16"
     }
    },
    {
     "$type": "return",
     "text": "plugin instance or `null` if not found.\n",
     "type": "Ext.plugin.Abstract",
     "src": {
      "text": "292,234,38,40",
      "type": "292,234,17"
     }
    }
   ],
   "nameprimary": "removePlugin([object Object],[object Object],[object Object])"
  },
  {
   "name": "replaceCls",
   "text": "Replaces specified classes with the newly specified classes.\nIt uses the {@link #method!addCls #addCls} and {@link #method!removeCls #removeCls} methods, so if the class(es) you\nare removing don't exist, it will still add the new classes.\n",
   "items": [
    {
     "$type": "param",
     "name": "oldCls",
     "text": "The class(es) to remove.\n",
     "type": "String/String[]",
     "src": {
      "name": "18,1352,33",
      "text": "18,1352,40,25",
      "type": "18,1352,16"
     }
    },
    {
     "$type": "param",
     "name": "newCls",
     "text": "The class(es) to add.\n",
     "type": "String/String[]",
     "src": {
      "name": "18,1353,33",
      "text": "18,1353,40,22",
      "type": "18,1353,16"
     }
    },
    {
     "$type": "param",
     "name": "prefix",
     "optional": true,
     "text": "Optional prefix to prepend before each class.\n",
     "type": "String",
     "value": "\"\"",
     "src": {
      "name": "18,1354,25",
      "text": "18,1354,36,46",
      "type": "18,1354,16",
      "value": "18,1354,32"
     }
    },
    {
     "$type": "param",
     "name": "suffix",
     "optional": true,
     "text": "Optional suffix to append to each class.\n",
     "type": "String",
     "value": "\"\"",
     "src": {
      "name": "18,1355,25",
      "text": "18,1355,36,41",
      "type": "18,1355,16",
      "value": "18,1355,32"
     }
    }
   ],
   "nameprimary": "replaceCls([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "resetFloating",
   "text": "Resets {@link #cfg!top #top}, {@link #cfg!right #right}, {@link #cfg!bottom #bottom} and {@link #cfg!left #left} configurations to\n`null`, which will cause this component to stop being 'positioned' and to take its place in\nits owning container's layout.\n",
   "nameprimary": "resetFloating(undefined)"
  },
  {
   "name": "resetPositioned",
   "text": "Resets {@link #cfg!top #top}, {@link #cfg!right #right}, {@link #cfg!bottom #bottom} and {@link #cfg!left #left} configurations to\n`null`, which will cause this component to stop being 'positioned' and to take its place in\nits owning container's layout.\n",
   "nameprimary": "resetPositioned(undefined)"
  },
  {
   "name": "resizeHandler",
   "text": "Calculates and sets scene size and position based on the given `{@link #cfg!size size}` object\nand the {@link #cfg!padding #padding} config.\n",
   "items": [
    {
     "$type": "param",
     "name": "size",
     "type": "Object",
     "items": [
      {
       "$type": "property",
       "name": "width",
       "type": "Number",
       "src": {
        "name": "775,153,29",
        "type": "775,153,16"
       }
      },
      {
       "$type": "property",
       "name": "height",
       "type": "Number",
       "src": {
        "name": "775,154,29",
        "type": "775,154,16"
       }
      }
     ],
     "src": {
      "name": "775,152,24",
      "type": "775,152,16"
     }
    }
   ],
   "access": "private",
   "nameprimary": "resizeHandler([object Object])"
  },
  {
   "name": "resolveListenerScope",
   "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
   "items": [
    {
     "$type": "param",
     "name": "defaultScope",
     "optional": true,
     "text": "The default scope to return if none is found.\n",
     "type": "Object",
     "value": "this",
     "src": {
      "name": "291,670,29",
      "text": "291,670,48,46",
      "type": "291,670,20",
      "value": "291,670,42"
     }
    },
    {
     "$type": "return",
     "text": "The default event scope\n",
     "type": "Object",
     "src": {
      "text": "291,671,29,24",
      "type": "291,671,21"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "resolveListenerScope([object Object],[object Object])"
  },
  {
   "name": "resolveSatelliteListenerScope",
   "text": "Returns the default listener scope for a \"satellite\" of this component.\nUsed for resolving scope for observable objects that are not part of the normal\nContainer/Component hierarchy (for example, plugins)\n",
   "items": [
    {
     "$type": "param",
     "name": "satellite",
     "type": "Ext.mixin.Observable",
     "src": {
      "name": "287,234,38",
      "type": "287,234,16"
     }
    },
    {
     "$type": "param",
     "name": "defaultScope",
     "optional": true,
     "type": "Object",
     "src": {
      "name": "287,235,25",
      "type": "287,235,16"
     }
    },
    {
     "$type": "return",
     "text": "The listener scope\n",
     "type": "Object",
     "src": {
      "text": "287,236,25,19",
      "type": "287,236,17"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "resolveSatelliteListenerScope([object Object],[object Object],[object Object])"
  },
  {
   "name": "resumeEvent",
   "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the {@link #method!suspendEvent #suspendEvent} method is called multiple times for a certain\nevent, this converse method will have to be called the same number of times for it\nto resume firing.**\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "Multiple event names to resume.\n",
     "type": "String...",
     "src": {
      "name": "291,1585,31",
      "text": "291,1585,41,32",
      "type": "291,1585,20"
     }
    }
   ],
   "nameprimary": "resumeEvent([object Object])"
  },
  {
   "name": "resumeEvents",
   "text": "Resumes firing events (see {@link #method!suspendEvents #suspendEvents}).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
   "items": [
    {
     "$type": "param",
     "name": "discardQueue",
     "optional": true,
     "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See {@link #method!suspendEvents #suspendEvents}.\n",
     "type": "Boolean",
     "src": {
      "name": "291,1609,29",
      "text": "291,1609,43,59:291,1610,11,53",
      "type": "291,1609,19"
     }
    }
   ],
   "nameprimary": "resumeEvents([object Object])"
  },
  {
   "name": "revertFocus",
   "text": "Returns focus to the Component or element found in the cached\nfocusEnterEvent.\n",
   "access": "private",
   "nameprimary": "revertFocus(undefined)"
  },
  {
   "name": "revertFocusTo",
   "text": "This field is on the recieving end of a call from {@link #method!revertFocus}.\n\nIt is called when focus is being pushed back into this Component from a Component\nthat is focused and is being hidden or disabled.\n\nWe must focus the passed element.\n\nSubclasses may perform some extra processing to prepare for refocusing.\n",
   "items": [
    {
     "$type": "param",
     "name": "target",
     "src": {
      "name": "283,677,19"
     }
    }
   ],
   "access": "private",
   "nameprimary": "revertFocusTo([object Object])"
  },
  {
   "name": "saveState",
   "text": "Saves the current state of this object to the provided `state` builder. By default\nthis method saves the configs specified as `{@link #cfg!stateful stateful}`.\n\nThis method can also be overridden by subclasses to store custom data directly to\nthe `state` builder:\n\n     saveState: function(state) {\n         this.callParent([ state ]);\n\n         state.set('foo', 42);\n     }\n\nWhen overriding this method, it is also likely necessary to override `{@link #method!loadState loadState}`.\n",
   "items": [
    {
     "$type": "param",
     "name": "state",
     "text": "The state builder to which to save state.\n",
     "type": "Ext.state.Builder",
     "src": {
      "name": "668,209,35",
      "text": "668,209,41,42",
      "type": "668,209,16"
     }
    },
    {
     "$type": "param",
     "name": "stateful",
     "text": "The stateful properties as an object keyed by config name.\n",
     "type": "Object",
     "src": {
      "name": "668,210,24",
      "text": "668,210,33,59",
      "type": "668,210,16"
     }
    }
   ],
   "access": "private",
   "nameprimary": "saveState([object Object],[object Object])"
  },
  {
   "name": "setConfig",
   "text": "Sets a single/multiple configuration options.\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "text": "The name of the property to set, or a set of key value\npairs to set.\n",
     "type": "String/Object",
     "src": {
      "name": "46,1771,35",
      "text": "46,1771,40,55:46,1772,12,14",
      "type": "46,1771,20"
     }
    },
    {
     "$type": "param",
     "name": "value",
     "optional": true,
     "text": "The value to set for the name parameter.\n",
     "type": "Object",
     "src": {
      "name": "46,1773,29",
      "text": "46,1773,36,41",
      "type": "46,1773,20"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "options",
     "optional": true,
     "type": "Object",
     "src": {
      "access": "46,1774,39",
      "name": "46,1774,29",
      "type": "46,1774,20"
     }
    },
    {
     "$type": "return",
     "text": "this\n",
     "type": "Ext.Base",
     "src": {
      "text": "46,1775,31,5",
      "type": "46,1775,21"
     }
    }
   ],
   "nameprimary": "setConfig([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "setCurrentAlignmentInfo",
   "text": "Sets the current Alignment information, called by alignTo\n",
   "items": [
    {
     "$type": "param",
     "name": "alignmentInfo",
     "src": {
      "name": "689,646,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "setCurrentAlignmentInfo([object Object])"
  },
  {
   "name": "setDomainFromData",
   "items": [
    {
     "$type": "param",
     "name": "items",
     "type": "Array",
     "src": {
      "name": "754,377,23",
      "type": "754,377,16"
     }
    },
    {
     "$type": "param",
     "name": "field",
     "type": "String",
     "src": {
      "name": "754,378,24",
      "type": "754,378,16"
     }
    },
    {
     "$type": "param",
     "name": "scale",
     "type": "Function",
     "src": {
      "name": "754,379,26",
      "type": "754,379,16"
     }
    },
    {
     "$type": "param",
     "name": "step",
     "optional": true,
     "text": "Only required if the `scale` is a band scale.\n",
     "type": "Number",
     "src": {
      "name": "754,380,25",
      "text": "754,380,31,46",
      "type": "754,380,16"
     }
    }
   ],
   "access": "private",
   "nameprimary": "setDomainFromData([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "setListeners",
   "text": "An alias for {@link Ext.util.Observable#method!addListener addListener}.  In\nversions prior to 5.1, {@link #cfg!listeners #listeners} had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the {@link #method!on #on} method.\n",
   "items": [
    {
     "$type": "param",
     "name": "listeners",
     "text": "The listeners\n",
     "type": "Object",
     "src": {
      "name": "291,2059,28",
      "text": "291,2059,38,14",
      "type": "291,2059,20"
     }
    }
   ],
   "nameprimary": "setListeners([object Object])"
  },
  {
   "name": "setRendered",
   "text": "All Components need a potentially recursive setRendered because some are\npseudo containers, such as grid {@link Ext.grid.Row}, and some mix in\n{@link Ext.mixin.Toolable}.\n",
   "items": [
    {
     "$type": "param",
     "name": "rendered",
     "type": "Boolean",
     "src": {
      "name": "689,997,29",
      "type": "689,997,20"
     }
    },
    {
     "$type": "param",
     "name": "root",
     "optional": true,
     "type": "Boolean",
     "src": {
      "name": "689,998,30",
      "type": "689,998,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "setRendered([object Object],[object Object])"
  },
  {
   "name": "setSize",
   "text": "Sets the size of the Component.\n",
   "items": [
    {
     "$type": "param",
     "name": "width",
     "text": "The new width for the Component.\n",
     "type": "Number",
     "src": {
      "name": "18,1294,24",
      "text": "18,1294,30,33",
      "type": "18,1294,16"
     }
    },
    {
     "$type": "param",
     "name": "height",
     "text": "The new height for the Component.\n",
     "type": "Number",
     "src": {
      "name": "18,1295,24",
      "text": "18,1295,31,34",
      "type": "18,1295,16"
     }
    }
   ],
   "nameprimary": "setSize([object Object],[object Object])"
  },
  {
   "name": "setTabIndex",
   "text": "Set the tabIndex property for this Focusable. If the focusEl\nis available, set tabIndex attribute on it, too.\n",
   "items": [
    {
     "$type": "param",
     "name": "newTabIndex",
     "text": "new tabIndex to set\n",
     "type": "Number",
     "src": {
      "name": "283,449,24",
      "text": "283,449,36,20",
      "type": "283,449,16"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "focusEl",
     "optional": true,
     "type": "HTMLElement",
     "src": {
      "access": "283,450,40",
      "name": "283,450,30",
      "type": "283,450,16"
     }
    }
   ],
   "nameprimary": "setTabIndex([object Object],[object Object])"
  },
  {
   "name": "setVisibility",
   "items": [
    {
     "$type": "param",
     "name": "isVisible",
     "src": {
      "name": "410,2352,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "setVisibility([object Object])"
  },
  {
   "name": "setXY",
   "text": "This method has the same arguments as {@link Ext.dom.Element#method!setXY element's setXY}\nmethod, but is used to maintain the `{@link #cfg!x x}` and `{@link #cfg!y y}` configs (for `{@link #cfg!floated floated}` components)\nor the `{@link #cfg!left left}` and `{@link #cfg!top top}` config for positioned components.\n",
   "items": [
    {
     "$type": "param",
     "name": "x",
     "src": {
      "name": "410,3162,19"
     }
    },
    {
     "$type": "param",
     "name": "y",
     "src": {
      "name": "410,3163,19"
     }
    },
    {
     "$type": "param",
     "name": "animation",
     "src": {
      "name": "410,3164,19"
     }
    }
   ],
   "access": "private",
   "nameprimary": "setXY([object Object],[object Object],[object Object])"
  },
  {
   "name": "show",
   "text": "Shows this component optionally using an animation.\n",
   "items": [
    {
     "$type": "param",
     "name": "animation",
     "optional": true,
     "text": "You can specify an animation here or a bool to\n                         use the {@link #cfg!showAnimation #showAnimation} config.\n",
     "type": "Object/Boolean",
     "src": {
      "name": "410,2167,33",
      "text": "410,2167,44,47:410,2168,8,64",
      "type": "410,2167,16"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "options",
     "optional": true,
     "type": "Object",
     "items": [
      {
       "$type": "property",
       "name": "animation",
       "optional": true,
       "text": "You can specify an animation here or a\n                         bool to use the {@link #cfg!showAnimation #showAnimation} config.\n",
       "type": "Object/Boolean",
       "src": {
        "name": "410,2170,41",
        "text": "410,2170,52,39:410,2171,8,72",
        "type": "410,2170,16"
       }
      },
      {
       "$type": "property",
       "name": "alignment",
       "optional": true,
       "text": "An object containing alignment details.\n",
       "type": "Object",
       "items": [
        {
         "$type": "property",
         "name": "component",
         "optional": true,
         "text": "The target component to show this component by.\n",
         "type": "Object",
         "src": {
          "name": "410,2173,43",
          "text": "410,2173,54,48",
          "type": "410,2173,16"
         }
        },
        {
         "$type": "property",
         "name": "alignment",
         "optional": true,
         "text": "The alignment string, eg: `'tl-bl'`.\n",
         "type": "Object",
         "src": {
          "name": "410,2174,43",
          "text": "410,2174,54,37",
          "type": "410,2174,16"
         }
        },
        {
         "$type": "property",
         "name": "options",
         "optional": true,
         "text": "An object containing options for the\n{@link Ext.util.Region#method!alignTo Ext.util.Region#alignTo} method.\n",
         "type": "Object",
         "src": {
          "name": "410,2175,43",
          "text": "410,2175,52,37:410,2176,8,40",
          "type": "410,2175,16"
         }
        }
       ],
       "src": {
        "name": "410,2172,33",
        "text": "410,2172,44,40",
        "type": "410,2172,16"
       }
      }
     ],
     "src": {
      "access": "410,2169,35",
      "name": "410,2169,25",
      "type": "410,2169,16"
     }
    },
    {
     "$type": "return",
     "type": "Ext.Component",
     "src": {
      "type": "410,2177,17"
     }
    }
   ],
   "nameprimary": "show([object Object],[object Object],[object Object])"
  },
  {
   "name": "showAt",
   "text": "Displays component at specific xy position.\nA floating component (like a menu) is positioned relative to its ownerCt if any.\nUseful for popping up a context menu:\n\n    listeners: {\n        itemcontextmenu: function(view, record, item, index, event, options) {\n            Ext.create('Ext.menu.Menu', {\n                width: 100,\n                height: 100,\n                margin: '0 0 10 0',\n                items: [{\n                    text: 'regular item 1'\n                },{\n                    text: 'regular item 2'\n                },{\n                    text: 'regular item 3'\n                }]\n            }).showAt(event.getXY());\n        }\n    }\n",
   "items": [
    {
     "$type": "param",
     "name": "x",
     "text": "The new x position or array of `[x,y]`, or an\nobject `{x:10, y:10}`.\n",
     "type": "Number/Number[]/Object",
     "src": {
      "name": "410,2611,40",
      "text": "410,2611,42,46:410,2612,8,23",
      "type": "410,2611,16"
     }
    },
    {
     "$type": "param",
     "name": "y",
     "optional": true,
     "text": "The new y position.\n",
     "type": "Number",
     "src": {
      "name": "410,2613,25",
      "text": "410,2613,28,20",
      "type": "410,2613,16"
     }
    },
    {
     "$type": "return",
     "text": "this\n",
     "type": "Ext.Component",
     "src": {
      "text": "410,2614,32,5",
      "type": "410,2614,17"
     }
    }
   ],
   "nameprimary": "showAt([object Object],[object Object],[object Object])"
  },
  {
   "name": "showBy",
   "text": "Shows this component by another component. If you specify no alignment, it will automatically\nposition this component relative to the reference component depending upon the `alignment`\nparameter.\n\nThe `alignment` parameter describes the edge-to-edge alignment of *this* component\nwith the target. It can be specified thus:\n\n- **Blank**: Defaults to positioning where the component will fit trying `'l-r?'`,\n`'r-l?'`, `'b-t?'` then `'t-b?'` in that order.\n- **Two anchors**: If two values from the table below are passed separated by a dash,\n  the first value is used as the element's anchor point, and the second value is\n  used as the target's anchor point.\n- **Two edge/offset descriptors:** An edge/offset descriptor is an edge initial\n  (`t`/`r`/`b`/`l`) followed by a percentage along that side. This describes a\n  point to align with a similar point in the target. So `'t0-b0'` would be\n  the same as `'tl-bl'`, `'l0-r50'` would place the top left corner of this item\n  halfway down the right edge of the target item. This allows more flexibility\n  and also describes which two edges are considered adjacent when positioning a tip pointer.\n\nFollowing are all of the supported predefined anchor positions:\n\n     Value  Description\n     -----  -----------------------------\n     tl     The top left corner\n     t      The center of the top edge\n     tr     The top right corner\n     l      The center of the left edge\n     c      The center\n     r      The center of the right edge\n     bl     The bottom left corner\n     b      The center of the bottom edge\n     br     The bottom right corner\n\nYou can put a '?' at the end of the alignment string to constrain the positioned element to\nthe {@link Ext.Viewport}. The element will attempt to align as specified, but the\nposition will be adjusted to constrain to the viewport if necessary. Note that the element\nbeing aligned might be swapped to align to a different position than that specified in order\nto enforce the viewport constraints.\n\nExample Usage:\n\n    // show `panel` by `button` using the default positioning (auto fit)\n    panel.showBy(button);\n\n    // align the top left corner of `panel` with the top right corner of `button`\n    // (constrained to viewport)\n    panel.showBy(button, \"tl-tr?\");\n\n    // align the bottom right corner of `panel` with the center left edge of `button`\n    // (not constrained by viewport)\n    panel.showBy(button, \"br-cl\");\n\n    // align the center of panel with the bottom left corner of button and\n    // adjust the x position by -6 pixels (and the y position by 0)\n    panel.showBy(button, \"c-bl\", [-6, 0]);\n\n    // align the 25% point on the bottom edge of this panel\n    // with the 75% point on the top edge of button.\n    panel.showBy(button, 'b25-t75');\n",
   "items": [
    {
     "$type": "param",
     "name": "component",
     "text": "The target component to show this component by.\n",
     "type": "Ext.Component",
     "src": {
      "name": "410,2113,31",
      "text": "410,2113,41,48",
      "type": "410,2113,16"
     }
    },
    {
     "$type": "param",
     "name": "alignment",
     "optional": true,
     "text": "The alignment string, eg: `'tl-bl'`.\n",
     "type": "String",
     "src": {
      "name": "410,2114,25",
      "text": "410,2114,36,37",
      "type": "410,2114,16"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "An object containing options for the\n{@link Ext.util.Region#method!alignTo Ext.util.Region#alignTo} method, if an Array is used, it will be assumed to be the\noffset.\n",
     "type": "Object/Array",
     "src": {
      "name": "410,2115,31",
      "text": "410,2115,40,37:410,2116,8,98",
      "type": "410,2115,16"
     }
    }
   ],
   "nameprimary": "showBy([object Object],[object Object],[object Object])"
  },
  {
   "name": "showMask",
   "items": [
    {
     "$type": "param",
     "name": "msg",
     "src": {
      "name": "753,481,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "showMask([object Object])"
  },
  {
   "name": "statics",
   "text": "Get the reference to the class from which this object was instantiated. Note that unlike\n{@link Ext.Base#property!self Ext.Base#self}, `this.statics()` is scope-independent and it always returns\nthe class from which it was called, regardless of what `this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            // always equals to 'Cat' no matter what 'this' refers to\n            // equivalent to: My.Cat.speciesName\n            alert(statics.speciesName);\n\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            // equivalent to: My.Cat.speciesName\n            cloned.groupName = this.statics().speciesName;\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard' // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
   "items": [
    {
     "$type": "return",
     "type": "Ext.Class",
     "src": {
      "type": "46,1348,21"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "statics([object Object])"
  },
  {
   "name": "suspendEvent",
   "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when\nrequested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n{@link #method!resumeEvent #resumeEvent} will have to be called the same number of times for it to resume\nfiring.**\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "Multiple event names to suspend.\n",
     "type": "String...",
     "src": {
      "name": "291,1554,32",
      "text": "291,1554,42,33",
      "type": "291,1554,21"
     }
    }
   ],
   "nameprimary": "suspendEvent([object Object])"
  },
  {
   "name": "suspendEvents",
   "text": "Suspends the firing of all events. (see {@link #method!resumeEvents #resumeEvents})\n",
   "items": [
    {
     "$type": "param",
     "name": "queueSuspended",
     "text": "`true` to queue up suspended events to be fired\nafter the {@link #method!resumeEvents #resumeEvents} call instead of discarding all suspended events.\n",
     "type": "Boolean",
     "src": {
      "name": "291,1533,29",
      "text": "291,1533,44,48:291,1534,12,81",
      "type": "291,1533,20"
     }
    }
   ],
   "nameprimary": "suspendEvents([object Object])"
  },
  {
   "name": "syncAlwaysOnTop",
   "text": "Fixes up the alwaysOnTop order of this floated widget within its siblings.\n",
   "items": [
    {
     "$type": "param",
     "access": "private",
     "name": "fromMousedown",
     "src": {
      "access": "689,1597,34",
      "name": "689,1597,19"
     }
    },
    {
     "$type": "return",
     "text": "`true` if this was the topmost widget among its siblings.\n",
     "type": "Boolean",
     "src": {
      "text": "689,1598,30,58",
      "type": "689,1598,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "syncAlwaysOnTop([object Object],[object Object])"
  },
  {
   "name": "syncFloatWrap",
   "text": "Synchronizes the size and position of the {@link #method!getFloatWrap floatWrap}\nwhen this Widget is resized\n",
   "access": "private",
   "nameprimary": "syncFloatWrap(undefined)"
  },
  {
   "name": "toFront",
   "text": "Brings a {@link #cfg!floated #cfg-floated} Component to the front of any other visible, floated\nComponents while honoring all {@link #cfg!alwaysOnTop} settings. This may not become\ntopmost if another visible floated component has a higher {@link #cfg!alwaysOnTop} value.\n\nIf this Component becomes the topmost *modal* floated component, the the shared modal\nmask is moved to just below this Component.\n",
   "items": [
    {
     "$type": "param",
     "access": "private",
     "name": "fromMousedown",
     "optional": true,
     "type": "Boolean",
     "src": {
      "access": "689,508,42",
      "name": "689,508,26",
      "type": "689,508,16"
     }
    },
    {
     "$type": "return",
     "text": "this\n",
     "type": "Ext.Component",
     "src": {
      "text": "689,509,32,5",
      "type": "689,509,17"
     }
    }
   ],
   "nameprimary": "toFront([object Object],[object Object])"
  },
  {
   "name": "toggleCls",
   "text": "Toggles the specified CSS class on this element (removes it if it already exists,\notherwise adds it).\n",
   "items": [
    {
     "$type": "param",
     "name": "className",
     "text": "The CSS class to toggle.\n",
     "type": "String",
     "src": {
      "name": "18,1276,24",
      "text": "18,1276,34,25",
      "type": "18,1276,16"
     }
    },
    {
     "$type": "param",
     "name": "state",
     "optional": true,
     "text": "If specified as `true`, causes the class to be added. If\nspecified as `false`, causes the class to be removed.\n",
     "type": "Boolean",
     "src": {
      "name": "18,1277,26",
      "text": "18,1277,33,57:18,1278,8,54",
      "type": "18,1277,16"
     }
    },
    {
     "$type": "return",
     "name": "this",
     "src": {
      "name": "18,1284,0"
     }
    }
   ],
   "nameprimary": "toggleCls([object Object],[object Object],[object Object])"
  },
  {
   "name": "toLocalXY",
   "text": "Converts event coordinates from page coordinates to view coordinates.\n",
   "items": [
    {
     "$type": "param",
     "name": "event",
     "type": "Ext.event.Event",
     "src": {
      "name": "753,558,33",
      "type": "753,558,16"
     }
    },
    {
     "$type": "param",
     "name": "view",
     "optional": true,
     "text": "If omitted, the component's element will be used.\n",
     "type": "Ext.dom.Element",
     "src": {
      "name": "753,559,34",
      "text": "753,559,40,50",
      "type": "753,559,16"
     }
    },
    {
     "$type": "return",
     "type": "Number[]",
     "src": {
      "type": "753,560,17"
     }
    }
   ],
   "nameprimary": "toLocalXY([object Object],[object Object],[object Object])"
  },
  {
   "name": "transformStatefulConfig",
   "text": "This method is called internally by `{@link #method!initConfig initConfig}` to apply whatever changes are\nneeded from persistent storage.\n",
   "items": [
    {
     "$type": "param",
     "name": "instanceConfig",
     "text": "The base config object\n",
     "type": "Object",
     "src": {
      "name": "668,470,28",
      "text": "668,470,43,23",
      "type": "668,470,20"
     }
    },
    {
     "$type": "param",
     "name": "configurator",
     "type": "Ext.Configurator",
     "src": {
      "name": "668,471,38",
      "type": "668,471,20"
     }
    },
    {
     "$type": "return",
     "text": "The config object to use.\n",
     "type": "Object",
     "src": {
      "text": "668,472,29,26",
      "type": "668,472,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "transformStatefulConfig([object Object],[object Object],[object Object])"
  },
  {
   "name": "triggerInitialized",
   "access": "private",
   "nameprimary": "triggerInitialized(undefined)"
  },
  {
   "name": "un",
   "text": "Shorthand for {@link #method!removeListener #removeListener}.\nRemoves an event handler.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The type of event the handler was associated with.\n",
     "type": "String",
     "src": {
      "name": "291,1233,28",
      "text": "291,1233,38,51",
      "type": "291,1233,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "text": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener addListener} call.**\n",
     "type": "Function",
     "src": {
      "name": "291,1234,30",
      "text": "291,1234,33,66:291,1235,12,76",
      "type": "291,1234,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n",
     "type": "Object",
     "src": {
      "name": "291,1237,28",
      "optional": "291,1237,35",
      "text": "291,1237,45,51:291,1238,12,150",
      "type": "291,1237,20"
     }
    },
    {
     "$type": "param",
     "access": "private",
     "name": "eventOptions",
     "text": "\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
     "src": {
      "access": "291,1240,33",
      "name": "291,1240,19",
      "text": "291,1241,12,867"
     }
    },
    {
     "$type": "return",
     "name": "this",
     "src": {
      "name": "291,1303,0"
     }
    }
   ],
   "nameprimary": "un([object Object],[object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "unAfter",
   "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'after'`.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event the handler\nwas associated with.\n",
     "type": "String/String[]/Object",
     "src": {
      "name": "291,1356,44",
      "text": "291,1356,54,34:291,1357,12,21",
      "type": "291,1356,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "text": "The handler to remove.\n",
     "type": "Function/String",
     "src": {
      "name": "291,1358,37",
      "text": "291,1358,40,23",
      "type": "291,1358,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope originally specified for `fn`.\n",
     "type": "Object",
     "src": {
      "name": "291,1359,29",
      "text": "291,1359,36,41",
      "type": "291,1359,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "Extra options object.\n",
     "type": "Object",
     "src": {
      "name": "291,1360,29",
      "text": "291,1360,38,22",
      "type": "291,1360,20"
     }
    }
   ],
   "nameprimary": "unAfter([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "unBefore",
   "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'before'`.\n",
   "items": [
    {
     "$type": "param",
     "name": "eventName",
     "text": "The name of the event the handler\nwas associated with.\n",
     "type": "String/String[]/Object",
     "src": {
      "name": "291,1341,44",
      "text": "291,1341,54,34:291,1342,12,21",
      "type": "291,1341,20"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "text": "The handler to remove.\n",
     "type": "Function/String",
     "src": {
      "name": "291,1343,37",
      "text": "291,1343,40,23",
      "type": "291,1343,20"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "optional": true,
     "text": "The scope originally specified for `fn`.\n",
     "type": "Object",
     "src": {
      "name": "291,1344,29",
      "text": "291,1344,36,41",
      "type": "291,1344,20"
     }
    },
    {
     "$type": "param",
     "name": "options",
     "optional": true,
     "text": "Extra options object.\n",
     "type": "Object",
     "src": {
      "name": "291,1345,29",
      "text": "291,1345,38,22",
      "type": "291,1345,20"
     }
    }
   ],
   "nameprimary": "unBefore([object Object],[object Object],[object Object],[object Object])"
  },
  {
   "name": "unlink",
   "text": "Destroys a given set of `{@link #method!link linked}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
   "items": [
    {
     "$type": "param",
     "name": "names",
     "text": "The names of the linked objects to destroy.\n",
     "type": "String[]",
     "src": {
      "name": "46,1944,30",
      "text": "46,1944,36,44",
      "type": "46,1944,20"
     }
    },
    {
     "$type": "return",
     "text": "this\n",
     "type": "Ext.Base",
     "src": {
      "text": "46,1945,31,5",
      "type": "46,1945,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "unlink([object Object],[object Object])"
  },
  {
   "name": "up",
   "text": "Walks up the ownership hierarchy looking for an ancestor Component which matches\nthe passed simple selector.\n\nExample:\n\n    var owningTabPanel = grid.up('tabpanel');\n",
   "items": [
    {
     "$type": "param",
     "name": "selector",
     "optional": true,
     "text": "The simple selector to test.\n",
     "type": "String",
     "src": {
      "name": "18,1590,24",
      "optional": "18,1590,34",
      "text": "18,1590,44,29",
      "type": "18,1590,16"
     }
    },
    {
     "$type": "param",
     "name": "limit",
     "optional": true,
     "text": "This may be a selector upon which to stop\nthe upward scan, or a limit of the number of steps, or Component reference to stop on.\n",
     "type": "String/Number/Ext.Component",
     "src": {
      "name": "18,1591,46",
      "text": "18,1591,53,42:18,1592,8,87",
      "type": "18,1591,16"
     }
    },
    {
     "$type": "return",
     "text": "The matching ancestor Container (or `undefined` if no match\nwas found).\n",
     "type": "Ext.Container",
     "src": {
      "text": "18,1593,32,60:18,1594,8,12",
      "type": "18,1593,17"
     }
    }
   ],
   "nameprimary": "up([object Object],[object Object],[object Object])"
  },
  {
   "name": "updateCls",
   "text": "All cls methods directly report to the {@link #cfg!cls #cls} configuration, so anytime it changes,\n{@link #method!updateCls #updateCls} will be called\n",
   "items": [
    {
     "$type": "param",
     "name": "newCls",
     "src": {
      "name": "18,1378,0"
     }
    },
    {
     "$type": "param",
     "name": "oldCls",
     "src": {
      "name": "18,1378,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "updateCls([object Object],[object Object])"
  },
  {
   "name": "updateData",
   "items": [
    {
     "$type": "param",
     "name": "newData",
     "src": {
      "name": "410,2402,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "updateData([object Object])"
  },
  {
   "name": "updateHeight",
   "items": [
    {
     "$type": "param",
     "name": "height",
     "src": {
      "name": "18,1554,15"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "updateHeight([object Object])"
  },
  {
   "name": "updateSession",
   "text": "Updates the session config.\n",
   "items": [
    {
     "$type": "param",
     "name": "session",
     "type": "Ext.data.Session",
     "src": {
      "name": "275,862,38",
      "type": "275,862,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "updateSession([object Object])"
  },
  {
   "name": "updateViewModel",
   "text": "Updates the viewModel config.\n",
   "items": [
    {
     "$type": "param",
     "name": "viewModel",
     "type": "Ext.app.ViewModel",
     "src": {
      "name": "275,878,39",
      "type": "275,878,20"
     }
    },
    {
     "$type": "param",
     "name": "oldViewModel",
     "type": "Ext.app.ViewModel",
     "src": {
      "name": "275,879,39",
      "type": "275,879,20"
     }
    }
   ],
   "access": "private",
   "nameprimary": "updateViewModel([object Object],[object Object])"
  },
  {
   "name": "updateWidth",
   "items": [
    {
     "$type": "param",
     "name": "width",
     "src": {
      "name": "18,1543,15"
     }
    }
   ],
   "access": "protected",
   "nameprimary": "updateWidth([object Object])"
  },
  {
   "name": "watchConfig",
   "text": "Watches config properties.\n\n     instance.watchConfig({\n         title: 'onTitleChange',\n         scope: me\n     });\n",
   "items": [
    {
     "$type": "param",
     "name": "name",
     "src": {
      "name": "46,1852,0"
     }
    },
    {
     "$type": "param",
     "name": "fn",
     "src": {
      "name": "46,1852,0"
     }
    },
    {
     "$type": "param",
     "name": "scope",
     "src": {
      "name": "46,1852,0"
     }
    }
   ],
   "access": "private",
   "nameprimary": "watchConfig([object Object],[object Object],[object Object])"
  },
  {
   "name": "whenVisible",
   "text": "Queue a function to run when the component is visible & painted. If those conditions\nare met, the function will execute  immediately, otherwise it will wait until it is\nvisible and painted.\n",
   "items": [
    {
     "$type": "param",
     "name": "fn",
     "text": "The function to execute on this component.\n",
     "type": "String",
     "src": {
      "name": "410,3111,28",
      "text": "410,3111,31,43",
      "type": "410,3111,20"
     }
    },
    {
     "$type": "param",
     "name": "args",
     "optional": true,
     "text": "The arguments to pass.\n",
     "type": "Object[]",
     "src": {
      "name": "410,3112,31",
      "text": "410,3112,37,23",
      "type": "410,3112,20"
     }
    },
    {
     "$type": "return",
     "text": "`true` if the function was executed immediately.\n",
     "type": "Boolean",
     "src": {
      "text": "410,3113,30,49",
      "type": "410,3113,21"
     }
    }
   ],
   "access": "private",
   "nameprimary": "whenVisible([object Object],[object Object],[object Object])"
  }
 ],
 "methodNames": [
  "_addDeclaredListeners",
  "_fixReference",
  "_flushStateful",
  "_getStateId",
  "activatePlugin",
  "addAfterListener",
  "addBeforeListener",
  "addCls",
  "addDelegatedListener",
  "addDeprecations",
  "addElementReference",
  "addElementReferenceOnDemand",
  "addListener",
  "addManagedListener",
  "addPlugin",
  "afterEdit",
  "afterErase",
  "afterRender",
  "alignContent",
  "alignTo",
  "applyBind",
  "applyCentered",
  "applyPlugins",
  "applySession",
  "applyStyle",
  "applyTpl",
  "applyViewModel",
  "beforeInitialize",
  "blur",
  "bubble",
  "callOverridden",
  "callParent",
  "callSuper",
  "center",
  "clearDelegatedListeners",
  "clearListeners",
  "clearManagedListeners",
  "clearScene",
  "constructor",
  "createPlugin",
  "createRelayer",
  "createTransition",
  "destroy",
  "destroyMembers",
  "destroyPlugin",
  "disable",
  "doAddListener",
  "doDestroy",
  "doFireDelegatedEvent",
  "doFireEvent",
  "doInheritUi",
  "doUninheritUi",
  "enable",
  "enableBubble",
  "findFloatParent",
  "findFocusTarget",
  "findPlugin",
  "fireAction",
  "fireEvent",
  "fireEventArgs",
  "fireEventedAction",
  "focus",
  "getAlignmentInfo",
  "getAlignRegion",
  "getAriaLabelEl",
  "getBubbleParent",
  "getClassCls",
  "getConfig",
  "getController",
  "getCurrentAlignmentInfo",
  "getCurrentConfig",
  "getDefs",
  "getElementConfig",
  "getFloatParent",
  "getFloatWrap",
  "getFocusClsEl",
  "getFocusEl",
  "getId",
  "getInherited",
  "getInheritedConfig",
  "getInitialConfig",
  "getModalSibling",
  "getPlugin",
  "getRefOwner",
  "getRenderTarget",
  "getScene",
  "getScrollableClientRegion",
  "getSize",
  "getStateBuilder",
  "getStatefulOwner",
  "getTabIndex",
  "getXTypes",
  "handleBlurEvent",
  "handleFocusEvent",
  "hasCls",
  "hasConfig",
  "hasListener",
  "hide",
  "hideMask",
  "initBindable",
  "initConfig",
  "initDragConstraints",
  "initElement",
  "initElementListeners",
  "initFocusableElement",
  "initFocusableEvents",
  "initialize",
  "initInheritedState",
  "initKeyMap",
  "initUiReference",
  "insertFloatedDom",
  "invalidateInheritedState",
  "is",
  "isAncestor",
  "isBlurring",
  "isBound",
  "isCentered",
  "isDescendantOf",
  "isDestructing",
  "isDisabled",
  "isEnabled",
  "isFocusable",
  "isFocusing",
  "isHeighted",
  "isHidden",
  "isPainted",
  "isRendered",
  "isSuspended",
  "isSyncing",
  "isVisible",
  "isWidthed",
  "isXType",
  "link",
  "loadState",
  "lookupController",
  "lookupNameHolder",
  "lookupReferenceHolder",
  "lookupSession",
  "lookupTpl",
  "lookupViewModel",
  "mon",
  "mun",
  "on",
  "onAdded",
  "onAfter",
  "onBefore",
  "onBlur",
  "onFocus",
  "onFocusEnter",
  "onFocusLeave",
  "onFocusMove",
  "onInheritedAdd",
  "onInheritedRemove",
  "onInitialized",
  "onRender",
  "onResize",
  "onScrollEnd",
  "onScrollMove",
  "onScrollStart",
  "onStatefulChange",
  "owns",
  "persistState",
  "preprocessShow",
  "processElementConfig",
  "publishState",
  "readStateObject",
  "realign",
  "relayEvents",
  "removeAfterListener",
  "removeBeforeListener",
  "removeCls",
  "removeDelegatedListener",
  "removeListener",
  "removeManagedListener",
  "removeManagedListenerItem",
  "removePlugin",
  "replaceCls",
  "resetFloating",
  "resetPositioned",
  "resizeHandler",
  "resolveListenerScope",
  "resolveSatelliteListenerScope",
  "resumeEvent",
  "resumeEvents",
  "revertFocus",
  "revertFocusTo",
  "saveState",
  "setConfig",
  "setCurrentAlignmentInfo",
  "setDomainFromData",
  "setListeners",
  "setRendered",
  "setSize",
  "setTabIndex",
  "setVisibility",
  "setXY",
  "show",
  "showAt",
  "showBy",
  "showMask",
  "statics",
  "suspendEvent",
  "suspendEvents",
  "syncAlwaysOnTop",
  "syncFloatWrap",
  "toFront",
  "toggleCls",
  "toLocalXY",
  "transformStatefulConfig",
  "triggerInitialized",
  "un",
  "unAfter",
  "unBefore",
  "unlink",
  "up",
  "updateCls",
  "updateData",
  "updateHeight",
  "updateSession",
  "updateViewModel",
  "updateWidth",
  "watchConfig",
  "whenVisible"
 ]
}